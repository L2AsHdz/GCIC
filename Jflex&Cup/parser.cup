package analizadores.sintactico;

import java.util.ArrayList;
import java.util.List;
import model.Token;
import model.errores.ErrorAnalisis;
import model.errores.TipoError;
import java_cup.runtime.Symbol;

parser code{:

    private final List<ErrorAnalisis> errores = new ArrayList();

    public List<ErrorAnalisis> getErrores() {
        return this.errores;
    }

    public void syntax_error(Symbol s) {
        Token t = (Token) s.value;
        StringBuilder descripcion = new StringBuilder("Se esperaba: ");
        expected_token_ids().forEach(x -> descripcion.append(symbl_name_from_id(x)).append(", "));
        errores.add(new ErrorAnalisis(t.getLexema(), t.getLinea(), t.getColumna(), TipoError.SINTACTICO, descripcion.toString()));
        System.out.println(t.getLexema() + ", linea: " + t.getLinea() + ", col: " + t.getColumna() + ", descripcion: " + descripcion.toString());
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        Token t = (Token) cur_token.value;
        System.out.println("Error irrecuperable " + t.getLexema());
    }

:}

//* Terminales

terminal Token      C_GCIC, C_HEAD, C_TITLE, C_LINK, C_BODY, C_SPAM, C_INPUT, C_TEXTAREA, C_SELECT;
terminal Token      C_OPTION, C_DIV, C_IMG, C_BR, C_BUTTON, C_H1, C_P, C_SCRIPTING;

terminal Token      HREF, BACKGROUND, COLOR, FONT, FONT_SIZE, FONT_FAMILY, TEXT_ALIGN;
terminal Token      TYPE, ID, NAME, COLS, ROWS, CLASS, SRC, WIDTH, HEIGHT, ALT, ONCLICK;

terminal Token      BLACK, OLIVE, TEAL, RED, BLUE, MARRON, NAVY, GRAY, LIME, FUCHSIA, GREEN, PURPLE;
terminal Token      SILVER, YELLOW, AQUA;
terminal Token      COURIER, VERDANA, ARIAL, GENEVA, SANS_SERIF;
terminal Token      LEFT, CENTER, RIGHT, JUSTIFY;
terminal Token      TEXT, NUMBER, RADIO, CHECKBOX;
terminal Token      COLUMN, ROW;
terminal Token      URL, COLOR_VALUE, SIZE, WIDTH_VAL, HEIGHT_VAL, ID_PARAM, NAME_PARAM;

terminal Token      ON_LOAD, GLOBAL_MODE;

terminal Token      INTEGER, DECIMAL, BOOLEAN, CHAR, STRING, TRUE, FALSE;

terminal Token      ASC, DESC, LETPAR_NUM, LETIMPAR_NUM, REVERSE, CARACTER_ALEATORIO;
terminal Token      NUM_ALEATORIO, ALERT_INFO, EXIT, ELEMENT_BY_ID;

terminal Token      INIT, END, IF, THEN, ELSE, REPEAT, HUNTIL, WHILE, THENWHILE, INSERT;

terminal Token      OPEN_BRACKET, CLOSE_BRACKET, OPEN_ROUND_BRACKET, CLOSE_ROUND_BRACKET;
terminal Token      OPEN_BRACE, CLOSE_BRACE, SLASH, ASSIGN, QOUTE_MARK, SINGLE_QUOTES, COLON, SEMI;

terminal Token      EQUAL_TO, NOT_EQTUAL_TO, LESS_THAN, GREATER_THAN, LESS_THAN_OR_EQUAL_TO, GREATER_THAN_OR_EQUAL_TO;

terminal Token      OR, AND, NOT, PLUS, MINUS, TIMES;

terminal Token      PROCESS_NAME, ID_VAR, TEXT_TAG;


//* No terminales

non terminal            gcic, head, headTags, headTag, nameTagHead, body, bodyTags, bodyTag, nameTagBody;
non terminal            optionsTag, optionTag;
non terminal            paramsGCIC, paramGCIC, optionParamGCIC, href;
non terminal            background, color;
non terminal String     textTag;


gcic
    ::= LESS_THAN C_GCIC paramsGCIC GREATER_THAN textTag head body LESS_THAN SLASH C_GCIC GREATER_THAN textTag
;

paramsGCIC
    ::= paramsGCIC paramGCIC
    |   paramGCIC
;

paramGCIC
    ::= OPEN_BRACKET optionParamGCIC CLOSE_BRACKET
;

optionParamGCIC
    ::= ID ASSIGN QOUTE_MARK ID_PARAM QOUTE_MARK
    |   NAME ASSIGN QOUTE_MARK NAME_PARAM QOUTE_MARK
;

head
    ::= LESS_THAN C_HEAD GREATER_THAN textTag headTags LESS_THAN SLASH C_HEAD GREATER_THAN textTag
;

headTags
    ::= headTags headTag
    |   headTag
;

headTag
    ::= LESS_THAN nameTagHead GREATER_THAN textTag
;

nameTagHead
    ::= C_LINK href GREATER_THAN textTag LESS_THAN SLASH C_LINK
    |   C_TITLE GREATER_THAN textTag:t LESS_THAN SLASH C_TITLE {:
        System.out.println("Titulo de la pagina: " + t);
    :}
;

href
    ::= OPEN_BRACKET HREF ASSIGN QOUTE_MARK URL QOUTE_MARK CLOSE_BRACKET
;

body
    ::= LESS_THAN C_BODY background GREATER_THAN textTag bodyTags LESS_THAN SLASH C_BODY GREATER_THAN textTag
;

bodyTags
    ::= bodyTags bodyTag
    |   bodyTag
;

bodyTag
    ::= LESS_THAN nameTagBody GREATER_THAN textTag
    |   LESS_THAN C_BR GREATER_THAN textTag
;

nameTagBody
    ::= C_SPAM GREATER_THAN textTag LESS_THAN SLASH C_SPAM
    |   C_INPUT GREATER_THAN textTag LESS_THAN SLASH C_INPUT
    |   C_TEXTAREA GREATER_THAN textTag LESS_THAN SLASH C_TEXTAREA
    |   C_SELECT GREATER_THAN textTag optionsTag LESS_THAN SLASH C_SELECT
    |   C_IMG GREATER_THAN textTag LESS_THAN SLASH C_IMG
    |   C_BUTTON GREATER_THAN textTag LESS_THAN SLASH C_BUTTON
    |   C_H1 GREATER_THAN textTag LESS_THAN SLASH C_H1
    |   C_P GREATER_THAN textTag LESS_THAN SLASH C_P
    |   C_DIV GREATER_THAN textTag LESS_THAN SLASH C_DIV
    |   C_DIV GREATER_THAN textTag bodyTags LESS_THAN SLASH C_DIV
;

optionsTag
    ::= optionsTag optionTag
    |   optionTag
;

optionTag
    ::= LESS_THAN C_OPTION GREATER_THAN textTag:o LESS_THAN SLASH C_OPTION GREATER_THAN textTag {:
        System.out.println("Option: " + o);
    :}
;

background
    ::= OPEN_BRACKET BACKGROUND ASSIGN QOUTE_MARK color QOUTE_MARK CLOSE_BRACKET
;

textTag
    ::= TEXT_TAG:t  {:RESULT = t.getLexema();:}
    |               {:RESULT = "";:}
;

color
    ::= COLOR_VALUE
    |   BLACK
    |   OLIVE
    |   TEAL
    |   RED
    |   BLUE
    |   MARRON
    |   NAVY
    |   GRAY
    |   LIME
    |   FUCHSIA
    |   GREEN
    |   PURPLE
    |   SILVER
    |   YELLOW
    |   AQUA
;