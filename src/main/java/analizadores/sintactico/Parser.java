
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores.sintactico;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import model.tags.body.Body;
import model.tags.body.Br;
import model.tags.body.Button;
import model.tags.body.Div;
import model.errores.ErrorAnalisis;
import model.errores.TipoError;
import model.tags.GCIC;
import model.tags.body.H1;
import model.tags.head.Head;
import model.tags.body.Img;
import model.tags.body.Input;
import model.tags.head.Link;
import model.tags.body.Option;
import model.tags.body.P;
import model.tags.Parametro;
import model.tags.body.Select;
import model.tags.body.Span;
import model.tags.Tag;
import model.tags.body.TextArea;
import model.tags.head.Title;
import model.Token;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\346\000\002\002\016\000\002\002\004\000\002\014" +
    "\004\000\002\014\003\000\002\015\005\000\002\016\007" +
    "\000\002\016\003\000\002\057\014\000\002\003\004\000" +
    "\002\003\004\000\002\005\013\000\002\004\014\000\002" +
    "\054\011\000\002\060\015\000\002\006\004\000\002\006" +
    "\003\000\002\007\006\000\002\007\006\000\002\010\011" +
    "\000\002\010\011\000\002\010\011\000\002\010\010\000" +
    "\002\010\011\000\002\010\011\000\002\010\011\000\002" +
    "\010\011\000\002\010\007\000\002\010\010\000\002\010" +
    "\010\000\002\033\005\000\002\037\005\000\002\011\004" +
    "\000\002\011\003\000\002\012\013\000\002\055\011\000" +
    "\002\061\003\000\002\061\002\000\002\017\004\000\002" +
    "\017\003\000\002\020\005\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\022\004\000\002\022\003" +
    "\000\002\023\005\000\002\024\007\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\025\004\000\002" +
    "\025\003\000\002\026\005\000\002\027\007\000\002\027" +
    "\007\000\002\027\003\000\002\027\003\000\002\030\004" +
    "\000\002\030\003\000\002\031\005\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\034\004\000\002" +
    "\034\003\000\002\035\005\000\002\036\007\000\002\036" +
    "\007\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\040\004\000\002\040\003\000\002\041\005\000" +
    "\002\042\007\000\002\042\007\000\002\042\007\000\002" +
    "\042\007\000\002\042\003\000\002\070\003\000\002\070" +
    "\003\000\002\043\004\000\002\043\003\000\002\044\005" +
    "\000\002\045\007\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\046\004\000\002\046\003\000\002" +
    "\047\005\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\051\004\000\002\051\003\000\002\052\005" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\013\007\000\002\013\007\000\002\013\007\000\002" +
    "\067\007\000\002\071\003\000\002\071\003\000\002\056" +
    "\007\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\003\000\002\064\003\000\002" +
    "\064\003\000\002\064\003\000\002\064\003\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\065\003" +
    "\000\002\072\004\000\002\072\003\000\002\073\004\000" +
    "\002\073\004\000\002\074\006\000\002\074\007\000\002" +
    "\075\004\000\002\075\003\000\002\076\004\000\002\076" +
    "\003\000\002\077\003\000\002\077\003\000\002\077\003" +
    "\000\002\100\007\000\002\100\006\000\002\101\005\000" +
    "\002\101\004\000\002\102\005\000\002\107\006\000\002" +
    "\107\006\000\002\110\007\000\002\111\005\000\002\111" +
    "\005\000\002\111\004\000\002\111\002\000\002\112\005" +
    "\000\002\112\005\000\002\112\005\000\002\112\005\000" +
    "\002\112\005\000\002\112\005\000\002\112\005\000\002" +
    "\112\005\000\002\112\005\000\002\112\007\000\002\112" +
    "\007\000\002\112\007\000\002\112\007\000\002\112\007" +
    "\000\002\112\007\000\002\112\007\000\002\112\007\000" +
    "\002\112\004\000\002\112\003\000\002\112\003\000\002" +
    "\106\010\000\002\113\003\000\002\113\003\000\002\113" +
    "\003\000\002\113\003\000\002\113\003\000\002\114\005" +
    "\000\002\114\003\000\002\115\003\000\002\103\003\000" +
    "\002\103\003\000\002\103\003\000\002\103\003\000\002" +
    "\104\005\000\002\104\005\000\002\104\005\000\002\104" +
    "\005\000\002\104\005\000\002\104\007\000\002\104\007" +
    "\000\002\104\007\000\002\104\007\000\002\105\005\000" +
    "\002\105\005\000\002\105\005\000\002\105\005\000\002" +
    "\105\005\000\002\105\005\000\002\105\005\000\002\105" +
    "\005\000\002\105\007\000\002\105\007\000\002\105\007" +
    "\000\002\105\007\000\002\105\007\000\002\105\007\000" +
    "\002\105\007\000\002\105\007\000\002\105\004\000\002" +
    "\116\003\000\002\116\003\000\002\116\003\000\002\116" +
    "\003\000\002\117\003\000\002\117\003\000\002\121\003" +
    "\000\002\120\003\000\002\122\003\000\002\122\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0211\000\004\167\004\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\150\011\001\002\000\006\150\ufffe\170\ufffe\001" +
    "\002\000\006\035\066\036\u020e\001\002\000\006\150\011" +
    "\170\014\001\002\000\006\150\uffff\170\uffff\001\002\000" +
    "\006\167\uffdd\210\016\001\002\000\004\167\017\001\002" +
    "\000\006\002\uffde\167\uffde\001\002\000\004\005\u01e4\001" +
    "\002\000\004\167\022\001\002\000\004\167\u01df\001\002" +
    "\000\004\010\023\001\002\000\004\150\024\001\002\000" +
    "\004\026\u01d9\001\002\000\004\170\026\001\002\000\006" +
    "\167\uffdd\210\016\001\002\000\004\167\031\001\002\000" +
    "\004\167\u01d4\001\002\000\030\011\046\012\045\013\042" +
    "\014\035\016\034\017\037\020\043\021\044\022\050\023" +
    "\033\024\047\001\002\000\004\167\ufff2\001\002\000\004" +
    "\150\u01c7\001\002\000\004\150\u01b3\001\002\000\004\150" +
    "\u01a8\001\002\000\004\170\u01a6\001\002\000\004\150\u0185" +
    "\001\002\000\006\167\uffdd\210\016\001\002\000\006\167" +
    "\uffdd\210\016\001\002\000\004\150\u0154\001\002\000\004" +
    "\170\u0152\001\002\000\004\150\u013f\001\002\000\004\150" +
    "\u0128\001\002\000\004\150\u011a\001\002\000\004\170\153" +
    "\001\002\000\004\150\051\001\002\000\014\027\062\031" +
    "\070\032\064\033\065\035\066\001\002\000\006\150\uffa8" +
    "\170\uffa8\001\002\000\006\150\051\170\054\001\002\000" +
    "\006\167\uffdd\210\016\001\002\000\006\150\uffa9\170\uffa9" +
    "\001\002\000\004\167\057\001\002\000\004\157\060\001" +
    "\002\000\004\022\061\001\002\000\004\170\uffe9\001\002" +
    "\000\004\160\127\001\002\000\004\151\uffa5\001\002\000" +
    "\004\160\116\001\002\000\004\160\106\001\002\000\004" +
    "\160\100\001\002\000\004\151\uffa6\001\002\000\004\160" +
    "\074\001\002\000\004\151\uffa4\001\002\000\004\151\073" +
    "\001\002\000\006\150\uffa7\170\uffa7\001\002\000\004\161" +
    "\075\001\002\000\004\107\076\001\002\000\004\161\077" +
    "\001\002\000\004\151\uff9d\001\002\000\004\161\101\001" +
    "\002\000\006\111\103\112\102\001\002\000\004\161\uff98" +
    "\001\002\000\004\161\uff99\001\002\000\004\161\105\001" +
    "\002\000\004\151\uff9a\001\002\000\004\161\107\001\002" +
    "\000\012\073\110\074\113\075\111\076\112\001\002\000" +
    "\004\161\uff81\001\002\000\004\161\uff7f\001\002\000\004" +
    "\161\uff7e\001\002\000\004\161\uff80\001\002\000\004\161" +
    "\115\001\002\000\004\151\uff9b\001\002\000\004\161\117" +
    "\001\002\000\014\066\123\067\124\070\121\071\122\072" +
    "\125\001\002\000\004\161\126\001\002\000\004\161\uff84" +
    "\001\002\000\004\161\uff83\001\002\000\004\161\uff86\001" +
    "\002\000\004\161\uff85\001\002\000\004\161\uff82\001\002" +
    "\000\004\151\uff9c\001\002\000\004\161\130\001\002\000" +
    "\042\047\150\050\135\051\132\052\147\053\142\054\141" +
    "\055\151\056\145\057\133\060\137\061\131\062\144\063" +
    "\140\064\143\065\134\106\146\001\002\000\004\161\uff8b" +
    "\001\002\000\004\161\uff93\001\002\000\004\161\uff8d\001" +
    "\002\000\004\161\uff87\001\002\000\004\161\uff94\001\002" +
    "\000\004\161\152\001\002\000\004\161\uff8c\001\002\000" +
    "\004\161\uff89\001\002\000\004\161\uff90\001\002\000\004" +
    "\161\uff91\001\002\000\004\161\uff88\001\002\000\004\161" +
    "\uff8a\001\002\000\004\161\uff8e\001\002\000\004\161\uff96" +
    "\001\002\000\004\161\uff92\001\002\000\004\161\uff95\001" +
    "\002\000\004\161\uff8f\001\002\000\004\151\uff97\001\002" +
    "\000\006\113\154\206\155\001\002\000\004\152\165\001" +
    "\002\000\004\152\165\001\002\000\010\113\uff78\167\uff78" +
    "\206\uff78\001\002\000\010\113\154\167\160\206\155\001" +
    "\002\000\004\201\162\001\002\000\010\113\uff79\167\uff79" +
    "\206\uff79\001\002\000\004\024\163\001\002\000\004\170" +
    "\uffe5\001\002\000\010\113\uff76\167\uff76\206\uff76\001\002" +
    "\000\004\153\166\001\002\000\004\150\167\001\002\000" +
    "\022\115\210\116\175\117\177\120\174\121\200\140\176" +
    "\151\170\207\207\001\002\000\010\113\uff75\167\uff75\206" +
    "\uff75\001\002\000\022\115\210\116\175\117\177\120\174" +
    "\121\200\140\176\151\u0118\207\207\001\002\000\004\164" +
    "\uff6e\001\002\000\006\114\u010f\207\207\001\002\000\006" +
    "\114\uff48\207\uff48\001\002\000\006\114\uff47\207\uff47\001" +
    "\002\000\004\152\343\001\002\000\006\114\uff49\207\uff49" +
    "\001\002\000\006\114\uff4a\207\uff4a\001\002\000\024\115" +
    "\uff70\116\uff70\117\uff70\120\uff70\121\uff70\140\uff70\151\uff70" +
    "\163\uff70\207\uff70\001\002\000\004\164\342\001\002\000" +
    "\004\164\uff6d\001\002\000\004\160\235\001\002\000\020" +
    "\115\210\116\175\117\177\120\174\121\200\136\214\207" +
    "\207\001\002\000\004\164\uff6f\001\002\000\042\153\uff44" +
    "\154\uff44\160\uff44\164\uff44\165\uff44\166\uff44\167\uff44\170" +
    "\uff44\171\uff44\172\uff44\173\uff44\174\uff44\176\uff44\177\uff44" +
    "\200\uff44\201\uff44\001\002\000\006\114\uff4b\207\uff4b\001" +
    "\002\000\024\115\uff72\116\uff72\117\uff72\120\uff72\121\uff72" +
    "\140\uff72\151\uff72\163\uff72\207\uff72\001\002\000\004\137" +
    "\233\001\002\000\004\164\223\001\002\000\004\155\215" +
    "\001\002\000\004\163\216\001\002\000\020\115\210\116" +
    "\175\117\177\120\174\121\200\140\176\207\207\001\002" +
    "\000\022\115\210\116\175\117\177\120\174\121\200\140" +
    "\176\163\221\207\207\001\002\000\024\115\uff73\116\uff73" +
    "\117\uff73\120\uff73\121\uff73\140\uff73\151\uff73\163\uff73\207" +
    "\uff73\001\002\000\004\156\222\001\002\000\004\137\uff4c" +
    "\001\002\000\026\115\uff61\116\uff61\117\uff61\120\uff61\121" +
    "\uff61\140\uff61\142\224\151\uff61\163\uff61\207\uff61\001\002" +
    "\000\022\115\210\116\175\117\177\120\174\121\200\136" +
    "\214\140\176\207\207\001\002\000\024\115\uff66\116\uff66" +
    "\117\uff66\120\uff66\121\uff66\140\uff66\151\uff66\163\uff66\207" +
    "\uff66\001\002\000\024\115\uff62\116\uff62\117\uff62\120\uff62" +
    "\121\uff62\140\uff62\151\uff62\163\uff62\207\uff62\001\002\000" +
    "\004\137\232\001\002\000\004\164\231\001\002\000\024" +
    "\115\uff63\116\uff63\117\uff63\120\uff63\121\uff63\140\uff63\151" +
    "\uff63\163\uff63\207\uff63\001\002\000\024\115\uff64\116\uff64" +
    "\117\uff64\120\uff64\121\uff64\140\uff64\151\uff64\163\uff64\207" +
    "\uff64\001\002\000\026\115\uff61\116\uff61\117\uff61\120\uff61" +
    "\121\uff61\140\uff61\142\224\151\uff61\163\uff61\207\uff61\001" +
    "\002\000\024\115\uff67\116\uff67\117\uff67\120\uff67\121\uff67" +
    "\140\uff67\151\uff67\163\uff67\207\uff67\001\002\000\024\122" +
    "\243\123\250\152\240\175\242\202\254\203\253\204\255" +
    "\205\244\207\207\001\002\000\036\153\uff41\164\uff41\165" +
    "\uff41\166\uff41\167\uff41\170\uff41\171\uff41\172\uff41\173\uff41" +
    "\174\uff41\176\uff41\177\uff41\200\uff41\201\uff41\001\002\000" +
    "\034\164\uff68\165\262\166\272\167\265\170\271\171\264" +
    "\172\267\173\273\174\261\176\266\177\260\200\270\201" +
    "\263\001\002\000\024\122\243\123\250\152\240\175\242" +
    "\202\254\203\253\204\255\205\244\207\207\001\002\000" +
    "\036\153\uff25\164\uff25\165\uff25\166\uff25\167\uff25\170\uff25" +
    "\171\uff25\172\uff25\173\uff25\174\uff25\176\uff25\177\uff25\200" +
    "\uff25\201\uff25\001\002\000\024\122\243\123\250\152\240" +
    "\175\242\202\254\203\253\204\255\205\244\207\207\001" +
    "\002\000\036\153\uff1d\164\uff1d\165\uff1d\166\uff1d\167\uff1d" +
    "\170\uff1d\171\uff1d\172\uff1d\173\uff1d\174\uff1d\176\uff1d\177" +
    "\uff1d\200\uff1d\201\uff1d\001\002\000\036\153\uff1e\164\uff1e" +
    "\165\uff1e\166\uff1e\167\uff1e\170\uff1e\171\uff1e\172\uff1e\173" +
    "\uff1e\174\uff1e\176\uff1e\177\uff1e\200\uff1e\201\uff1e\001\002" +
    "\000\036\153\uff24\164\uff24\165\uff24\166\uff24\167\uff24\170" +
    "\uff24\171\uff24\172\uff24\173\uff24\174\uff24\176\uff24\177\uff24" +
    "\200\uff24\201\uff24\001\002\000\036\153\uff22\164\uff22\165" +
    "\uff22\166\uff22\167\uff22\170\uff22\171\uff22\172\uff22\173\uff22" +
    "\174\uff22\176\uff22\177\uff22\200\uff22\201\uff22\001\002\000" +
    "\036\153\uff42\164\uff42\165\uff42\166\uff42\167\uff42\170\uff42" +
    "\171\uff42\172\uff42\173\uff42\174\uff42\176\uff42\177\uff42\200" +
    "\uff42\201\uff42\001\002\000\036\153\uff1c\164\uff1c\165\uff1c" +
    "\166\uff1c\167\uff1c\170\uff1c\171\uff1c\172\uff1c\173\uff1c\174" +
    "\uff1c\176\uff1c\177\uff1c\200\uff1c\201\uff1c\001\002\000\036" +
    "\153\uff40\164\uff40\165\uff40\166\uff40\167\uff40\170\uff40\171" +
    "\uff40\172\uff40\173\uff40\174\uff40\176\uff40\177\uff40\200\uff40" +
    "\201\uff40\001\002\000\036\153\uff23\164\uff23\165\uff23\166" +
    "\uff23\167\uff23\170\uff23\171\uff23\172\uff23\173\uff23\174\uff23" +
    "\176\uff23\177\uff23\200\uff23\201\uff23\001\002\000\036\153" +
    "\uff20\164\uff20\165\uff20\166\uff20\167\uff20\170\uff20\171\uff20" +
    "\172\uff20\173\uff20\174\uff20\176\uff20\177\uff20\200\uff20\201" +
    "\uff20\001\002\000\036\153\uff21\164\uff21\165\uff21\166\uff21" +
    "\167\uff21\170\uff21\171\uff21\172\uff21\173\uff21\174\uff21\176" +
    "\uff21\177\uff21\200\uff21\201\uff21\001\002\000\036\153\uff1f" +
    "\164\uff1f\165\uff1f\166\uff1f\167\uff1f\170\uff1f\171\uff1f\172" +
    "\uff1f\173\uff1f\174\uff1f\176\uff1f\177\uff1f\200\uff1f\201\uff1f" +
    "\001\002\000\036\153\uff43\164\uff43\165\uff43\166\uff43\167" +
    "\uff43\170\uff43\171\uff43\172\uff43\173\uff43\174\uff43\176\uff43" +
    "\177\uff43\200\uff43\201\uff43\001\002\000\036\153\uff26\164" +
    "\uff26\165\uff26\166\uff26\167\uff26\170\uff26\171\uff26\172\uff26" +
    "\173\uff26\174\uff26\176\uff26\177\uff26\200\uff26\201\uff26\001" +
    "\002\000\024\122\243\123\250\152\240\175\242\202\254" +
    "\203\253\204\255\205\244\207\207\001\002\000\024\122" +
    "\243\123\250\152\240\175\242\202\254\203\253\204\255" +
    "\205\244\207\207\001\002\000\024\122\243\123\250\152" +
    "\240\175\242\202\254\203\253\204\255\205\244\207\207" +
    "\001\002\000\024\122\243\123\250\152\240\175\242\202" +
    "\254\203\253\204\255\205\244\207\207\001\002\000\024" +
    "\122\243\123\250\152\240\175\242\202\254\203\253\204" +
    "\255\205\244\207\207\001\002\000\024\122\243\123\250" +
    "\152\240\175\242\202\254\203\253\204\255\205\244\207" +
    "\207\001\002\000\024\122\243\123\250\152\240\175\242" +
    "\202\254\203\253\204\255\205\244\207\207\001\002\000" +
    "\024\122\243\123\250\152\240\175\242\202\254\203\253" +
    "\204\255\205\244\207\207\001\002\000\024\122\243\123" +
    "\250\152\240\175\242\202\254\203\253\204\255\205\244" +
    "\207\207\001\002\000\024\122\243\123\250\152\240\175" +
    "\242\202\254\203\253\204\255\205\244\207\207\001\002" +
    "\000\024\122\243\123\250\152\240\175\242\202\254\203" +
    "\253\204\255\205\244\207\207\001\002\000\024\122\243" +
    "\123\250\152\240\175\242\202\254\203\253\204\255\205" +
    "\244\207\207\001\002\000\036\153\uff2f\164\uff2f\165\uff2f" +
    "\166\uff2f\167\uff2f\170\uff2f\171\uff2f\172\uff2f\173\uff2f\174" +
    "\261\176\uff2f\177\uff2f\200\uff2f\201\uff2f\001\002\000\036" +
    "\153\uff35\164\uff35\165\uff35\166\uff35\167\uff35\170\uff35\171" +
    "\uff35\172\uff35\173\273\174\261\176\uff35\177\uff35\200\uff35" +
    "\201\uff35\001\002\000\036\153\uff34\164\uff34\165\uff34\166" +
    "\uff34\167\uff34\170\uff34\171\uff34\172\uff34\173\273\174\261" +
    "\176\uff34\177\uff34\200\uff34\201\uff34\001\002\000\036\153" +
    "\uff3d\164\uff3d\165\262\166\272\167\265\170\271\171\264" +
    "\172\267\173\273\174\261\176\uff3d\177\uff3d\200\uff3d\201" +
    "\uff3d\001\002\000\036\153\uff32\164\uff32\165\uff32\166\uff32" +
    "\167\uff32\170\uff32\171\uff32\172\uff32\173\273\174\261\176" +
    "\uff32\177\uff32\200\uff32\201\uff32\001\002\000\036\153\uff3f" +
    "\164\uff3f\165\262\166\272\167\265\170\271\171\264\172" +
    "\267\173\273\174\261\176\uff3f\177\uff3f\200\270\201\263" +
    "\001\002\000\036\153\uff33\164\uff33\165\uff33\166\uff33\167" +
    "\uff33\170\uff33\171\uff33\172\uff33\173\273\174\261\176\uff33" +
    "\177\uff33\200\uff33\201\uff33\001\002\000\036\153\uff31\164" +
    "\uff31\165\uff31\166\uff31\167\uff31\170\uff31\171\uff31\172\uff31" +
    "\173\273\174\261\176\uff31\177\uff31\200\uff31\201\uff31\001" +
    "\002\000\036\153\uff3c\164\uff3c\165\262\166\272\167\265" +
    "\170\271\171\264\172\267\173\273\174\261\176\uff3c\177" +
    "\uff3c\200\uff3c\201\uff3c\001\002\000\036\153\uff36\164\uff36" +
    "\165\uff36\166\uff36\167\uff36\170\uff36\171\uff36\172\uff36\173" +
    "\273\174\261\176\uff36\177\uff36\200\uff36\201\uff36\001\002" +
    "\000\036\153\uff30\164\uff30\165\uff30\166\uff30\167\uff30\170" +
    "\uff30\171\uff30\172\uff30\173\uff30\174\uff30\176\uff30\177\uff30" +
    "\200\uff30\201\uff30\001\002\000\036\153\uff3e\164\uff3e\165" +
    "\262\166\272\167\265\170\271\171\264\172\267\173\273" +
    "\174\261\176\uff3e\177\uff3e\200\270\201\263\001\002\000" +
    "\034\153\311\165\262\166\272\167\265\170\271\171\264" +
    "\172\267\173\273\174\261\176\266\177\260\200\270\201" +
    "\263\001\002\000\036\153\uff3b\164\uff3b\165\314\166\324" +
    "\167\317\170\323\171\316\172\322\173\325\174\313\176" +
    "\320\177\312\200\321\201\315\001\002\000\024\122\243" +
    "\123\250\152\240\175\242\202\254\203\253\204\255\205" +
    "\244\207\207\001\002\000\024\122\243\123\250\152\240" +
    "\175\242\202\254\203\253\204\255\205\244\207\207\001" +
    "\002\000\024\122\243\123\250\152\240\175\242\202\254" +
    "\203\253\204\255\205\244\207\207\001\002\000\024\122" +
    "\243\123\250\152\240\175\242\202\254\203\253\204\255" +
    "\205\244\207\207\001\002\000\024\122\243\123\250\152" +
    "\240\175\242\202\254\203\253\204\255\205\244\207\207" +
    "\001\002\000\024\122\243\123\250\152\240\175\242\202" +
    "\254\203\253\204\255\205\244\207\207\001\002\000\024" +
    "\122\243\123\250\152\240\175\242\202\254\203\253\204" +
    "\255\205\244\207\207\001\002\000\024\122\243\123\250" +
    "\152\240\175\242\202\254\203\253\204\255\205\244\207" +
    "\207\001\002\000\024\122\243\123\250\152\240\175\242" +
    "\202\254\203\253\204\255\205\244\207\207\001\002\000" +
    "\024\122\243\123\250\152\240\175\242\202\254\203\253" +
    "\204\255\205\244\207\207\001\002\000\024\122\243\123" +
    "\250\152\240\175\242\202\254\203\253\204\255\205\244" +
    "\207\207\001\002\000\024\122\243\123\250\152\240\175" +
    "\242\202\254\203\253\204\255\205\244\207\207\001\002" +
    "\000\036\153\uff27\164\uff27\165\uff27\166\uff27\167\uff27\170" +
    "\uff27\171\uff27\172\uff27\173\uff27\174\261\176\uff27\177\uff27" +
    "\200\uff27\201\uff27\001\002\000\036\153\uff2d\164\uff2d\165" +
    "\uff2d\166\uff2d\167\uff2d\170\uff2d\171\uff2d\172\uff2d\173\273" +
    "\174\261\176\uff2d\177\uff2d\200\uff2d\201\uff2d\001\002\000" +
    "\036\153\uff2c\164\uff2c\165\uff2c\166\uff2c\167\uff2c\170\uff2c" +
    "\171\uff2c\172\uff2c\173\273\174\261\176\uff2c\177\uff2c\200" +
    "\uff2c\201\uff2c\001\002\000\036\153\uff2a\164\uff2a\165\uff2a" +
    "\166\uff2a\167\uff2a\170\uff2a\171\uff2a\172\uff2a\173\273\174" +
    "\261\176\uff2a\177\uff2a\200\uff2a\201\uff2a\001\002\000\036" +
    "\153\uff38\164\uff38\165\262\166\272\167\265\170\271\171" +
    "\264\172\267\173\273\174\261\176\uff38\177\uff38\200\uff38" +
    "\201\uff38\001\002\000\036\153\uff3a\164\uff3a\165\262\166" +
    "\272\167\265\170\271\171\264\172\267\173\273\174\261" +
    "\176\uff3a\177\uff3a\200\270\201\263\001\002\000\036\153" +
    "\uff2b\164\uff2b\165\uff2b\166\uff2b\167\uff2b\170\uff2b\171\uff2b" +
    "\172\uff2b\173\273\174\261\176\uff2b\177\uff2b\200\uff2b\201" +
    "\uff2b\001\002\000\036\153\uff29\164\uff29\165\uff29\166\uff29" +
    "\167\uff29\170\uff29\171\uff29\172\uff29\173\273\174\261\176" +
    "\uff29\177\uff29\200\uff29\201\uff29\001\002\000\036\153\uff37" +
    "\164\uff37\165\262\166\272\167\265\170\271\171\264\172" +
    "\267\173\273\174\261\176\uff37\177\uff37\200\uff37\201\uff37" +
    "\001\002\000\036\153\uff2e\164\uff2e\165\uff2e\166\uff2e\167" +
    "\uff2e\170\uff2e\171\uff2e\172\uff2e\173\273\174\261\176\uff2e" +
    "\177\uff2e\200\uff2e\201\uff2e\001\002\000\036\153\uff28\164" +
    "\uff28\165\uff28\166\uff28\167\uff28\170\uff28\171\uff28\172\uff28" +
    "\173\uff28\174\uff28\176\uff28\177\uff28\200\uff28\201\uff28\001" +
    "\002\000\036\153\uff39\164\uff39\165\262\166\272\167\265" +
    "\170\271\171\264\172\267\173\273\174\261\176\uff39\177" +
    "\uff39\200\270\201\263\001\002\000\024\115\uff71\116\uff71" +
    "\117\uff71\120\uff71\121\uff71\140\uff71\151\uff71\163\uff71\207" +
    "\uff71\001\002\000\024\122\243\123\250\152\346\175\347" +
    "\202\254\203\253\204\255\205\244\207\207\001\002\000" +
    "\024\153\u010c\165\352\166\360\167\354\170\356\171\357" +
    "\172\353\173\361\174\355\001\002\000\024\153\uff4d\165" +
    "\uff4d\166\uff4d\167\uff4d\170\uff4d\171\uff4d\172\uff4d\173\uff4d" +
    "\174\uff4d\001\002\000\024\122\243\123\250\152\346\175" +
    "\347\202\254\203\253\204\255\205\244\207\207\001\002" +
    "\000\024\122\243\123\250\152\346\175\347\202\254\203" +
    "\253\204\255\205\244\207\207\001\002\000\024\153\uff4e" +
    "\165\uff4e\166\uff4e\167\uff4e\170\uff4e\171\uff4e\172\uff4e\173" +
    "\uff4e\174\uff4e\001\002\000\024\153\uff4f\165\uff4f\166\uff4f" +
    "\167\uff4f\170\uff4f\171\uff4f\172\uff4f\173\uff4f\174\uff4f\001" +
    "\002\000\024\122\243\123\250\152\346\175\347\202\254" +
    "\203\253\204\255\205\244\207\207\001\002\000\024\122" +
    "\243\123\250\152\346\175\347\202\254\203\253\204\255" +
    "\205\244\207\207\001\002\000\024\122\243\123\250\152" +
    "\346\175\347\202\254\203\253\204\255\205\244\207\207" +
    "\001\002\000\024\122\243\123\250\152\346\175\347\202" +
    "\254\203\253\204\255\205\244\207\207\001\002\000\024" +
    "\122\243\123\250\152\346\175\347\202\254\203\253\204" +
    "\255\205\244\207\207\001\002\000\024\122\243\123\250" +
    "\152\346\175\347\202\254\203\253\204\255\205\244\207" +
    "\207\001\002\000\024\122\243\123\250\152\346\175\347" +
    "\202\254\203\253\204\255\205\244\207\207\001\002\000" +
    "\024\122\243\123\250\152\346\175\347\202\254\203\253" +
    "\204\255\205\244\207\207\001\002\000\024\153\uff59\165" +
    "\uff59\166\uff59\167\uff59\170\uff59\171\uff59\172\uff59\173\uff59" +
    "\174\355\001\002\000\024\153\uff5f\165\uff5f\166\uff5f\167" +
    "\uff5f\170\uff5f\171\uff5f\172\uff5f\173\361\174\355\001\002" +
    "\000\024\153\uff5b\165\uff5b\166\uff5b\167\uff5b\170\uff5b\171" +
    "\uff5b\172\uff5b\173\361\174\355\001\002\000\024\153\uff5e" +
    "\165\uff5e\166\uff5e\167\uff5e\170\uff5e\171\uff5e\172\uff5e\173" +
    "\361\174\355\001\002\000\024\153\uff5a\165\uff5a\166\uff5a" +
    "\167\uff5a\170\uff5a\171\uff5a\172\uff5a\173\uff5a\174\uff5a\001" +
    "\002\000\024\153\uff5d\165\uff5d\166\uff5d\167\uff5d\170\uff5d" +
    "\171\uff5d\172\uff5d\173\361\174\355\001\002\000\024\153" +
    "\uff5c\165\uff5c\166\uff5c\167\uff5c\170\uff5c\171\uff5c\172\uff5c" +
    "\173\361\174\355\001\002\000\024\153\uff60\165\uff60\166" +
    "\uff60\167\uff60\170\uff60\171\uff60\172\uff60\173\361\174\355" +
    "\001\002\000\024\153\373\165\352\166\360\167\354\170" +
    "\356\171\357\172\353\173\361\174\355\001\002\000\024" +
    "\153\uff58\165\374\166\u0102\167\376\170\u0100\171\u0101\172" +
    "\375\173\u0103\174\377\001\002\000\024\122\243\123\250" +
    "\152\346\175\347\202\254\203\253\204\255\205\244\207" +
    "\207\001\002\000\024\122\243\123\250\152\346\175\347" +
    "\202\254\203\253\204\255\205\244\207\207\001\002\000" +
    "\024\122\243\123\250\152\346\175\347\202\254\203\253" +
    "\204\255\205\244\207\207\001\002\000\024\122\243\123" +
    "\250\152\346\175\347\202\254\203\253\204\255\205\244" +
    "\207\207\001\002\000\024\122\243\123\250\152\346\175" +
    "\347\202\254\203\253\204\255\205\244\207\207\001\002" +
    "\000\024\122\243\123\250\152\346\175\347\202\254\203" +
    "\253\204\255\205\244\207\207\001\002\000\024\122\243" +
    "\123\250\152\346\175\347\202\254\203\253\204\255\205" +
    "\244\207\207\001\002\000\024\122\243\123\250\152\346" +
    "\175\347\202\254\203\253\204\255\205\244\207\207\001" +
    "\002\000\024\153\uff50\165\uff50\166\uff50\167\uff50\170\uff50" +
    "\171\uff50\172\uff50\173\uff50\174\355\001\002\000\024\153" +
    "\uff56\165\uff56\166\uff56\167\uff56\170\uff56\171\uff56\172\uff56" +
    "\173\361\174\355\001\002\000\024\153\uff52\165\uff52\166" +
    "\uff52\167\uff52\170\uff52\171\uff52\172\uff52\173\361\174\355" +
    "\001\002\000\024\153\uff55\165\uff55\166\uff55\167\uff55\170" +
    "\uff55\171\uff55\172\uff55\173\361\174\355\001\002\000\024" +
    "\153\uff51\165\uff51\166\uff51\167\uff51\170\uff51\171\uff51\172" +
    "\uff51\173\uff51\174\uff51\001\002\000\024\153\uff54\165\uff54" +
    "\166\uff54\167\uff54\170\uff54\171\uff54\172\uff54\173\361\174" +
    "\355\001\002\000\024\153\uff53\165\uff53\166\uff53\167\uff53" +
    "\170\uff53\171\uff53\172\uff53\173\361\174\355\001\002\000" +
    "\024\153\uff57\165\uff57\166\uff57\167\uff57\170\uff57\171\uff57" +
    "\172\uff57\173\361\174\355\001\002\000\004\141\u010d\001" +
    "\002\000\020\115\uff65\116\uff65\117\uff65\120\uff65\121\uff65" +
    "\136\uff65\207\uff65\001\002\000\010\154\uff45\160\uff45\164" +
    "\uff45\001\002\000\004\207\207\001\002\000\010\154\u0111" +
    "\160\u0112\164\uff69\001\002\000\004\207\207\001\002\000" +
    "\024\122\243\123\250\152\240\175\242\202\254\203\253" +
    "\204\255\205\244\207\207\001\002\000\034\164\uff6b\165" +
    "\262\166\272\167\265\170\271\171\264\172\267\173\273" +
    "\174\261\176\266\177\260\200\270\201\263\001\002\000" +
    "\010\154\uff46\160\uff46\164\uff46\001\002\000\010\154\u0111" +
    "\160\u0116\164\uff6a\001\002\000\024\122\243\123\250\152" +
    "\240\175\242\202\254\203\253\204\255\205\244\207\207" +
    "\001\002\000\034\164\uff6c\165\262\166\272\167\265\170" +
    "\271\171\264\172\267\173\273\174\261\176\266\177\260" +
    "\200\270\201\263\001\002\000\010\113\uff74\167\uff74\206" +
    "\uff74\001\002\000\010\113\uff77\167\uff77\206\uff77\001\002" +
    "\000\014\027\062\031\070\032\064\033\065\035\066\001" +
    "\002\000\006\150\u011a\170\u011d\001\002\000\006\150\uffdb" +
    "\170\uffdb\001\002\000\006\167\uffdd\210\016\001\002\000" +
    "\006\150\uffdc\170\uffdc\001\002\000\004\167\u0120\001\002" +
    "\000\004\157\u0121\001\002\000\004\011\u0122\001\002\000" +
    "\004\170\uffef\001\002\000\004\151\uffd8\001\002\000\004" +
    "\151\uffd9\001\002\000\004\151\uffd7\001\002\000\004\151" +
    "\u0127\001\002\000\006\150\uffda\170\uffda\001\002\000\016" +
    "\027\062\031\070\032\064\033\065\034\u0133\035\066\001" +
    "\002\000\006\150\u0128\170\u012b\001\002\000\006\150\uffd5" +
    "\170\uffd5\001\002\000\006\167\uffdd\210\016\001\002\000" +
    "\006\150\uffd6\170\uffd6\001\002\000\004\167\u012e\001\002" +
    "\000\004\157\u012f\001\002\000\004\012\u0130\001\002\000" +
    "\004\170\uffee\001\002\000\004\151\u013e\001\002\000\004" +
    "\151\uffd1\001\002\000\004\160\u0136\001\002\000\004\151" +
    "\uffd0\001\002\000\004\151\uffd2\001\002\000\004\161\u0137" +
    "\001\002\000\012\077\u0138\100\u013c\101\u0139\102\u013b\001" +
    "\002\000\004\161\uff7d\001\002\000\004\161\uff7b\001\002" +
    "\000\004\161\u013d\001\002\000\004\161\uff7a\001\002\000" +
    "\004\161\uff7c\001\002\000\004\151\uffd3\001\002\000\006" +
    "\150\uffd4\170\uffd4\001\002\000\016\026\u014a\027\062\031" +
    "\070\032\064\033\065\035\066\001\002\000\006\150\uffaf" +
    "\170\uffaf\001\002\000\006\150\u013f\170\u0143\001\002\000" +
    "\006\150\uffb0\170\uffb0\001\002\000\006\167\uffdd\210\016" +
    "\001\002\000\004\167\u0145\001\002\000\004\157\u0146\001" +
    "\002\000\004\021\u0147\001\002\000\004\170\uffea\001\002" +
    "\000\004\151\u0151\001\002\000\004\151\uffab\001\002\000" +
    "\004\160\u014d\001\002\000\004\151\uffac\001\002\000\004" +
    "\151\uffaa\001\002\000\004\161\u014e\001\002\000\042\047" +
    "\150\050\135\051\132\052\147\053\142\054\141\055\151" +
    "\056\145\057\133\060\137\061\131\062\144\063\140\064" +
    "\143\065\134\106\146\001\002\000\004\161\u0150\001\002" +
    "\000\004\151\uffad\001\002\000\006\150\uffae\170\uffae\001" +
    "\002\000\006\167\uffdd\210\016\001\002\000\004\167\ufff0" +
    "\001\002\000\016\031\070\032\064\033\065\035\066\037" +
    "\u015f\040\u0161\001\002\000\006\150\u0154\170\u0157\001\002" +
    "\000\006\150\uffce\170\uffce\001\002\000\006\167\uffdd\210" +
    "\016\001\002\000\006\150\uffcf\170\uffcf\001\002\000\004" +
    "\167\u015a\001\002\000\004\157\u015b\001\002\000\004\013" +
    "\u015c\001\002\000\004\170\uffed\001\002\000\004\151\uffca" +
    "\001\002\000\004\151\u016a\001\002\000\004\160\u0166\001" +
    "\002\000\004\151\uffc9\001\002\000\004\160\u0162\001\002" +
    "\000\004\161\u0163\001\002\000\004\202\u0164\001\002\000" +
    "\004\161\u0165\001\002\000\004\151\uffcc\001\002\000\004" +
    "\161\u0167\001\002\000\004\202\u0168\001\002\000\004\161" +
    "\u0169\001\002\000\004\151\uffcb\001\002\000\006\150\uffcd" +
    "\170\uffcd\001\002\000\004\167\u016d\001\002\000\004\167" +
    "\u0170\001\002\000\032\011\046\012\045\013\042\014\035" +
    "\016\034\017\037\020\043\021\044\022\050\023\033\024" +
    "\047\157\u016e\001\002\000\004\016\u016f\001\002\000\004" +
    "\170\uffe7\001\002\000\032\011\046\012\045\013\042\014" +
    "\035\016\034\017\037\020\043\021\044\022\050\023\033" +
    "\024\047\157\u0172\001\002\000\004\167\ufff3\001\002\000" +
    "\004\016\u0173\001\002\000\004\170\uffe6\001\002\000\004" +
    "\167\u0175\001\002\000\004\015\u017b\001\002\000\004\167" +
    "\u0178\001\002\000\004\167\uffe1\001\002\000\006\015\u017b" +
    "\157\u017a\001\002\000\004\167\uffe2\001\002\000\004\014" +
    "\u0183\001\002\000\004\170\u017c\001\002\000\006\167\uffdd" +
    "\210\016\001\002\000\004\167\u017e\001\002\000\004\157" +
    "\u017f\001\002\000\004\015\u0180\001\002\000\004\170\u0181" +
    "\001\002\000\006\167\uffdd\210\016\001\002\000\004\167" +
    "\uffe0\001\002\000\004\170\uffec\001\002\000\006\150\uffb9" +
    "\170\uffb9\001\002\000\014\035\066\042\u0191\043\u018f\044" +
    "\u0192\045\u0190\001\002\000\006\150\u0185\170\u0188\001\002" +
    "\000\006\150\uffba\170\uffba\001\002\000\006\167\uffdd\210" +
    "\016\001\002\000\004\167\u018a\001\002\000\004\157\u018b" +
    "\001\002\000\004\017\u018c\001\002\000\004\170\uffeb\001" +
    "\002\000\004\151\uffb3\001\002\000\004\151\u01a5\001\002" +
    "\000\004\160\u01a1\001\002\000\004\160\u019d\001\002\000" +
    "\004\160\u0199\001\002\000\004\160\u0193\001\002\000\004" +
    "\161\u0194\001\002\000\006\107\u0197\110\u0195\001\002\000" +
    "\004\161\uffb1\001\002\000\004\161\u0198\001\002\000\004" +
    "\161\uffb2\001\002\000\004\151\uffb6\001\002\000\004\161" +
    "\u019a\001\002\000\004\105\u019b\001\002\000\004\161\u019c" +
    "\001\002\000\004\151\uffb4\001\002\000\004\161\u019e\001" +
    "\002\000\004\112\u019f\001\002\000\004\161\u01a0\001\002" +
    "\000\004\151\uffb7\001\002\000\004\161\u01a2\001\002\000" +
    "\006\107\u0197\110\u0195\001\002\000\004\161\u01a4\001\002" +
    "\000\004\151\uffb5\001\002\000\006\150\uffb8\170\uffb8\001" +
    "\002\000\006\167\uffdd\210\016\001\002\000\004\167\ufff1" +
    "\001\002\000\014\027\062\031\070\032\064\033\065\035" +
    "\066\001\002\000\006\150\uffc7\170\uffc7\001\002\000\006" +
    "\150\u01a8\170\u01ab\001\002\000\006\167\uffe4\210\uffe4\001" +
    "\002\000\006\150\uffc8\170\uffc8\001\002\000\004\151\u01b1" +
    "\001\002\000\004\151\uffc4\001\002\000\004\151\uffc5\001" +
    "\002\000\004\151\uffc3\001\002\000\006\150\uffc6\170\uffc6" +
    "\001\002\000\006\150\u01b3\170\u01c4\001\002\000\020\026" +
    "\u01b7\027\062\031\070\032\064\033\065\035\066\041\u01ba" +
    "\001\002\000\006\150\uffc1\170\uffc1\001\002\000\004\151" +
    "\u01c3\001\002\000\004\151\uffbc\001\002\000\004\160\u01bf" +
    "\001\002\000\004\151\uffbd\001\002\000\004\151\uffbb\001" +
    "\002\000\004\160\u01bb\001\002\000\004\161\u01bc\001\002" +
    "\000\002\001\002\000\004\161\u01be\001\002\000\004\151" +
    "\uffbe\001\002\000\004\161\u01c0\001\002\000\042\047\150" +
    "\050\135\051\132\052\147\053\142\054\141\055\151\056" +
    "\145\057\133\060\137\061\131\062\144\063\140\064\143" +
    "\065\134\106\146\001\002\000\004\161\u01c2\001\002\000" +
    "\004\151\uffbf\001\002\000\006\150\uffc0\170\uffc0\001\002" +
    "\000\006\167\uffe3\210\uffe3\001\002\000\006\150\uffc2\170" +
    "\uffc2\001\002\000\006\150\uffa2\170\uffa2\001\002\000\014" +
    "\027\062\031\070\032\064\033\065\035\066\001\002\000" +
    "\006\150\u01c7\170\u01ca\001\002\000\006\150\uffa3\170\uffa3" +
    "\001\002\000\006\167\uffdd\210\016\001\002\000\004\167" +
    "\u01cc\001\002\000\004\157\u01cd\001\002\000\004\023\u01ce" +
    "\001\002\000\004\170\uffe8\001\002\000\004\151\uff9f\001" +
    "\002\000\004\151\u01d3\001\002\000\004\151\uffa0\001\002" +
    "\000\004\151\uff9e\001\002\000\006\150\uffa1\170\uffa1\001" +
    "\002\000\032\011\046\012\045\013\042\014\035\016\034" +
    "\017\037\020\043\021\044\022\050\023\033\024\047\157" +
    "\u01d5\001\002\000\004\010\u01d6\001\002\000\004\170\u01d7" +
    "\001\002\000\006\167\uffdd\210\016\001\002\000\004\167" +
    "\ufff4\001\002\000\004\160\u01da\001\002\000\004\161\u01db" +
    "\001\002\000\042\047\150\050\135\051\132\052\147\053" +
    "\142\054\141\055\151\056\145\057\133\060\137\061\131" +
    "\062\144\063\140\064\143\065\134\106\146\001\002\000" +
    "\004\161\u01dd\001\002\000\004\151\u01de\001\002\000\004" +
    "\170\uffdf\001\002\000\004\157\u01e0\001\002\000\004\004" +
    "\u01e1\001\002\000\004\170\u01e2\001\002\000\006\002\uffdd" +
    "\210\016\001\002\000\004\002\001\001\002\000\004\170" +
    "\u01e5\001\002\000\006\167\uffdd\210\016\001\002\000\004" +
    "\167\u01e7\001\002\000\006\006\u01ff\007\u01ed\001\002\000" +
    "\004\167\u0207\001\002\000\004\167\u01fd\001\002\000\004" +
    "\167\u01eb\001\002\000\004\007\u01ed\001\002\000\004\167" +
    "\ufff8\001\002\000\004\150\u01ef\001\002\000\004\170\u01f6" +
    "\001\002\000\004\025\u01f0\001\002\000\004\160\u01f1\001" +
    "\002\000\004\161\u01f2\001\002\000\004\105\u01f3\001\002" +
    "\000\004\161\u01f4\001\002\000\004\151\u01f5\001\002\000" +
    "\004\170\ufff5\001\002\000\006\167\uffdd\210\016\001\002" +
    "\000\004\167\u01f8\001\002\000\004\157\u01f9\001\002\000" +
    "\004\007\u01fa\001\002\000\004\170\u01fb\001\002\000\006" +
    "\167\uffdd\210\016\001\002\000\004\167\ufff6\001\002\000" +
    "\004\006\u01ff\001\002\000\004\167\ufff9\001\002\000\004" +
    "\170\u0200\001\002\000\006\167\uffdd\210\016\001\002\000" +
    "\004\167\u0202\001\002\000\004\157\u0203\001\002\000\004" +
    "\006\u0204\001\002\000\004\170\u0205\001\002\000\006\167" +
    "\uffdd\210\016\001\002\000\004\167\ufff7\001\002\000\004" +
    "\157\u0208\001\002\000\004\005\u0209\001\002\000\004\170" +
    "\u020a\001\002\000\006\167\uffdd\210\016\001\002\000\004" +
    "\167\ufffa\001\002\000\004\151\u0213\001\002\000\004\151" +
    "\ufffb\001\002\000\004\160\u020f\001\002\000\004\161\u0210" +
    "\001\002\000\004\112\u0211\001\002\000\004\161\u0212\001" +
    "\002\000\004\151\ufffc\001\002\000\006\150\ufffd\170\ufffd" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0211\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\011\015\007" +
    "\001\001\000\002\001\001\000\006\016\u020b\067\u020c\001" +
    "\001\000\004\015\012\001\001\000\002\001\001\000\004" +
    "\061\014\001\001\000\004\057\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\026\001\001" +
    "\000\006\006\027\007\031\001\001\000\004\007\u0170\001" +
    "\001\000\010\010\035\033\037\037\040\001\001\000\002" +
    "\001\001\000\006\051\u01c7\052\u01c5\001\001\000\006\034" +
    "\u01b1\035\u01b3\001\001\000\006\030\u01a9\031\u01a8\001\001" +
    "\000\002\001\001\000\006\040\u0185\041\u0183\001\001\000" +
    "\004\061\u0173\001\001\000\004\061\u016a\001\001\000\006" +
    "\025\u0154\026\u0155\001\001\000\002\001\001\000\006\043" +
    "\u0140\044\u013f\001\001\000\006\022\u0128\023\u0129\001\001" +
    "\000\006\017\u011a\020\u011b\001\001\000\002\001\001\000" +
    "\006\046\052\047\051\001\001\000\012\013\070\050\071" +
    "\056\066\067\062\001\001\000\002\001\001\000\004\047" +
    "\054\001\001\000\004\061\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\071\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\064\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\072\156\073\155\001\001" +
    "\000\004\074\u0118\001\001\000\004\074\163\001\001\000" +
    "\002\001\001\000\004\073\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\075\170\076\210\077\201\100\205\101\171\102\202\107" +
    "\200\110\204\113\172\115\203\001\001\000\002\001\001" +
    "\000\024\076\217\077\201\100\205\101\171\102\202\107" +
    "\200\110\204\113\172\115\203\001\001\000\002\001\001" +
    "\000\006\114\u010f\115\u010d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\077\212\100\205\101\171" +
    "\102\202\106\211\113\172\115\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\075\216\076\210\077\201\100\205" +
    "\101\171\102\202\107\200\110\204\113\172\115\203\001" +
    "\001\000\024\076\217\077\201\100\205\101\171\102\202" +
    "\107\200\110\204\113\172\115\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\111\224" +
    "\001\001\000\024\077\227\100\205\101\171\102\202\106" +
    "\226\107\225\110\204\113\172\115\203\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\111\233" +
    "\001\001\000\002\001\001\000\024\103\236\104\255\105" +
    "\246\115\250\116\235\117\240\120\251\121\244\122\245" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\103" +
    "\307\104\255\105\246\115\250\116\235\117\240\120\251" +
    "\121\244\122\245\001\001\000\002\001\001\000\024\103" +
    "\256\104\255\105\246\115\250\116\235\117\240\120\251" +
    "\121\244\122\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\103\306\104\255\105" +
    "\246\115\250\116\235\117\240\120\251\121\244\122\245" +
    "\001\001\000\024\103\305\104\255\105\246\115\250\116" +
    "\235\117\240\120\251\121\244\122\245\001\001\000\024" +
    "\103\304\104\255\105\246\115\250\116\235\117\240\120" +
    "\251\121\244\122\245\001\001\000\024\103\303\104\255" +
    "\105\246\115\250\116\235\117\240\120\251\121\244\122" +
    "\245\001\001\000\024\103\302\104\255\105\246\115\250" +
    "\116\235\117\240\120\251\121\244\122\245\001\001\000" +
    "\024\103\301\104\255\105\246\115\250\116\235\117\240" +
    "\120\251\121\244\122\245\001\001\000\024\103\300\104" +
    "\255\105\246\115\250\116\235\117\240\120\251\121\244" +
    "\122\245\001\001\000\024\103\277\104\255\105\246\115" +
    "\250\116\235\117\240\120\251\121\244\122\245\001\001" +
    "\000\024\103\276\104\255\105\246\115\250\116\235\117" +
    "\240\120\251\121\244\122\245\001\001\000\024\103\275" +
    "\104\255\105\246\115\250\116\235\117\240\120\251\121" +
    "\244\122\245\001\001\000\024\103\274\104\255\105\246" +
    "\115\250\116\235\117\240\120\251\121\244\122\245\001" +
    "\001\000\024\103\273\104\255\105\246\115\250\116\235" +
    "\117\240\120\251\121\244\122\245\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\103\340\104\255\105\246\115\250\116\235" +
    "\117\240\120\251\121\244\122\245\001\001\000\024\103" +
    "\337\104\255\105\246\115\250\116\235\117\240\120\251" +
    "\121\244\122\245\001\001\000\024\103\336\104\255\105" +
    "\246\115\250\116\235\117\240\120\251\121\244\122\245" +
    "\001\001\000\024\103\335\104\255\105\246\115\250\116" +
    "\235\117\240\120\251\121\244\122\245\001\001\000\024" +
    "\103\334\104\255\105\246\115\250\116\235\117\240\120" +
    "\251\121\244\122\245\001\001\000\024\103\333\104\255" +
    "\105\246\115\250\116\235\117\240\120\251\121\244\122" +
    "\245\001\001\000\024\103\332\104\255\105\246\115\250" +
    "\116\235\117\240\120\251\121\244\122\245\001\001\000" +
    "\024\103\331\104\255\105\246\115\250\116\235\117\240" +
    "\120\251\121\244\122\245\001\001\000\024\103\330\104" +
    "\255\105\246\115\250\116\235\117\240\120\251\121\244" +
    "\122\245\001\001\000\024\103\327\104\255\105\246\115" +
    "\250\116\235\117\240\120\251\121\244\122\245\001\001" +
    "\000\024\103\326\104\255\105\246\115\250\116\235\117" +
    "\240\120\251\121\244\122\245\001\001\000\024\103\325" +
    "\104\255\105\246\115\250\116\235\117\240\120\251\121" +
    "\244\122\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\112\343\115\344\116\347" +
    "\117\240\120\251\121\244\122\245\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\112\371\115\344\116\347" +
    "\117\240\120\251\121\244\122\245\001\001\000\020\112" +
    "\350\115\344\116\347\117\240\120\251\121\244\122\245" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\112" +
    "\370\115\344\116\347\117\240\120\251\121\244\122\245" +
    "\001\001\000\020\112\367\115\344\116\347\117\240\120" +
    "\251\121\244\122\245\001\001\000\020\112\366\115\344" +
    "\116\347\117\240\120\251\121\244\122\245\001\001\000" +
    "\020\112\365\115\344\116\347\117\240\120\251\121\244" +
    "\122\245\001\001\000\020\112\364\115\344\116\347\117" +
    "\240\120\251\121\244\122\245\001\001\000\020\112\363" +
    "\115\344\116\347\117\240\120\251\121\244\122\245\001" +
    "\001\000\020\112\362\115\344\116\347\117\240\120\251" +
    "\121\244\122\245\001\001\000\020\112\361\115\344\116" +
    "\347\117\240\120\251\121\244\122\245\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\112\u010a\115\344\116\347\117\240\120\251\121\244" +
    "\122\245\001\001\000\020\112\u0109\115\344\116\347\117" +
    "\240\120\251\121\244\122\245\001\001\000\020\112\u0108" +
    "\115\344\116\347\117\240\120\251\121\244\122\245\001" +
    "\001\000\020\112\u0107\115\344\116\347\117\240\120\251" +
    "\121\244\122\245\001\001\000\020\112\u0106\115\344\116" +
    "\347\117\240\120\251\121\244\122\245\001\001\000\020" +
    "\112\u0105\115\344\116\347\117\240\120\251\121\244\122" +
    "\245\001\001\000\020\112\u0104\115\344\116\347\117\240" +
    "\120\251\121\244\122\245\001\001\000\020\112\u0103\115" +
    "\344\116\347\117\240\120\251\121\244\122\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\114\u0114\115\u010d\001\001" +
    "\000\002\001\001\000\004\115\u0113\001\001\000\024\103" +
    "\u0112\104\255\105\246\115\250\116\235\117\240\120\251" +
    "\121\244\122\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\103\u0116\104\255\105\246" +
    "\115\250\116\235\117\240\120\251\121\244\122\245\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\u0124\021\u0125\056\u0123\067\u0122\001\001\000" +
    "\004\020\u011d\001\001\000\002\001\001\000\004\061\u011e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\u0133\024\u0130\056\u0134\067\u0131" +
    "\001\001\000\004\023\u012b\001\001\000\002\001\001\000" +
    "\004\061\u012c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\065" +
    "\u0139\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\u014b\045\u0147\056\u014a" +
    "\067\u0148\001\001\000\002\001\001\000\004\044\u0141\001" +
    "\001\000\002\001\001\000\004\061\u0143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\u014e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\u0152\001\001\000\002\001" +
    "\001\000\010\013\u015f\027\u015d\067\u015c\001\001\000\004" +
    "\026\u0157\001\001\000\002\001\001\000\004\061\u0158\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\u016b\007\031\001\001\000\004\007\u0170\001\001" +
    "\000\010\010\035\033\037\037\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\035\033\037\037\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\u0175\012\u0176\001\001\000\002\001\001" +
    "\000\004\012\u0178\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\061\u017c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\u0181" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\042\u018d\067\u018c\001\001\000\004\041\u0186" +
    "\001\001\000\002\001\001\000\004\061\u0188\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\070\u0195\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\070" +
    "\u01a2\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\061\u01a6\001\001\000\002\001\001\000" +
    "\012\013\u01af\032\u01ac\056\u01ae\067\u01ad\001\001\000\002" +
    "\001\001\000\004\031\u01ab\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\u01c4\001\001\000\012\013\u01b8\036\u01b4\056\u01b7\067\u01b5" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\066\u01bc\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\062\u01c0\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\u01d1\053\u01cf\056\u01d0\067" +
    "\u01ce\001\001\000\004\052\u01c8\001\001\000\002\001\001" +
    "\000\004\061\u01ca\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\035\033\037\037\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\u01d7\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\062\u01db\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\u01e2\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\u01e5\001\001\000\010" +
    "\003\u01e7\004\u01e8\005\u01e9\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\u01fd\001\001\000\004\004\u01eb" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\u01ed\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\u01f6" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\u01fb\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\u0200\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\061" +
    "\u0205\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\u020a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private final List<ErrorAnalisis> errores = new ArrayList();
    private List<Parametro> parametros = new ArrayList();
    private List<Tag> etiquetas = new ArrayList();
    private List<Tag> etiquetasHead = new ArrayList();
    private Stack<List<Tag>> pilaEtiquetas = new Stack();
    private Stack<List<Parametro>> pilaParams = new Stack();
    private Tag gcicTag;

    public List<ErrorAnalisis> getErrores() {
        return this.errores;
    }

    public Tag getGCIC() {
        return this.gcicTag;
    }

    public void syntax_error(Symbol s) {
        Token t = (Token) s.value;
        StringBuilder descripcion = new StringBuilder("Se esperaba: ");
        expected_token_ids().forEach(x -> descripcion.append(symbl_name_from_id(x)).append(", "));
        errores.add(new ErrorAnalisis(t.getLexema(), t.getLinea(), t.getColumna(), TipoError.SINTACTICO, descripcion.toString()));
        System.out.println(t.getLexema() + ", linea: " + t.getLinea() + ", col: " + t.getColumna() + ", descripcion: " + descripcion.toString());
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        Token t = (Token) cur_token.value;
        System.out.println("Error irrecuperable " + t.getLexema());
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // gcic ::= LESS_THAN C_GCIC paramsGCIC GREATER_THAN textTag head body LESS_THAN SLASH C_GCIC GREATER_THAN textTag 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Tag h = (Tag)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Tag b = (Tag)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
        gcicTag = new GCIC(h, b, parametros);
        parametros = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("gcic",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= gcic EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // paramsGCIC ::= paramsGCIC paramGCIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsGCIC",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // paramsGCIC ::= paramGCIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsGCIC",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // paramGCIC ::= OPEN_BRACKET optionParamGCIC CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramGCIC",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // optionParamGCIC ::= NAME ASSIGN QOUTE_MARK NAME_PARAM QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamGCIC",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // optionParamGCIC ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamGCIC",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // head ::= LESS_THAN C_HEAD GREATER_THAN textTag headTags LESS_THAN SLASH C_HEAD GREATER_THAN textTag 
            {
              Tag RESULT =null;
		
        RESULT = new Head(etiquetasHead);
        etiquetasHead = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("head",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // headTags ::= link title 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("headTags",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // headTags ::= title link 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("headTags",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // title ::= LESS_THAN C_TITLE GREATER_THAN textTag LESS_THAN SLASH C_TITLE GREATER_THAN textTag 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
        etiquetasHead.add(new Title(t.trim()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("title",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // link ::= LESS_THAN C_LINK href GREATER_THAN textTag LESS_THAN SLASH C_LINK GREATER_THAN textTag 
            {
              Object RESULT =null;
		
        etiquetasHead.add(new Link(parametros));
        parametros = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("link",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // href ::= OPEN_BRACKET HREF ASSIGN QOUTE_MARK URL QOUTE_MARK CLOSE_BRACKET 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("href",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // body ::= LESS_THAN C_BODY background GREATER_THAN textTag bodyTags LESS_THAN SLASH C_BODY GREATER_THAN textTag 
            {
              Tag RESULT =null;
		
        RESULT = new Body(etiquetas, parametros);
        parametros = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bodyTags ::= bodyTags bodyTag 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bodyTags",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bodyTags ::= bodyTag 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bodyTags",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bodyTag ::= LESS_THAN nameTagBody GREATER_THAN textTag 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bodyTag",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bodyTag ::= LESS_THAN C_BR GREATER_THAN textTag 
            {
              Object RESULT =null;
		
        etiquetas.add(new Br());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bodyTag",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // nameTagBody ::= C_SPAM paramsSPAM GREATER_THAN textTag LESS_THAN SLASH C_SPAM 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            etiquetas.add(new Span(t, parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // nameTagBody ::= C_INPUT paramsINPUT GREATER_THAN textTag LESS_THAN SLASH C_INPUT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            etiquetas.add(new Input(t, parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // nameTagBody ::= C_TEXTAREA paramsTEXTA GREATER_THAN textTag LESS_THAN SLASH C_TEXTAREA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            etiquetas.add(new TextArea(t, parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // nameTagBody ::= inicioSelect textTag optionsTag LESS_THAN SLASH C_SELECT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
            Select sel = new Select(etiquetas, t, parametros);
            parametros = new ArrayList();
            etiquetas = pilaEtiquetas.pop();
            etiquetas.add(sel);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // nameTagBody ::= C_IMG paramsIMG GREATER_THAN textTag LESS_THAN SLASH C_IMG 
            {
              Object RESULT =null;
		
            etiquetas.add(new Img(parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // nameTagBody ::= C_BUTTON paramsBTN GREATER_THAN textTag LESS_THAN SLASH C_BUTTON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            etiquetas.add(new Button(t, parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // nameTagBody ::= C_H1 paramsH1 GREATER_THAN textTag LESS_THAN SLASH C_H1 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            etiquetas.add(new H1(t, parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // nameTagBody ::= C_P paramsP GREATER_THAN textTag LESS_THAN SLASH C_P 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            etiquetas.add(new P(t, parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // nameTagBody ::= inicioDIV textTag LESS_THAN SLASH C_DIV 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            etiquetas = pilaEtiquetas.pop();
            etiquetas.add(new Div(null, t, parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // nameTagBody ::= inicioDIV textTag bodyTags LESS_THAN SLASH C_DIV 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
            parametros = pilaParams.pop();
            Div div = new Div(etiquetas, t, parametros);
            parametros = new ArrayList();
            etiquetas = pilaEtiquetas.pop();
            etiquetas.add(div);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // nameTagBody ::= C_SCRIPTING GREATER_THAN procesos LESS_THAN DIVIDE C_SCRIPTING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // inicioSelect ::= C_SELECT paramsSEL GREATER_THAN 
            {
              Object RESULT =null;
		
        pilaEtiquetas.push(etiquetas);
        etiquetas = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicioSelect",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // inicioDIV ::= C_DIV paramsDIV GREATER_THAN 
            {
              Object RESULT =null;
		
        pilaEtiquetas.push(etiquetas);
        etiquetas = new ArrayList();
        pilaParams.push(parametros);
        parametros = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicioDIV",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // optionsTag ::= optionsTag optionTag 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionsTag",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // optionsTag ::= optionTag 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionsTag",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // optionTag ::= LESS_THAN C_OPTION GREATER_THAN textTag LESS_THAN SLASH C_OPTION GREATER_THAN textTag 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
        etiquetas.add(new Option(o));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionTag",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // background ::= OPEN_BRACKET BACKGROUND ASSIGN QOUTE_MARK color QOUTE_MARK CLOSE_BRACKET 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("background",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // textTag ::= TEXT_TAG 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("textTag",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // textTag ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("textTag",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // paramsSPAM ::= paramsSPAM paramSPAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsSPAM",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // paramsSPAM ::= paramSPAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsSPAM",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // paramSPAM ::= OPEN_BRACKET optionParamSPAM CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramSPAM",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // optionParamSPAM ::= paramColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamSPAM",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // optionParamSPAM ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamSPAM",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // optionParamSPAM ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamSPAM",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // paramsINPUT ::= paramsINPUT paramINPUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsINPUT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // paramsINPUT ::= paramINPUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsINPUT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // paramINPUT ::= OPEN_BRACKET optionParamINPUT CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramINPUT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // optionParamINPUT ::= TYPE ASSIGN QOUTE_MARK type QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamINPUT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // optionParamINPUT ::= paramColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamINPUT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // optionParamINPUT ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamINPUT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // optionParamINPUT ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamINPUT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // paramsTEXTA ::= paramsTEXTA paramTEXTA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsTEXTA",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // paramsTEXTA ::= paramTEXTA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsTEXTA",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // paramTEXTA ::= OPEN_BRACKET optionParamTEXTA CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramTEXTA",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // optionParamTEXTA ::= ROWS ASSIGN QOUTE_MARK ENTERO QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamTEXTA",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // optionParamTEXTA ::= COLS ASSIGN QOUTE_MARK ENTERO QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamTEXTA",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // optionParamTEXTA ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamTEXTA",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // optionParamTEXTA ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamTEXTA",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // paramsSEL ::= paramsSEL paramSEL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsSEL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // paramsSEL ::= paramSEL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsSEL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // paramSEL ::= OPEN_BRACKET optionParamSEL CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramSEL",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // optionParamSEL ::= paramColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamSEL",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // optionParamSEL ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamSEL",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // optionParamSEL ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamSEL",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // paramsDIV ::= paramsDIV paramDIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsDIV",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // paramsDIV ::= paramDIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsDIV",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // paramDIV ::= OPEN_BRACKET optionParamDIV CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramDIV",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // optionParamDIV ::= BACKGROUND ASSIGN QOUTE_MARK color QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamDIV",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // optionParamDIV ::= CLASS ASSIGN QOUTE_MARK clase QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamDIV",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // optionParamDIV ::= paramColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamDIV",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // optionParamDIV ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamDIV",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // optionParamDIV ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamDIV",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // paramsIMG ::= paramsIMG paramIMG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsIMG",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // paramsIMG ::= paramIMG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsIMG",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // paramIMG ::= OPEN_BRACKET optionParamIMG CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramIMG",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // optionParamIMG ::= ALT ASSIGN QOUTE_MARK NAME_PARAM QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamIMG",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // optionParamIMG ::= HEIGHT ASSIGN QOUTE_MARK size QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamIMG",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // optionParamIMG ::= WIDTH ASSIGN QOUTE_MARK size QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamIMG",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // optionParamIMG ::= SRC ASSIGN QOUTE_MARK URL QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamIMG",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // optionParamIMG ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamIMG",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // size ::= SIZE 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = s.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("size",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // size ::= WH_VAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = s.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("size",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // paramsBTN ::= paramsBTN paramBTN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsBTN",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // paramsBTN ::= paramBTN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsBTN",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // paramBTN ::= OPEN_BRACKET optionParamBTN CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramBTN",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // optionParamBTN ::= BACKGROUND ASSIGN QOUTE_MARK color QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamBTN",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // optionParamBTN ::= paramColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamBTN",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // optionParamBTN ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamBTN",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // optionParamBTN ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamBTN",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // paramsH1 ::= paramsH1 paramH1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsH1",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // paramsH1 ::= paramH1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsH1",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // paramH1 ::= OPEN_BRACKET optionParamH1 CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramH1",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // optionParamH1 ::= paramColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamH1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // optionParamH1 ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamH1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // optionParamH1 ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamH1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // paramsP ::= paramsP paramP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsP",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // paramsP ::= paramP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsP",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // paramP ::= OPEN_BRACKET optionParamP CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // optionParamP ::= paramColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamP",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // optionParamP ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamP",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // optionParamP ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamP",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // optionTextParam ::= FONT_SIZE ASSIGN QOUTE_MARK SIZE QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionTextParam",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // optionTextParam ::= FONT_FAMILY ASSIGN QOUTE_MARK font QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionTextParam",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // optionTextParam ::= TEXT_ALIGN ASSIGN QOUTE_MARK align QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionTextParam",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // paramId ::= ID ASSIGN QOUTE_MARK optionId QOUTE_MARK 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramId",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // optionId ::= ID_PARAM 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = i.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionId",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // optionId ::= NAME_PARAM 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = i.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionId",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // paramColor ::= COLOR ASSIGN QOUTE_MARK color QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramColor",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // color ::= COLOR_VALUE 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // color ::= BLACK 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // color ::= OLIVE 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // color ::= TEAL 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // color ::= RED 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // color ::= BLUE 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // color ::= MARRON 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // color ::= NAVY 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // color ::= GRAY 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // color ::= LIME 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // color ::= FUCHSIA 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // color ::= GREEN 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // color ::= PURPLE 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // color ::= SILVER 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // color ::= YELLOW 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // color ::= AQUA 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // font ::= COURIER 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = f.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("font",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // font ::= VERDANA 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = f.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("font",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // font ::= ARIAL 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = f.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("font",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // font ::= GENEVA 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = f.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("font",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // font ::= SANS_SERIF 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = f.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("font",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // align ::= LEFT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("align",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // align ::= CENTER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("align",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // align ::= RIGHT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("align",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // align ::= JUSTIFY 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("align",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // type ::= TEXT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // type ::= NUMBER 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // type ::= RADIO 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // type ::= CHECKBOX 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // procesos ::= procesos process 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procesos",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // procesos ::= process 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procesos",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // process ::= ON_LOAD processBody 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("process",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // process ::= PROCESS_NAME processBody 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("process",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // processBody ::= OPEN_ROUND_BRACKET CLOSE_ROUND_BRACKET OPEN_BRACKET CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("processBody",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // processBody ::= OPEN_ROUND_BRACKET CLOSE_ROUND_BRACKET OPEN_BRACKET instructions CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("processBody",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // instructions ::= instructions instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // instructions ::= instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // instruction ::= oneStatement SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // instruction ::= ifStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // oneStatement ::= fullStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oneStatement",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // oneStatement ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oneStatement",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // oneStatement ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oneStatement",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // fullStatement ::= tipo GLOBAL_MODE variables ASSIGN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fullStatement",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // fullStatement ::= tipo variables ASSIGN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fullStatement",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // statement ::= tipo GLOBAL_MODE variables 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // statement ::= tipo variables 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // assignment ::= variable ASSIGN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ifStatement ::= simpleIf instructionBlock END ifTypes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ifStatement ::= simpleIf oneStatement SEMI ifTypes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // simpleIf ::= IF OPEN_ROUND_BRACKET condition CLOSE_ROUND_BRACKET THEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleIf",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ifTypes ::= ELSE instructionBlock END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifTypes",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ifTypes ::= ELSE oneStatement SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifTypes",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ifTypes ::= ELSE ifStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifTypes",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ifTypes ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifTypes",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // condition ::= condition EQUAL_TO condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // condition ::= condition NOT_EQTUAL_TO condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // condition ::= condition GREATER_THAN condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // condition ::= condition LESS_THAN condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // condition ::= condition GREATER_THAN_OR_EQUAL_TO condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // condition ::= condition LESS_THAN_OR_EQUAL_TO condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // condition ::= condition AND condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // condition ::= condition OR condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // condition ::= OPEN_ROUND_BRACKET condition CLOSE_ROUND_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // condition ::= OPEN_ROUND_BRACKET condition CLOSE_ROUND_BRACKET EQUAL_TO condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // condition ::= OPEN_ROUND_BRACKET condition CLOSE_ROUND_BRACKET NOT_EQTUAL_TO condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // condition ::= OPEN_ROUND_BRACKET condition CLOSE_ROUND_BRACKET GREATER_THAN condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // condition ::= OPEN_ROUND_BRACKET condition CLOSE_ROUND_BRACKET LESS_THAN condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // condition ::= OPEN_ROUND_BRACKET condition CLOSE_ROUND_BRACKET GREATER_THAN_OR_EQUAL_TO condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // condition ::= OPEN_ROUND_BRACKET condition CLOSE_ROUND_BRACKET LESS_THAN_OR_EQUAL_TO condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // condition ::= OPEN_ROUND_BRACKET condition CLOSE_ROUND_BRACKET AND condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // condition ::= OPEN_ROUND_BRACKET condition CLOSE_ROUND_BRACKET OR condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // condition ::= NOT condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // condition ::= values 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // condition ::= variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // instructionBlock ::= INIT OPEN_BRACE COLON instructions COLON CLOSE_BRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionBlock",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // tipo ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // tipo ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // tipo ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // variables ::= variables COMMA variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // variables ::= variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // variable ::= ID_VAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // expr ::= mathExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // expr ::= logicExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // expr ::= values 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // expr ::= variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // mathExpr ::= expr PLUS expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // mathExpr ::= expr MINUS expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // mathExpr ::= expr TIMES expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // mathExpr ::= expr DIVIDE expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // mathExpr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // mathExpr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET PLUS expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // mathExpr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET MINUS expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // mathExpr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET TIMES expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // mathExpr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET DIVIDE expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // logicExpr ::= expr EQUAL_TO expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // logicExpr ::= expr NOT_EQTUAL_TO expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // logicExpr ::= expr GREATER_THAN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // logicExpr ::= expr LESS_THAN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // logicExpr ::= expr GREATER_THAN_OR_EQUAL_TO expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // logicExpr ::= expr LESS_THAN_OR_EQUAL_TO expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // logicExpr ::= expr AND expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // logicExpr ::= expr OR expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // logicExpr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET EQUAL_TO expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // logicExpr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET NOT_EQTUAL_TO expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // logicExpr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET GREATER_THAN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // logicExpr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET LESS_THAN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // logicExpr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET GREATER_THAN_OR_EQUAL_TO expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // logicExpr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET LESS_THAN_OR_EQUAL_TO expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // logicExpr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET AND expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // logicExpr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET OR expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // logicExpr ::= NOT expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // values ::= numero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("values",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // values ::= caracter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("values",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // values ::= literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("values",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // values ::= bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("values",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // numero ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numero",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // numero ::= DECIMAL_VAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numero",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // caracter ::= CHAR_VAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caracter",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // literal ::= LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // bool ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // bool ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
