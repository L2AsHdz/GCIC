
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores.sintactico;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import model.tags.body.Body;
import model.tags.body.Br;
import model.tags.body.Button;
import model.tags.body.Div;
import model.errores.ErrorAnalisis;
import model.errores.TipoError;
import model.tags.GCIC;
import model.tags.body.H1;
import model.tags.head.Head;
import model.tags.body.Img;
import model.tags.body.Input;
import model.tags.head.Link;
import model.tags.body.Option;
import model.tags.body.P;
import model.tags.Parametro;
import model.tags.body.Select;
import model.tags.body.Span;
import model.tags.Tag;
import model.tags.body.TextArea;
import model.tags.head.Title;
import model.Token;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\002\002\016\000\002\002\004\000\002\014" +
    "\004\000\002\014\003\000\002\015\005\000\002\016\007" +
    "\000\002\016\003\000\002\057\014\000\002\003\004\000" +
    "\002\003\004\000\002\005\013\000\002\004\014\000\002" +
    "\054\011\000\002\060\015\000\002\006\004\000\002\006" +
    "\003\000\002\007\006\000\002\007\006\000\002\010\011" +
    "\000\002\010\011\000\002\010\011\000\002\010\010\000" +
    "\002\010\011\000\002\010\011\000\002\010\011\000\002" +
    "\010\011\000\002\010\007\000\002\010\010\000\002\010" +
    "\010\000\002\033\005\000\002\037\005\000\002\011\004" +
    "\000\002\011\003\000\002\012\013\000\002\055\011\000" +
    "\002\061\003\000\002\061\002\000\002\017\004\000\002" +
    "\017\003\000\002\020\005\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\022\004\000\002\022\003" +
    "\000\002\023\005\000\002\024\007\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\025\004\000\002" +
    "\025\003\000\002\026\005\000\002\027\007\000\002\027" +
    "\007\000\002\027\003\000\002\027\003\000\002\030\004" +
    "\000\002\030\003\000\002\031\005\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\034\004\000\002" +
    "\034\003\000\002\035\005\000\002\036\007\000\002\036" +
    "\007\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\040\004\000\002\040\003\000\002\041\005\000" +
    "\002\042\007\000\002\042\007\000\002\042\007\000\002" +
    "\042\007\000\002\042\003\000\002\070\003\000\002\070" +
    "\003\000\002\043\004\000\002\043\003\000\002\044\005" +
    "\000\002\045\007\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\046\004\000\002\046\003\000\002" +
    "\047\005\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\051\004\000\002\051\003\000\002\052\005" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\013\007\000\002\013\007\000\002\013\007\000\002" +
    "\067\007\000\002\071\003\000\002\071\003\000\002\056" +
    "\007\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\003\000\002\064\003\000\002" +
    "\064\003\000\002\064\003\000\002\064\003\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\065\003" +
    "\000\002\072\004\000\002\072\003\000\002\073\004\000" +
    "\002\073\004\000\002\074\006\000\002\074\007\000\002" +
    "\075\004\000\002\075\003\000\002\076\004\000\002\076" +
    "\003\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\077\003\000\002\077\003\000\002\077\003\000" +
    "\002\100\007\000\002\100\006\000\002\101\005\000\002" +
    "\101\004\000\002\102\005\000\002\106\006\000\002\106" +
    "\006\000\002\107\007\000\002\110\005\000\002\110\005" +
    "\000\002\110\004\000\002\110\002\000\002\111\005\000" +
    "\002\111\005\000\002\111\005\000\002\111\005\000\002" +
    "\111\005\000\002\111\005\000\002\111\005\000\002\111" +
    "\005\000\002\111\005\000\002\111\007\000\002\111\007" +
    "\000\002\111\007\000\002\111\007\000\002\111\007\000" +
    "\002\111\007\000\002\111\007\000\002\111\007\000\002" +
    "\111\004\000\002\111\003\000\002\111\003\000\002\112" +
    "\005\000\002\112\005\000\002\113\012\000\002\114\003" +
    "\000\002\114\003\000\002\115\003\000\002\115\003\000" +
    "\002\104\005\000\002\104\005\000\002\104\005\000\002" +
    "\104\005\000\002\104\005\000\002\104\007\000\002\104" +
    "\007\000\002\104\007\000\002\104\007\000\002\104\003" +
    "\000\002\116\005\000\002\116\005\000\002\117\007\000" +
    "\002\105\010\000\002\120\007\000\002\121\005\000\002" +
    "\121\003\000\002\122\003\000\002\122\003\000\002\122" +
    "\003\000\002\123\003\000\002\123\003\000\002\123\003" +
    "\000\002\123\003\000\002\123\003\000\002\124\005\000" +
    "\002\124\003\000\002\125\003\000\002\103\005\000\002" +
    "\103\005\000\002\103\005\000\002\103\005\000\002\103" +
    "\005\000\002\103\005\000\002\103\005\000\002\103\005" +
    "\000\002\103\005\000\002\103\005\000\002\103\005\000" +
    "\002\103\005\000\002\103\005\000\002\103\007\000\002" +
    "\103\007\000\002\103\007\000\002\103\007\000\002\103" +
    "\007\000\002\103\007\000\002\103\007\000\002\103\007" +
    "\000\002\103\007\000\002\103\007\000\002\103\007\000" +
    "\002\103\007\000\002\103\004\000\002\103\003\000\002" +
    "\103\003\000\002\126\003\000\002\126\003\000\002\126" +
    "\003\000\002\126\003\000\002\127\003\000\002\127\003" +
    "\000\002\131\003\000\002\130\003\000\002\132\003\000" +
    "\002\132\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0250\000\004\167\004\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\150\011\001\002\000\006\150\ufffe\170\ufffe\001" +
    "\002\000\006\035\066\036\u024d\001\002\000\006\150\011" +
    "\170\014\001\002\000\006\150\uffff\170\uffff\001\002\000" +
    "\006\167\uffdd\210\016\001\002\000\004\167\017\001\002" +
    "\000\006\002\uffde\167\uffde\001\002\000\004\005\u0223\001" +
    "\002\000\004\167\022\001\002\000\004\167\u021e\001\002" +
    "\000\004\010\023\001\002\000\004\150\024\001\002\000" +
    "\004\026\u0218\001\002\000\004\170\026\001\002\000\006" +
    "\167\uffdd\210\016\001\002\000\004\167\031\001\002\000" +
    "\004\167\u0213\001\002\000\030\011\046\012\045\013\042" +
    "\014\035\016\034\017\037\020\043\021\044\022\050\023" +
    "\033\024\047\001\002\000\004\167\ufff2\001\002\000\004" +
    "\150\u0206\001\002\000\004\150\u01f2\001\002\000\004\150" +
    "\u01e7\001\002\000\004\170\u01e5\001\002\000\004\150\u01c4" +
    "\001\002\000\006\167\uffdd\210\016\001\002\000\006\167" +
    "\uffdd\210\016\001\002\000\004\150\u0193\001\002\000\004" +
    "\170\u0191\001\002\000\004\150\u017e\001\002\000\004\150" +
    "\u0167\001\002\000\004\150\u0159\001\002\000\004\170\153" +
    "\001\002\000\004\150\051\001\002\000\014\027\062\031" +
    "\070\032\064\033\065\035\066\001\002\000\006\150\uffa8" +
    "\170\uffa8\001\002\000\006\150\051\170\054\001\002\000" +
    "\006\167\uffdd\210\016\001\002\000\006\150\uffa9\170\uffa9" +
    "\001\002\000\004\167\057\001\002\000\004\157\060\001" +
    "\002\000\004\022\061\001\002\000\004\170\uffe9\001\002" +
    "\000\004\160\127\001\002\000\004\151\uffa5\001\002\000" +
    "\004\160\116\001\002\000\004\160\106\001\002\000\004" +
    "\160\100\001\002\000\004\151\uffa6\001\002\000\004\160" +
    "\074\001\002\000\004\151\uffa4\001\002\000\004\151\073" +
    "\001\002\000\006\150\uffa7\170\uffa7\001\002\000\004\161" +
    "\075\001\002\000\004\107\076\001\002\000\004\161\077" +
    "\001\002\000\004\151\uff9d\001\002\000\004\161\101\001" +
    "\002\000\006\111\103\112\102\001\002\000\004\161\uff98" +
    "\001\002\000\004\161\uff99\001\002\000\004\161\105\001" +
    "\002\000\004\151\uff9a\001\002\000\004\161\107\001\002" +
    "\000\012\073\110\074\113\075\111\076\112\001\002\000" +
    "\004\161\uff81\001\002\000\004\161\uff7f\001\002\000\004" +
    "\161\uff7e\001\002\000\004\161\uff80\001\002\000\004\161" +
    "\115\001\002\000\004\151\uff9b\001\002\000\004\161\117" +
    "\001\002\000\014\066\123\067\124\070\121\071\122\072" +
    "\125\001\002\000\004\161\126\001\002\000\004\161\uff84" +
    "\001\002\000\004\161\uff83\001\002\000\004\161\uff86\001" +
    "\002\000\004\161\uff85\001\002\000\004\161\uff82\001\002" +
    "\000\004\151\uff9c\001\002\000\004\161\130\001\002\000" +
    "\042\047\150\050\135\051\132\052\147\053\142\054\141" +
    "\055\151\056\145\057\133\060\137\061\131\062\144\063" +
    "\140\064\143\065\134\106\146\001\002\000\004\161\uff8b" +
    "\001\002\000\004\161\uff93\001\002\000\004\161\uff8d\001" +
    "\002\000\004\161\uff87\001\002\000\004\161\uff94\001\002" +
    "\000\004\161\152\001\002\000\004\161\uff8c\001\002\000" +
    "\004\161\uff89\001\002\000\004\161\uff90\001\002\000\004" +
    "\161\uff91\001\002\000\004\161\uff88\001\002\000\004\161" +
    "\uff8a\001\002\000\004\161\uff8e\001\002\000\004\161\uff96" +
    "\001\002\000\004\161\uff92\001\002\000\004\161\uff95\001" +
    "\002\000\004\161\uff8f\001\002\000\004\151\uff97\001\002" +
    "\000\006\113\154\206\155\001\002\000\004\152\165\001" +
    "\002\000\004\152\165\001\002\000\010\113\uff78\167\uff78" +
    "\206\uff78\001\002\000\010\113\154\167\160\206\155\001" +
    "\002\000\004\201\162\001\002\000\010\113\uff79\167\uff79" +
    "\206\uff79\001\002\000\004\024\163\001\002\000\004\170" +
    "\uffe5\001\002\000\010\113\uff76\167\uff76\206\uff76\001\002" +
    "\000\004\153\166\001\002\000\004\150\167\001\002\000" +
    "\030\115\220\116\176\117\202\120\177\121\203\140\201" +
    "\143\221\145\200\147\205\151\171\207\217\001\002\000" +
    "\032\115\uff6e\116\uff6e\117\uff6e\120\uff6e\121\uff6e\140\uff6e" +
    "\143\uff6e\145\uff6e\147\uff6e\151\uff6e\163\uff6e\207\uff6e\001" +
    "\002\000\010\113\uff75\167\uff75\206\uff75\001\002\000\030" +
    "\115\220\116\176\117\202\120\177\121\203\140\201\143" +
    "\221\145\200\147\205\151\u0157\207\217\001\002\000\004" +
    "\164\uff6b\001\002\000\006\114\u0154\207\217\001\002\000" +
    "\020\115\220\116\176\117\202\120\177\121\203\136\377" +
    "\207\217\001\002\000\006\114\uff2a\207\uff2a\001\002\000" +
    "\006\114\uff2b\207\uff2b\001\002\000\004\152\u014c\001\002" +
    "\000\004\152\u0121\001\002\000\006\114\uff2c\207\uff2c\001" +
    "\002\000\006\114\uff2d\207\uff2d\001\002\000\032\115\uff6f" +
    "\116\uff6f\117\uff6f\120\uff6f\121\uff6f\140\uff6f\143\uff6f\145" +
    "\uff6f\147\uff6f\151\uff6f\163\uff6f\207\uff6f\001\002\000\004" +
    "\152\u0117\001\002\000\020\115\220\116\176\117\202\120" +
    "\177\121\203\136\377\207\217\001\002\000\032\115\uff6d" +
    "\116\uff6d\117\uff6d\120\uff6d\121\uff6d\140\uff6d\143\uff6d\145" +
    "\uff6d\147\uff6d\151\uff6d\163\uff6d\207\uff6d\001\002\000\032" +
    "\115\uff70\116\uff70\117\uff70\120\uff70\121\uff70\140\uff70\143" +
    "\uff70\145\uff70\147\uff70\151\uff70\163\uff70\207\uff70\001\002" +
    "\000\004\164\u0112\001\002\000\004\164\uff6a\001\002\000" +
    "\004\160\u0110\001\002\000\020\115\220\116\176\117\202" +
    "\120\177\121\203\136\377\207\217\001\002\000\032\115" +
    "\uff72\116\uff72\117\uff72\120\uff72\121\uff72\140\uff72\143\uff72" +
    "\145\uff72\147\uff72\151\uff72\163\uff72\207\uff72\001\002\000" +
    "\004\164\uff6c\001\002\000\042\153\uff27\154\uff27\160\uff27" +
    "\164\uff27\165\uff27\166\uff27\167\uff27\170\uff27\171\uff27\172" +
    "\uff27\173\uff27\174\uff27\176\uff27\177\uff27\200\uff27\201\uff27" +
    "\001\002\000\006\114\uff2e\207\uff2e\001\002\000\004\152" +
    "\222\001\002\000\016\115\220\116\176\117\202\120\177" +
    "\121\203\207\217\001\002\000\004\153\342\001\002\000" +
    "\004\153\uff45\001\002\000\004\153\uff46\001\002\000\006" +
    "\114\230\207\217\001\002\000\010\154\uff28\160\uff28\164" +
    "\uff28\001\002\000\004\207\217\001\002\000\006\154\232" +
    "\160\233\001\002\000\004\207\217\001\002\000\024\122" +
    "\240\123\244\152\245\175\246\202\236\203\241\204\252" +
    "\205\234\207\217\001\002\000\040\153\uff03\154\uff03\164" +
    "\uff03\165\uff03\166\uff03\167\uff03\170\uff03\171\uff03\172\uff03" +
    "\173\uff03\174\uff03\176\uff03\177\uff03\200\uff03\201\uff03\001" +
    "\002\000\036\153\uff07\164\uff07\165\uff07\166\uff07\167\uff07" +
    "\170\uff07\171\uff07\172\uff07\173\uff07\174\uff07\176\uff07\177" +
    "\uff07\200\uff07\201\uff07\001\002\000\040\153\uff06\154\uff06" +
    "\164\uff06\165\uff06\166\uff06\167\uff06\170\uff06\171\uff06\172" +
    "\uff06\173\uff06\174\uff06\176\uff06\177\uff06\200\uff06\201\uff06" +
    "\001\002\000\036\153\uff0b\164\uff0b\165\uff0b\166\uff0b\167" +
    "\uff0b\170\uff0b\171\uff0b\172\uff0b\173\uff0b\174\uff0b\176\uff0b" +
    "\177\uff0b\200\uff0b\201\uff0b\001\002\000\036\153\uff02\164" +
    "\uff02\165\uff02\166\uff02\167\uff02\170\uff02\171\uff02\172\uff02" +
    "\173\uff02\174\uff02\176\uff02\177\uff02\200\uff02\201\uff02\001" +
    "\002\000\040\153\uff05\154\uff05\164\uff05\165\uff05\166\uff05" +
    "\167\uff05\170\uff05\171\uff05\172\uff05\173\uff05\174\uff05\176" +
    "\uff05\177\uff05\200\uff05\201\uff05\001\002\000\036\153\uff09" +
    "\164\uff09\165\uff09\166\uff09\167\uff09\170\uff09\171\uff09\172" +
    "\uff09\173\uff09\174\uff09\176\uff09\177\uff09\200\uff09\201\uff09" +
    "\001\002\000\036\153\uff0a\164\uff0a\165\uff0a\166\uff0a\167" +
    "\uff0a\170\uff0a\171\uff0a\172\uff0a\173\uff0a\174\uff0a\176\uff0a" +
    "\177\uff0a\200\uff0a\201\uff0a\001\002\000\036\153\uff01\164" +
    "\uff01\165\uff01\166\uff01\167\uff01\170\uff01\171\uff01\172\uff01" +
    "\173\uff01\174\uff01\176\uff01\177\uff01\200\uff01\201\uff01\001" +
    "\002\000\024\122\240\123\244\152\245\175\246\202\236" +
    "\203\241\204\252\205\234\207\217\001\002\000\024\122" +
    "\240\123\244\152\245\175\246\202\236\203\241\204\252" +
    "\205\234\207\217\001\002\000\036\153\uff68\164\uff68\165" +
    "\255\166\265\167\260\170\264\171\257\172\262\173\266" +
    "\174\254\176\261\177\253\200\263\201\256\001\002\000" +
    "\036\153\uff08\164\uff08\165\uff08\166\uff08\167\uff08\170\uff08" +
    "\171\uff08\172\uff08\173\uff08\174\uff08\176\uff08\177\uff08\200" +
    "\uff08\201\uff08\001\002\000\036\153\uff0c\164\uff0c\165\uff0c" +
    "\166\uff0c\167\uff0c\170\uff0c\171\uff0c\172\uff0c\173\uff0c\174" +
    "\uff0c\176\uff0c\177\uff0c\200\uff0c\201\uff0c\001\002\000\036" +
    "\153\uff04\164\uff04\165\uff04\166\uff04\167\uff04\170\uff04\171" +
    "\uff04\172\uff04\173\uff04\174\uff04\176\uff04\177\uff04\200\uff04" +
    "\201\uff04\001\002\000\024\122\240\123\244\152\245\175" +
    "\246\202\236\203\241\204\252\205\234\207\217\001\002" +
    "\000\024\122\240\123\244\152\245\175\246\202\236\203" +
    "\241\204\252\205\234\207\217\001\002\000\024\122\240" +
    "\123\244\152\245\175\246\202\236\203\241\204\252\205" +
    "\234\207\217\001\002\000\024\122\240\123\244\152\245" +
    "\175\246\202\236\203\241\204\252\205\234\207\217\001" +
    "\002\000\024\122\240\123\244\152\245\175\246\202\236" +
    "\203\241\204\252\205\234\207\217\001\002\000\024\122" +
    "\240\123\244\152\245\175\246\202\236\203\241\204\252" +
    "\205\234\207\217\001\002\000\024\122\240\123\244\152" +
    "\245\175\246\202\236\203\241\204\252\205\234\207\217" +
    "\001\002\000\024\122\240\123\244\152\245\175\246\202" +
    "\236\203\241\204\252\205\234\207\217\001\002\000\024" +
    "\122\240\123\244\152\245\175\246\202\236\203\241\204" +
    "\252\205\234\207\217\001\002\000\024\122\240\123\244" +
    "\152\245\175\246\202\236\203\241\204\252\205\234\207" +
    "\217\001\002\000\024\122\240\123\244\152\245\175\246" +
    "\202\236\203\241\204\252\205\234\207\217\001\002\000" +
    "\024\122\240\123\244\152\245\175\246\202\236\203\241" +
    "\204\252\205\234\207\217\001\002\000\036\153\uff1b\164" +
    "\uff1b\165\uff1b\166\uff1b\167\uff1b\170\uff1b\171\uff1b\172\uff1b" +
    "\173\uff1b\174\254\176\uff1b\177\uff1b\200\uff1b\201\uff1b\001" +
    "\002\000\036\153\uff21\164\uff21\165\uff21\166\uff21\167\uff21" +
    "\170\uff21\171\uff21\172\uff21\173\266\174\254\176\uff21\177" +
    "\uff21\200\uff21\201\uff21\001\002\000\036\153\uff20\164\uff20" +
    "\165\uff20\166\uff20\167\uff20\170\uff20\171\uff20\172\uff20\173" +
    "\266\174\254\176\uff20\177\uff20\200\uff20\201\uff20\001\002" +
    "\000\036\153\uff24\164\uff24\165\255\166\265\167\260\170" +
    "\264\171\257\172\262\173\266\174\254\176\uff24\177\uff24" +
    "\200\uff24\201\uff24\001\002\000\036\153\uff1e\164\uff1e\165" +
    "\uff1e\166\uff1e\167\uff1e\170\uff1e\171\uff1e\172\uff1e\173\266" +
    "\174\254\176\uff1e\177\uff1e\200\uff1e\201\uff1e\001\002\000" +
    "\036\153\uff26\164\uff26\165\255\166\265\167\260\170\264" +
    "\171\257\172\262\173\266\174\254\176\uff26\177\uff26\200" +
    "\263\201\256\001\002\000\036\153\uff1f\164\uff1f\165\uff1f" +
    "\166\uff1f\167\uff1f\170\uff1f\171\uff1f\172\uff1f\173\266\174" +
    "\254\176\uff1f\177\uff1f\200\uff1f\201\uff1f\001\002\000\036" +
    "\153\uff1d\164\uff1d\165\uff1d\166\uff1d\167\uff1d\170\uff1d\171" +
    "\uff1d\172\uff1d\173\266\174\254\176\uff1d\177\uff1d\200\uff1d" +
    "\201\uff1d\001\002\000\036\153\uff23\164\uff23\165\255\166" +
    "\265\167\260\170\264\171\257\172\262\173\266\174\254" +
    "\176\uff23\177\uff23\200\uff23\201\uff23\001\002\000\036\153" +
    "\uff22\164\uff22\165\uff22\166\uff22\167\uff22\170\uff22\171\uff22" +
    "\172\uff22\173\266\174\254\176\uff22\177\uff22\200\uff22\201" +
    "\uff22\001\002\000\036\153\uff1c\164\uff1c\165\uff1c\166\uff1c" +
    "\167\uff1c\170\uff1c\171\uff1c\172\uff1c\173\uff1c\174\uff1c\176" +
    "\uff1c\177\uff1c\200\uff1c\201\uff1c\001\002\000\036\153\uff25" +
    "\164\uff25\165\255\166\265\167\260\170\264\171\257\172" +
    "\262\173\266\174\254\176\uff25\177\uff25\200\263\201\256" +
    "\001\002\000\036\153\uff0d\164\uff0d\165\uff0d\166\uff0d\167" +
    "\uff0d\170\uff0d\171\uff0d\172\uff0d\173\uff0d\174\uff0d\176\uff0d" +
    "\177\uff0d\200\uff0d\201\uff0d\001\002\000\034\153\305\165" +
    "\255\166\265\167\260\170\264\171\257\172\262\173\266" +
    "\174\254\176\261\177\253\200\263\201\256\001\002\000" +
    "\036\153\uff1a\164\uff1a\165\310\166\320\167\313\170\317" +
    "\171\312\172\316\173\321\174\307\176\314\177\306\200" +
    "\315\201\311\001\002\000\024\122\240\123\244\152\245" +
    "\175\246\202\236\203\241\204\252\205\234\207\217\001" +
    "\002\000\024\122\240\123\244\152\245\175\246\202\236" +
    "\203\241\204\252\205\234\207\217\001\002\000\024\122" +
    "\240\123\244\152\245\175\246\202\236\203\241\204\252" +
    "\205\234\207\217\001\002\000\024\122\240\123\244\152" +
    "\245\175\246\202\236\203\241\204\252\205\234\207\217" +
    "\001\002\000\024\122\240\123\244\152\245\175\246\202" +
    "\236\203\241\204\252\205\234\207\217\001\002\000\024" +
    "\122\240\123\244\152\245\175\246\202\236\203\241\204" +
    "\252\205\234\207\217\001\002\000\024\122\240\123\244" +
    "\152\245\175\246\202\236\203\241\204\252\205\234\207" +
    "\217\001\002\000\024\122\240\123\244\152\245\175\246" +
    "\202\236\203\241\204\252\205\234\207\217\001\002\000" +
    "\024\122\240\123\244\152\245\175\246\202\236\203\241" +
    "\204\252\205\234\207\217\001\002\000\024\122\240\123" +
    "\244\152\245\175\246\202\236\203\241\204\252\205\234" +
    "\207\217\001\002\000\024\122\240\123\244\152\245\175" +
    "\246\202\236\203\241\204\252\205\234\207\217\001\002" +
    "\000\024\122\240\123\244\152\245\175\246\202\236\203" +
    "\241\204\252\205\234\207\217\001\002\000\036\153\uff0e" +
    "\164\uff0e\165\uff0e\166\uff0e\167\uff0e\170\uff0e\171\uff0e\172" +
    "\uff0e\173\uff0e\174\254\176\uff0e\177\uff0e\200\uff0e\201\uff0e" +
    "\001\002\000\036\153\uff14\164\uff14\165\uff14\166\uff14\167" +
    "\uff14\170\uff14\171\uff14\172\uff14\173\266\174\254\176\uff14" +
    "\177\uff14\200\uff14\201\uff14\001\002\000\036\153\uff13\164" +
    "\uff13\165\uff13\166\uff13\167\uff13\170\uff13\171\uff13\172\uff13" +
    "\173\266\174\254\176\uff13\177\uff13\200\uff13\201\uff13\001" +
    "\002\000\036\153\uff11\164\uff11\165\uff11\166\uff11\167\uff11" +
    "\170\uff11\171\uff11\172\uff11\173\266\174\254\176\uff11\177" +
    "\uff11\200\uff11\201\uff11\001\002\000\036\153\uff17\164\uff17" +
    "\165\255\166\265\167\260\170\264\171\257\172\262\173" +
    "\266\174\254\176\uff17\177\uff17\200\uff17\201\uff17\001\002" +
    "\000\036\153\uff19\164\uff19\165\255\166\265\167\260\170" +
    "\264\171\257\172\262\173\266\174\254\176\uff19\177\uff19" +
    "\200\263\201\256\001\002\000\036\153\uff12\164\uff12\165" +
    "\uff12\166\uff12\167\uff12\170\uff12\171\uff12\172\uff12\173\266" +
    "\174\254\176\uff12\177\uff12\200\uff12\201\uff12\001\002\000" +
    "\036\153\uff10\164\uff10\165\uff10\166\uff10\167\uff10\170\uff10" +
    "\171\uff10\172\uff10\173\266\174\254\176\uff10\177\uff10\200" +
    "\uff10\201\uff10\001\002\000\036\153\uff16\164\uff16\165\255" +
    "\166\265\167\260\170\264\171\257\172\262\173\266\174" +
    "\254\176\uff16\177\uff16\200\uff16\201\uff16\001\002\000\036" +
    "\153\uff15\164\uff15\165\uff15\166\uff15\167\uff15\170\uff15\171" +
    "\uff15\172\uff15\173\266\174\254\176\uff15\177\uff15\200\uff15" +
    "\201\uff15\001\002\000\036\153\uff0f\164\uff0f\165\uff0f\166" +
    "\uff0f\167\uff0f\170\uff0f\171\uff0f\172\uff0f\173\uff0f\174\uff0f" +
    "\176\uff0f\177\uff0f\200\uff0f\201\uff0f\001\002\000\036\153" +
    "\uff18\164\uff18\165\255\166\265\167\260\170\264\171\257" +
    "\172\262\173\266\174\254\176\uff18\177\uff18\200\263\201" +
    "\256\001\002\000\010\154\uff29\160\uff29\164\uff29\001\002" +
    "\000\006\154\232\160\340\001\002\000\024\122\240\123" +
    "\244\152\245\175\246\202\236\203\241\204\252\205\234" +
    "\207\217\001\002\000\036\153\uff69\164\uff69\165\255\166" +
    "\265\167\260\170\264\171\257\172\262\173\266\174\254" +
    "\176\261\177\253\200\263\201\256\001\002\000\004\144" +
    "\343\001\002\000\004\152\344\001\002\000\012\152\351" +
    "\202\236\203\241\207\217\001\002\000\014\153\uff39\176" +
    "\uff39\177\uff39\200\uff39\201\uff39\001\002\000\014\153\uff44" +
    "\176\353\177\354\200\357\201\355\001\002\000\004\153" +
    "\374\001\002\000\004\153\uff43\001\002\000\010\152\351" +
    "\202\236\203\241\001\002\000\014\153\356\176\353\177" +
    "\354\200\357\201\355\001\002\000\010\152\351\202\236" +
    "\203\241\001\002\000\010\152\351\202\236\203\241\001" +
    "\002\000\010\152\351\202\236\203\241\001\002\000\014" +
    "\153\uff3e\176\361\177\362\200\364\201\363\001\002\000" +
    "\010\152\351\202\236\203\241\001\002\000\014\153\uff40" +
    "\176\uff40\177\uff40\200\uff40\201\uff40\001\002\000\010\152" +
    "\351\202\236\203\241\001\002\000\010\152\351\202\236" +
    "\203\241\001\002\000\010\152\351\202\236\203\241\001" +
    "\002\000\010\152\351\202\236\203\241\001\002\000\014" +
    "\153\uff3b\176\uff3b\177\uff3b\200\uff3b\201\uff3b\001\002\000" +
    "\014\153\uff3a\176\uff3a\177\uff3a\200\uff3a\201\uff3a\001\002" +
    "\000\014\153\uff3c\176\uff3c\177\uff3c\200\357\201\355\001" +
    "\002\000\014\153\uff3d\176\uff3d\177\uff3d\200\357\201\355" +
    "\001\002\000\014\153\uff3f\176\uff3f\177\uff3f\200\uff3f\201" +
    "\uff3f\001\002\000\014\153\uff41\176\uff41\177\uff41\200\357" +
    "\201\355\001\002\000\014\153\uff42\176\uff42\177\uff42\200" +
    "\357\201\355\001\002\000\020\115\uff47\116\uff47\117\uff47" +
    "\120\uff47\121\uff47\136\uff47\207\uff47\001\002\000\004\137" +
    "\u010e\001\002\000\004\164\u0106\001\002\000\004\155\u0100" +
    "\001\002\000\004\163\u0101\001\002\000\026\115\220\116" +
    "\176\117\202\120\177\121\203\140\201\143\221\145\200" +
    "\147\205\207\217\001\002\000\030\115\220\116\176\117" +
    "\202\120\177\121\203\140\201\143\221\145\200\147\205" +
    "\163\u0103\207\217\001\002\000\004\156\u0105\001\002\000" +
    "\032\115\uff73\116\uff73\117\uff73\120\uff73\121\uff73\140\uff73" +
    "\143\uff73\145\uff73\147\uff73\151\uff73\163\uff73\207\uff73\001" +
    "\002\000\004\137\uff35\001\002\000\034\115\uff5e\116\uff5e" +
    "\117\uff5e\120\uff5e\121\uff5e\140\uff5e\142\u0107\143\uff5e\145" +
    "\uff5e\147\uff5e\151\uff5e\163\uff5e\207\uff5e\001\002\000\022" +
    "\115\220\116\176\117\202\120\177\121\203\136\377\140" +
    "\201\207\217\001\002\000\032\115\uff63\116\uff63\117\uff63" +
    "\120\uff63\121\uff63\140\uff63\143\uff63\145\uff63\147\uff63\151" +
    "\uff63\163\uff63\207\uff63\001\002\000\032\115\uff5f\116\uff5f" +
    "\117\uff5f\120\uff5f\121\uff5f\140\uff5f\143\uff5f\145\uff5f\147" +
    "\uff5f\151\uff5f\163\uff5f\207\uff5f\001\002\000\004\137\u010d" +
    "\001\002\000\004\164\u010c\001\002\000\032\115\uff60\116" +
    "\uff60\117\uff60\120\uff60\121\uff60\140\uff60\143\uff60\145\uff60" +
    "\147\uff60\151\uff60\163\uff60\207\uff60\001\002\000\032\115" +
    "\uff61\116\uff61\117\uff61\120\uff61\121\uff61\140\uff61\143\uff61" +
    "\145\uff61\147\uff61\151\uff61\163\uff61\207\uff61\001\002\000" +
    "\034\115\uff5e\116\uff5e\117\uff5e\120\uff5e\121\uff5e\140\uff5e" +
    "\142\u0107\143\uff5e\145\uff5e\147\uff5e\151\uff5e\163\uff5e\207" +
    "\uff5e\001\002\000\032\115\uff64\116\uff64\117\uff64\120\uff64" +
    "\121\uff64\140\uff64\143\uff64\145\uff64\147\uff64\151\uff64\163" +
    "\uff64\207\uff64\001\002\000\024\122\240\123\244\152\245" +
    "\175\246\202\236\203\241\204\252\205\234\207\217\001" +
    "\002\000\036\153\uff65\164\uff65\165\255\166\265\167\260" +
    "\170\264\171\257\172\262\173\266\174\254\176\261\177" +
    "\253\200\263\201\256\001\002\000\032\115\uff71\116\uff71" +
    "\117\uff71\120\uff71\121\uff71\140\uff71\143\uff71\145\uff71\147" +
    "\uff71\151\uff71\163\uff71\207\uff71\001\002\000\004\137\u0116" +
    "\001\002\000\004\164\u0115\001\002\000\032\115\uff37\116" +
    "\uff37\117\uff37\120\uff37\121\uff37\140\uff37\143\uff37\145\uff37" +
    "\147\uff37\151\uff37\163\uff37\207\uff37\001\002\000\032\115" +
    "\uff38\116\uff38\117\uff38\120\uff38\121\uff38\140\uff38\143\uff38" +
    "\145\uff38\147\uff38\151\uff38\163\uff38\207\uff38\001\002\000" +
    "\012\202\236\203\241\205\234\207\217\001\002\000\006" +
    "\153\uff32\154\uff32\001\002\000\006\153\uff2f\154\uff2f\001" +
    "\002\000\006\153\uff30\154\uff30\001\002\000\006\153\u011e" +
    "\154\u011d\001\002\000\006\153\uff31\154\uff31\001\002\000" +
    "\012\202\236\203\241\205\234\207\217\001\002\000\004" +
    "\164\u011f\001\002\000\032\115\uff34\116\uff34\117\uff34\120" +
    "\uff34\121\uff34\140\uff34\143\uff34\145\uff34\147\uff34\151\uff34" +
    "\163\uff34\207\uff34\001\002\000\006\153\uff33\154\uff33\001" +
    "\002\000\024\122\240\123\244\152\u0124\175\u0125\202\236" +
    "\203\241\204\252\205\234\207\217\001\002\000\024\153" +
    "\u014a\165\u0128\166\u012e\167\u012a\170\u012c\171\u012d\172\u0129" +
    "\173\u012f\174\u012b\001\002\000\024\153\uff4a\165\uff4a\166" +
    "\uff4a\167\uff4a\170\uff4a\171\uff4a\172\uff4a\173\uff4a\174\uff4a" +
    "\001\002\000\024\122\240\123\244\152\u0124\175\u0125\202" +
    "\236\203\241\204\252\205\234\207\217\001\002\000\024" +
    "\122\240\123\244\152\u0124\175\u0125\202\236\203\241\204" +
    "\252\205\234\207\217\001\002\000\024\153\uff4b\165\uff4b" +
    "\166\uff4b\167\uff4b\170\uff4b\171\uff4b\172\uff4b\173\uff4b\174" +
    "\uff4b\001\002\000\024\153\uff4c\165\uff4c\166\uff4c\167\uff4c" +
    "\170\uff4c\171\uff4c\172\uff4c\173\uff4c\174\uff4c\001\002\000" +
    "\024\122\240\123\244\152\u0124\175\u0125\202\236\203\241" +
    "\204\252\205\234\207\217\001\002\000\024\122\240\123" +
    "\244\152\u0124\175\u0125\202\236\203\241\204\252\205\234" +
    "\207\217\001\002\000\024\122\240\123\244\152\u0124\175" +
    "\u0125\202\236\203\241\204\252\205\234\207\217\001\002" +
    "\000\024\122\240\123\244\152\u0124\175\u0125\202\236\203" +
    "\241\204\252\205\234\207\217\001\002\000\024\122\240" +
    "\123\244\152\u0124\175\u0125\202\236\203\241\204\252\205" +
    "\234\207\217\001\002\000\024\122\240\123\244\152\u0124" +
    "\175\u0125\202\236\203\241\204\252\205\234\207\217\001" +
    "\002\000\024\122\240\123\244\152\u0124\175\u0125\202\236" +
    "\203\241\204\252\205\234\207\217\001\002\000\024\122" +
    "\240\123\244\152\u0124\175\u0125\202\236\203\241\204\252" +
    "\205\234\207\217\001\002\000\024\153\uff56\165\uff56\166" +
    "\uff56\167\uff56\170\uff56\171\uff56\172\uff56\173\uff56\174\u012b" +
    "\001\002\000\024\153\uff5c\165\uff5c\166\uff5c\167\uff5c\170" +
    "\uff5c\171\uff5c\172\uff5c\173\u012f\174\u012b\001\002\000\024" +
    "\153\uff58\165\uff58\166\uff58\167\uff58\170\uff58\171\uff58\172" +
    "\uff58\173\u012f\174\u012b\001\002\000\024\153\uff5b\165\uff5b" +
    "\166\uff5b\167\uff5b\170\uff5b\171\uff5b\172\uff5b\173\u012f\174" +
    "\u012b\001\002\000\024\153\uff57\165\uff57\166\uff57\167\uff57" +
    "\170\uff57\171\uff57\172\uff57\173\uff57\174\uff57\001\002\000" +
    "\024\153\uff5a\165\uff5a\166\uff5a\167\uff5a\170\uff5a\171\uff5a" +
    "\172\uff5a\173\u012f\174\u012b\001\002\000\024\153\uff59\165" +
    "\uff59\166\uff59\167\uff59\170\uff59\171\uff59\172\uff59\173\u012f" +
    "\174\u012b\001\002\000\024\153\uff5d\165\uff5d\166\uff5d\167" +
    "\uff5d\170\uff5d\171\uff5d\172\uff5d\173\u012f\174\u012b\001\002" +
    "\000\024\153\u0139\165\u0128\166\u012e\167\u012a\170\u012c\171" +
    "\u012d\172\u0129\173\u012f\174\u012b\001\002\000\024\153\uff55" +
    "\165\u013a\166\u0140\167\u013c\170\u013e\171\u013f\172\u013b\173" +
    "\u0141\174\u013d\001\002\000\024\122\240\123\244\152\u0124" +
    "\175\u0125\202\236\203\241\204\252\205\234\207\217\001" +
    "\002\000\024\122\240\123\244\152\u0124\175\u0125\202\236" +
    "\203\241\204\252\205\234\207\217\001\002\000\024\122" +
    "\240\123\244\152\u0124\175\u0125\202\236\203\241\204\252" +
    "\205\234\207\217\001\002\000\024\122\240\123\244\152" +
    "\u0124\175\u0125\202\236\203\241\204\252\205\234\207\217" +
    "\001\002\000\024\122\240\123\244\152\u0124\175\u0125\202" +
    "\236\203\241\204\252\205\234\207\217\001\002\000\024" +
    "\122\240\123\244\152\u0124\175\u0125\202\236\203\241\204" +
    "\252\205\234\207\217\001\002\000\024\122\240\123\244" +
    "\152\u0124\175\u0125\202\236\203\241\204\252\205\234\207" +
    "\217\001\002\000\024\122\240\123\244\152\u0124\175\u0125" +
    "\202\236\203\241\204\252\205\234\207\217\001\002\000" +
    "\024\153\uff4d\165\uff4d\166\uff4d\167\uff4d\170\uff4d\171\uff4d" +
    "\172\uff4d\173\uff4d\174\u012b\001\002\000\024\153\uff53\165" +
    "\uff53\166\uff53\167\uff53\170\uff53\171\uff53\172\uff53\173\u012f" +
    "\174\u012b\001\002\000\024\153\uff4f\165\uff4f\166\uff4f\167" +
    "\uff4f\170\uff4f\171\uff4f\172\uff4f\173\u012f\174\u012b\001\002" +
    "\000\024\153\uff52\165\uff52\166\uff52\167\uff52\170\uff52\171" +
    "\uff52\172\uff52\173\u012f\174\u012b\001\002\000\024\153\uff4e" +
    "\165\uff4e\166\uff4e\167\uff4e\170\uff4e\171\uff4e\172\uff4e\173" +
    "\uff4e\174\uff4e\001\002\000\024\153\uff51\165\uff51\166\uff51" +
    "\167\uff51\170\uff51\171\uff51\172\uff51\173\u012f\174\u012b\001" +
    "\002\000\024\153\uff50\165\uff50\166\uff50\167\uff50\170\uff50" +
    "\171\uff50\172\uff50\173\u012f\174\u012b\001\002\000\024\153" +
    "\uff54\165\uff54\166\uff54\167\uff54\170\uff54\171\uff54\172\uff54" +
    "\173\u012f\174\u012b\001\002\000\004\141\u014b\001\002\000" +
    "\020\115\uff62\116\uff62\117\uff62\120\uff62\121\uff62\136\uff62" +
    "\207\uff62\001\002\000\024\122\240\123\244\152\u0124\175" +
    "\u0125\202\236\203\241\204\252\205\234\207\217\001\002" +
    "\000\024\153\u014e\165\u0128\166\u012e\167\u012a\170\u012c\171" +
    "\u012d\172\u0129\173\u012f\174\u012b\001\002\000\004\146\u014f" +
    "\001\002\000\020\115\uff36\116\uff36\117\uff36\120\uff36\121" +
    "\uff36\136\uff36\207\uff36\001\002\000\004\137\u0153\001\002" +
    "\000\004\164\u0152\001\002\000\032\115\uff48\116\uff48\117" +
    "\uff48\120\uff48\121\uff48\140\uff48\143\uff48\145\uff48\147\uff48" +
    "\151\uff48\163\uff48\207\uff48\001\002\000\032\115\uff49\116" +
    "\uff49\117\uff49\120\uff49\121\uff49\140\uff49\143\uff49\145\uff49" +
    "\147\uff49\151\uff49\163\uff49\207\uff49\001\002\000\004\207" +
    "\217\001\002\000\010\154\232\160\233\164\uff66\001\002" +
    "\000\010\154\232\160\340\164\uff67\001\002\000\010\113" +
    "\uff74\167\uff74\206\uff74\001\002\000\010\113\uff77\167\uff77" +
    "\206\uff77\001\002\000\014\027\062\031\070\032\064\033" +
    "\065\035\066\001\002\000\006\150\u0159\170\u015c\001\002" +
    "\000\006\150\uffdb\170\uffdb\001\002\000\006\167\uffdd\210" +
    "\016\001\002\000\006\150\uffdc\170\uffdc\001\002\000\004" +
    "\167\u015f\001\002\000\004\157\u0160\001\002\000\004\011" +
    "\u0161\001\002\000\004\170\uffef\001\002\000\004\151\uffd8" +
    "\001\002\000\004\151\uffd9\001\002\000\004\151\uffd7\001" +
    "\002\000\004\151\u0166\001\002\000\006\150\uffda\170\uffda" +
    "\001\002\000\016\027\062\031\070\032\064\033\065\034" +
    "\u0172\035\066\001\002\000\006\150\u0167\170\u016a\001\002" +
    "\000\006\150\uffd5\170\uffd5\001\002\000\006\167\uffdd\210" +
    "\016\001\002\000\006\150\uffd6\170\uffd6\001\002\000\004" +
    "\167\u016d\001\002\000\004\157\u016e\001\002\000\004\012" +
    "\u016f\001\002\000\004\170\uffee\001\002\000\004\151\u017d" +
    "\001\002\000\004\151\uffd1\001\002\000\004\160\u0175\001" +
    "\002\000\004\151\uffd0\001\002\000\004\151\uffd2\001\002" +
    "\000\004\161\u0176\001\002\000\012\077\u0177\100\u017b\101" +
    "\u0178\102\u017a\001\002\000\004\161\uff7d\001\002\000\004" +
    "\161\uff7b\001\002\000\004\161\u017c\001\002\000\004\161" +
    "\uff7a\001\002\000\004\161\uff7c\001\002\000\004\151\uffd3" +
    "\001\002\000\006\150\uffd4\170\uffd4\001\002\000\016\026" +
    "\u0189\027\062\031\070\032\064\033\065\035\066\001\002" +
    "\000\006\150\uffaf\170\uffaf\001\002\000\006\150\u017e\170" +
    "\u0182\001\002\000\006\150\uffb0\170\uffb0\001\002\000\006" +
    "\167\uffdd\210\016\001\002\000\004\167\u0184\001\002\000" +
    "\004\157\u0185\001\002\000\004\021\u0186\001\002\000\004" +
    "\170\uffea\001\002\000\004\151\u0190\001\002\000\004\151" +
    "\uffab\001\002\000\004\160\u018c\001\002\000\004\151\uffac" +
    "\001\002\000\004\151\uffaa\001\002\000\004\161\u018d\001" +
    "\002\000\042\047\150\050\135\051\132\052\147\053\142" +
    "\054\141\055\151\056\145\057\133\060\137\061\131\062" +
    "\144\063\140\064\143\065\134\106\146\001\002\000\004" +
    "\161\u018f\001\002\000\004\151\uffad\001\002\000\006\150" +
    "\uffae\170\uffae\001\002\000\006\167\uffdd\210\016\001\002" +
    "\000\004\167\ufff0\001\002\000\016\031\070\032\064\033" +
    "\065\035\066\037\u019e\040\u01a0\001\002\000\006\150\u0193" +
    "\170\u0196\001\002\000\006\150\uffce\170\uffce\001\002\000" +
    "\006\167\uffdd\210\016\001\002\000\006\150\uffcf\170\uffcf" +
    "\001\002\000\004\167\u0199\001\002\000\004\157\u019a\001" +
    "\002\000\004\013\u019b\001\002\000\004\170\uffed\001\002" +
    "\000\004\151\uffca\001\002\000\004\151\u01a9\001\002\000" +
    "\004\160\u01a5\001\002\000\004\151\uffc9\001\002\000\004" +
    "\160\u01a1\001\002\000\004\161\u01a2\001\002\000\004\202" +
    "\u01a3\001\002\000\004\161\u01a4\001\002\000\004\151\uffcc" +
    "\001\002\000\004\161\u01a6\001\002\000\004\202\u01a7\001" +
    "\002\000\004\161\u01a8\001\002\000\004\151\uffcb\001\002" +
    "\000\006\150\uffcd\170\uffcd\001\002\000\004\167\u01ac\001" +
    "\002\000\004\167\u01af\001\002\000\032\011\046\012\045" +
    "\013\042\014\035\016\034\017\037\020\043\021\044\022" +
    "\050\023\033\024\047\157\u01ad\001\002\000\004\016\u01ae" +
    "\001\002\000\004\170\uffe7\001\002\000\032\011\046\012" +
    "\045\013\042\014\035\016\034\017\037\020\043\021\044" +
    "\022\050\023\033\024\047\157\u01b1\001\002\000\004\167" +
    "\ufff3\001\002\000\004\016\u01b2\001\002\000\004\170\uffe6" +
    "\001\002\000\004\167\u01b4\001\002\000\004\015\u01ba\001" +
    "\002\000\004\167\u01b7\001\002\000\004\167\uffe1\001\002" +
    "\000\006\015\u01ba\157\u01b9\001\002\000\004\167\uffe2\001" +
    "\002\000\004\014\u01c2\001\002\000\004\170\u01bb\001\002" +
    "\000\006\167\uffdd\210\016\001\002\000\004\167\u01bd\001" +
    "\002\000\004\157\u01be\001\002\000\004\015\u01bf\001\002" +
    "\000\004\170\u01c0\001\002\000\006\167\uffdd\210\016\001" +
    "\002\000\004\167\uffe0\001\002\000\004\170\uffec\001\002" +
    "\000\006\150\uffb9\170\uffb9\001\002\000\014\035\066\042" +
    "\u01d0\043\u01ce\044\u01d1\045\u01cf\001\002\000\006\150\u01c4" +
    "\170\u01c7\001\002\000\006\150\uffba\170\uffba\001\002\000" +
    "\006\167\uffdd\210\016\001\002\000\004\167\u01c9\001\002" +
    "\000\004\157\u01ca\001\002\000\004\017\u01cb\001\002\000" +
    "\004\170\uffeb\001\002\000\004\151\uffb3\001\002\000\004" +
    "\151\u01e4\001\002\000\004\160\u01e0\001\002\000\004\160" +
    "\u01dc\001\002\000\004\160\u01d8\001\002\000\004\160\u01d2" +
    "\001\002\000\004\161\u01d3\001\002\000\006\107\u01d6\110" +
    "\u01d4\001\002\000\004\161\uffb1\001\002\000\004\161\u01d7" +
    "\001\002\000\004\161\uffb2\001\002\000\004\151\uffb6\001" +
    "\002\000\004\161\u01d9\001\002\000\004\105\u01da\001\002" +
    "\000\004\161\u01db\001\002\000\004\151\uffb4\001\002\000" +
    "\004\161\u01dd\001\002\000\004\112\u01de\001\002\000\004" +
    "\161\u01df\001\002\000\004\151\uffb7\001\002\000\004\161" +
    "\u01e1\001\002\000\006\107\u01d6\110\u01d4\001\002\000\004" +
    "\161\u01e3\001\002\000\004\151\uffb5\001\002\000\006\150" +
    "\uffb8\170\uffb8\001\002\000\006\167\uffdd\210\016\001\002" +
    "\000\004\167\ufff1\001\002\000\014\027\062\031\070\032" +
    "\064\033\065\035\066\001\002\000\006\150\uffc7\170\uffc7" +
    "\001\002\000\006\150\u01e7\170\u01ea\001\002\000\006\167" +
    "\uffe4\210\uffe4\001\002\000\006\150\uffc8\170\uffc8\001\002" +
    "\000\004\151\u01f0\001\002\000\004\151\uffc4\001\002\000" +
    "\004\151\uffc5\001\002\000\004\151\uffc3\001\002\000\006" +
    "\150\uffc6\170\uffc6\001\002\000\006\150\u01f2\170\u0203\001" +
    "\002\000\020\026\u01f6\027\062\031\070\032\064\033\065" +
    "\035\066\041\u01f9\001\002\000\006\150\uffc1\170\uffc1\001" +
    "\002\000\004\151\u0202\001\002\000\004\151\uffbc\001\002" +
    "\000\004\160\u01fe\001\002\000\004\151\uffbd\001\002\000" +
    "\004\151\uffbb\001\002\000\004\160\u01fa\001\002\000\004" +
    "\161\u01fb\001\002\000\002\001\002\000\004\161\u01fd\001" +
    "\002\000\004\151\uffbe\001\002\000\004\161\u01ff\001\002" +
    "\000\042\047\150\050\135\051\132\052\147\053\142\054" +
    "\141\055\151\056\145\057\133\060\137\061\131\062\144" +
    "\063\140\064\143\065\134\106\146\001\002\000\004\161" +
    "\u0201\001\002\000\004\151\uffbf\001\002\000\006\150\uffc0" +
    "\170\uffc0\001\002\000\006\167\uffe3\210\uffe3\001\002\000" +
    "\006\150\uffc2\170\uffc2\001\002\000\006\150\uffa2\170\uffa2" +
    "\001\002\000\014\027\062\031\070\032\064\033\065\035" +
    "\066\001\002\000\006\150\u0206\170\u0209\001\002\000\006" +
    "\150\uffa3\170\uffa3\001\002\000\006\167\uffdd\210\016\001" +
    "\002\000\004\167\u020b\001\002\000\004\157\u020c\001\002" +
    "\000\004\023\u020d\001\002\000\004\170\uffe8\001\002\000" +
    "\004\151\uff9f\001\002\000\004\151\u0212\001\002\000\004" +
    "\151\uffa0\001\002\000\004\151\uff9e\001\002\000\006\150" +
    "\uffa1\170\uffa1\001\002\000\032\011\046\012\045\013\042" +
    "\014\035\016\034\017\037\020\043\021\044\022\050\023" +
    "\033\024\047\157\u0214\001\002\000\004\010\u0215\001\002" +
    "\000\004\170\u0216\001\002\000\006\167\uffdd\210\016\001" +
    "\002\000\004\167\ufff4\001\002\000\004\160\u0219\001\002" +
    "\000\004\161\u021a\001\002\000\042\047\150\050\135\051" +
    "\132\052\147\053\142\054\141\055\151\056\145\057\133" +
    "\060\137\061\131\062\144\063\140\064\143\065\134\106" +
    "\146\001\002\000\004\161\u021c\001\002\000\004\151\u021d" +
    "\001\002\000\004\170\uffdf\001\002\000\004\157\u021f\001" +
    "\002\000\004\004\u0220\001\002\000\004\170\u0221\001\002" +
    "\000\006\002\uffdd\210\016\001\002\000\004\002\001\001" +
    "\002\000\004\170\u0224\001\002\000\006\167\uffdd\210\016" +
    "\001\002\000\004\167\u0226\001\002\000\006\006\u023e\007" +
    "\u022c\001\002\000\004\167\u0246\001\002\000\004\167\u023c" +
    "\001\002\000\004\167\u022a\001\002\000\004\007\u022c\001" +
    "\002\000\004\167\ufff8\001\002\000\004\150\u022e\001\002" +
    "\000\004\170\u0235\001\002\000\004\025\u022f\001\002\000" +
    "\004\160\u0230\001\002\000\004\161\u0231\001\002\000\004" +
    "\105\u0232\001\002\000\004\161\u0233\001\002\000\004\151" +
    "\u0234\001\002\000\004\170\ufff5\001\002\000\006\167\uffdd" +
    "\210\016\001\002\000\004\167\u0237\001\002\000\004\157" +
    "\u0238\001\002\000\004\007\u0239\001\002\000\004\170\u023a" +
    "\001\002\000\006\167\uffdd\210\016\001\002\000\004\167" +
    "\ufff6\001\002\000\004\006\u023e\001\002\000\004\167\ufff9" +
    "\001\002\000\004\170\u023f\001\002\000\006\167\uffdd\210" +
    "\016\001\002\000\004\167\u0241\001\002\000\004\157\u0242" +
    "\001\002\000\004\006\u0243\001\002\000\004\170\u0244\001" +
    "\002\000\006\167\uffdd\210\016\001\002\000\004\167\ufff7" +
    "\001\002\000\004\157\u0247\001\002\000\004\005\u0248\001" +
    "\002\000\004\170\u0249\001\002\000\006\167\uffdd\210\016" +
    "\001\002\000\004\167\ufffa\001\002\000\004\151\u0252\001" +
    "\002\000\004\151\ufffb\001\002\000\004\160\u024e\001\002" +
    "\000\004\161\u024f\001\002\000\004\112\u0250\001\002\000" +
    "\004\161\u0251\001\002\000\004\151\ufffc\001\002\000\006" +
    "\150\ufffd\170\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0250\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\011\015\007" +
    "\001\001\000\002\001\001\000\006\016\u024a\067\u024b\001" +
    "\001\000\004\015\012\001\001\000\002\001\001\000\004" +
    "\061\014\001\001\000\004\057\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\026\001\001" +
    "\000\006\006\027\007\031\001\001\000\004\007\u01af\001" +
    "\001\000\010\010\035\033\037\037\040\001\001\000\002" +
    "\001\001\000\006\051\u0206\052\u0204\001\001\000\006\034" +
    "\u01f0\035\u01f2\001\001\000\006\030\u01e8\031\u01e7\001\001" +
    "\000\002\001\001\000\006\040\u01c4\041\u01c2\001\001\000" +
    "\004\061\u01b2\001\001\000\004\061\u01a9\001\001\000\006" +
    "\025\u0193\026\u0194\001\001\000\002\001\001\000\006\043" +
    "\u017f\044\u017e\001\001\000\006\022\u0167\023\u0168\001\001" +
    "\000\006\017\u0159\020\u015a\001\001\000\002\001\001\000" +
    "\006\046\052\047\051\001\001\000\012\013\070\050\071" +
    "\056\066\067\062\001\001\000\002\001\001\000\004\047" +
    "\054\001\001\000\004\061\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\071\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\064\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\072\156\073\155\001\001" +
    "\000\004\074\u0157\001\001\000\004\074\163\001\001\000" +
    "\002\001\001\000\004\073\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\075\171\076\214\077\210\100\215\101\172\102\211\106" +
    "\207\107\213\112\203\113\174\116\167\117\205\120\206" +
    "\123\173\125\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\076\u0103\077\210\100\215\101\172\102\211" +
    "\106\207\107\213\112\203\113\174\116\167\117\205\120" +
    "\206\123\173\125\212\001\001\000\002\001\001\000\006" +
    "\124\u0154\125\226\001\001\000\020\077\u0150\100\215\101" +
    "\172\102\211\105\u014f\123\173\125\212\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\077\u0113\100\215\101\172\102" +
    "\211\105\u0112\123\173\125\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\077\375\100\215\101\172\102\211" +
    "\105\374\123\173\125\212\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\100\224\102\223\114\222\123\225\125" +
    "\212\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\124\230\125\226\001\001\000\002\001" +
    "\001\000\006\124\336\125\226\001\001\000\002\001\001" +
    "\000\004\125\335\001\001\000\020\103\246\125\236\126" +
    "\250\127\242\130\247\131\241\132\234\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\103\303\125" +
    "\236\126\250\127\242\130\247\131\241\132\234\001\001" +
    "\000\020\103\302\125\236\126\250\127\242\130\247\131" +
    "\241\132\234\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\103\301\125" +
    "\236\126\250\127\242\130\247\131\241\132\234\001\001" +
    "\000\020\103\300\125\236\126\250\127\242\130\247\131" +
    "\241\132\234\001\001\000\020\103\277\125\236\126\250" +
    "\127\242\130\247\131\241\132\234\001\001\000\020\103" +
    "\276\125\236\126\250\127\242\130\247\131\241\132\234" +
    "\001\001\000\020\103\275\125\236\126\250\127\242\130" +
    "\247\131\241\132\234\001\001\000\020\103\274\125\236" +
    "\126\250\127\242\130\247\131\241\132\234\001\001\000" +
    "\020\103\273\125\236\126\250\127\242\130\247\131\241" +
    "\132\234\001\001\000\020\103\272\125\236\126\250\127" +
    "\242\130\247\131\241\132\234\001\001\000\020\103\271" +
    "\125\236\126\250\127\242\130\247\131\241\132\234\001" +
    "\001\000\020\103\270\125\236\126\250\127\242\130\247" +
    "\131\241\132\234\001\001\000\020\103\267\125\236\126" +
    "\250\127\242\130\247\131\241\132\234\001\001\000\020" +
    "\103\266\125\236\126\250\127\242\130\247\131\241\132" +
    "\234\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\103\334\125\236\126\250\127\242\130\247\131\241\132" +
    "\234\001\001\000\020\103\333\125\236\126\250\127\242" +
    "\130\247\131\241\132\234\001\001\000\020\103\332\125" +
    "\236\126\250\127\242\130\247\131\241\132\234\001\001" +
    "\000\020\103\331\125\236\126\250\127\242\130\247\131" +
    "\241\132\234\001\001\000\020\103\330\125\236\126\250" +
    "\127\242\130\247\131\241\132\234\001\001\000\020\103" +
    "\327\125\236\126\250\127\242\130\247\131\241\132\234" +
    "\001\001\000\020\103\326\125\236\126\250\127\242\130" +
    "\247\131\241\132\234\001\001\000\020\103\325\125\236" +
    "\126\250\127\242\130\247\131\241\132\234\001\001\000" +
    "\020\103\324\125\236\126\250\127\242\130\247\131\241" +
    "\132\234\001\001\000\020\103\323\125\236\126\250\127" +
    "\242\130\247\131\241\132\234\001\001\000\020\103\322" +
    "\125\236\126\250\127\242\130\247\131\241\132\234\001" +
    "\001\000\020\103\321\125\236\126\250\127\242\130\247" +
    "\131\241\132\234\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\103" +
    "\340\125\236\126\250\127\242\130\247\131\241\132\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\104\345\115\346\125\347\127\344\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\104\351\127\344\001\001\000\002" +
    "\001\001\000\006\104\372\127\344\001\001\000\006\104" +
    "\371\127\344\001\001\000\006\104\370\127\344\001\001" +
    "\000\002\001\001\000\006\104\357\127\344\001\001\000" +
    "\002\001\001\000\006\104\367\127\344\001\001\000\006" +
    "\104\366\127\344\001\001\000\006\104\365\127\344\001" +
    "\001\000\006\104\364\127\344\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\075\u0101\076\214\077\210" +
    "\100\215\101\172\102\211\106\207\107\213\112\203\113" +
    "\174\116\167\117\205\120\206\123\173\125\212\001\001" +
    "\000\036\076\u0103\077\210\100\215\101\172\102\211\106" +
    "\207\107\213\112\203\113\174\116\167\117\205\120\206" +
    "\123\173\125\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\110\u0107\001\001\000\024" +
    "\077\u010a\100\215\101\172\102\211\105\u0109\106\u0108\107" +
    "\213\123\173\125\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\110\u010e\001\001\000\002" +
    "\001\001\000\020\103\u0110\125\236\126\250\127\242\130" +
    "\247\131\241\132\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\121\u011a\122\u0117\125\u0118" +
    "\127\u0119\130\u011b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\122\u011f\125\u0118\127\u0119\130\u011b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\111\u0121\125\u0122\126\u0125\127\242\130\247\131\241\132" +
    "\234\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\111\u0137\125\u0122\126\u0125\127\242\130\247\131\241\132" +
    "\234\001\001\000\020\111\u0126\125\u0122\126\u0125\127\242" +
    "\130\247\131\241\132\234\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\111\u0136\125\u0122\126\u0125\127\242" +
    "\130\247\131\241\132\234\001\001\000\020\111\u0135\125" +
    "\u0122\126\u0125\127\242\130\247\131\241\132\234\001\001" +
    "\000\020\111\u0134\125\u0122\126\u0125\127\242\130\247\131" +
    "\241\132\234\001\001\000\020\111\u0133\125\u0122\126\u0125" +
    "\127\242\130\247\131\241\132\234\001\001\000\020\111" +
    "\u0132\125\u0122\126\u0125\127\242\130\247\131\241\132\234" +
    "\001\001\000\020\111\u0131\125\u0122\126\u0125\127\242\130" +
    "\247\131\241\132\234\001\001\000\020\111\u0130\125\u0122" +
    "\126\u0125\127\242\130\247\131\241\132\234\001\001\000" +
    "\020\111\u012f\125\u0122\126\u0125\127\242\130\247\131\241" +
    "\132\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\111\u0148\125\u0122\126\u0125" +
    "\127\242\130\247\131\241\132\234\001\001\000\020\111" +
    "\u0147\125\u0122\126\u0125\127\242\130\247\131\241\132\234" +
    "\001\001\000\020\111\u0146\125\u0122\126\u0125\127\242\130" +
    "\247\131\241\132\234\001\001\000\020\111\u0145\125\u0122" +
    "\126\u0125\127\242\130\247\131\241\132\234\001\001\000" +
    "\020\111\u0144\125\u0122\126\u0125\127\242\130\247\131\241" +
    "\132\234\001\001\000\020\111\u0143\125\u0122\126\u0125\127" +
    "\242\130\247\131\241\132\234\001\001\000\020\111\u0142" +
    "\125\u0122\126\u0125\127\242\130\247\131\241\132\234\001" +
    "\001\000\020\111\u0141\125\u0122\126\u0125\127\242\130\247" +
    "\131\241\132\234\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\111\u014c\125\u0122" +
    "\126\u0125\127\242\130\247\131\241\132\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\124\u0155\125\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\u0163\021\u0164\056\u0162\067\u0161\001\001\000\004" +
    "\020\u015c\001\001\000\002\001\001\000\004\061\u015d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\013\u0172\024\u016f\056\u0173\067\u0170\001" +
    "\001\000\004\023\u016a\001\001\000\002\001\001\000\004" +
    "\061\u016b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\065\u0178" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\u018a\045\u0186\056\u0189\067" +
    "\u0187\001\001\000\002\001\001\000\004\044\u0180\001\001" +
    "\000\002\001\001\000\004\061\u0182\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\u018d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\u0191\001\001\000\002\001\001" +
    "\000\010\013\u019e\027\u019c\067\u019b\001\001\000\004\026" +
    "\u0196\001\001\000\002\001\001\000\004\061\u0197\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\u01aa\007\031\001\001\000\004\007\u01af\001\001\000" +
    "\010\010\035\033\037\037\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\035\033\037\037\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\u01b4\012\u01b5\001\001\000\002\001\001\000" +
    "\004\012\u01b7\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\061\u01bb\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\u01c0\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\042\u01cc\067\u01cb\001\001\000\004\041\u01c5\001" +
    "\001\000\002\001\001\000\004\061\u01c7\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\070\u01d4\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\070\u01e1" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\u01e5\001\001\000\002\001\001\000\012" +
    "\013\u01ee\032\u01eb\056\u01ed\067\u01ec\001\001\000\002\001" +
    "\001\000\004\031\u01ea\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\u0203" +
    "\001\001\000\012\013\u01f7\036\u01f3\056\u01f6\067\u01f4\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\066\u01fb\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\u01ff\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\u0210\053\u020e\056\u020f\067\u020d" +
    "\001\001\000\004\052\u0207\001\001\000\002\001\001\000" +
    "\004\061\u0209\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\035\033\037\037\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\u0216\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\u021a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\u0221\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\u0224\001\001\000\010\003" +
    "\u0226\004\u0227\005\u0228\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\u023c\001\001\000\004\004\u022a\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\054\u022c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\u0235\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\u023a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\061\u023f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\u0244" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\u0249\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private final List<ErrorAnalisis> errores = new ArrayList();
    private List<Parametro> parametros = new ArrayList();
    private List<Tag> etiquetas = new ArrayList();
    private List<Tag> etiquetasHead = new ArrayList();
    private Stack<List<Tag>> pilaEtiquetas = new Stack();
    private Stack<List<Parametro>> pilaParams = new Stack();
    private Tag gcicTag;

    public List<ErrorAnalisis> getErrores() {
        return this.errores;
    }

    public Tag getGCIC() {
        return this.gcicTag;
    }

    public void syntax_error(Symbol s) {
        Token t = (Token) s.value;
        StringBuilder descripcion = new StringBuilder("Se esperaba: ");
        expected_token_ids().forEach(x -> descripcion.append(symbl_name_from_id(x)).append(", "));
        errores.add(new ErrorAnalisis(t.getLexema(), t.getLinea(), t.getColumna(), TipoError.SINTACTICO, descripcion.toString()));
        System.out.println(t.getLexema() + ", linea: " + t.getLinea() + ", col: " + t.getColumna() + ", descripcion: " + descripcion.toString());
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        Token t = (Token) cur_token.value;
        System.out.println("Error irrecuperable " + t.getLexema());
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // gcic ::= LESS_THAN C_GCIC paramsGCIC GREATER_THAN textTag head body LESS_THAN SLASH C_GCIC GREATER_THAN textTag 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Tag h = (Tag)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Tag b = (Tag)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
        gcicTag = new GCIC(h, b, parametros);
        parametros = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("gcic",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= gcic EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // paramsGCIC ::= paramsGCIC paramGCIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsGCIC",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // paramsGCIC ::= paramGCIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsGCIC",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // paramGCIC ::= OPEN_BRACKET optionParamGCIC CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramGCIC",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // optionParamGCIC ::= NAME ASSIGN QOUTE_MARK NAME_PARAM QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamGCIC",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // optionParamGCIC ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamGCIC",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // head ::= LESS_THAN C_HEAD GREATER_THAN textTag headTags LESS_THAN SLASH C_HEAD GREATER_THAN textTag 
            {
              Tag RESULT =null;
		
        RESULT = new Head(etiquetasHead);
        etiquetasHead = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("head",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // headTags ::= link title 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("headTags",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // headTags ::= title link 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("headTags",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // title ::= LESS_THAN C_TITLE GREATER_THAN textTag LESS_THAN SLASH C_TITLE GREATER_THAN textTag 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
        etiquetasHead.add(new Title(t.trim()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("title",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // link ::= LESS_THAN C_LINK href GREATER_THAN textTag LESS_THAN SLASH C_LINK GREATER_THAN textTag 
            {
              Object RESULT =null;
		
        etiquetasHead.add(new Link(parametros));
        parametros = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("link",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // href ::= OPEN_BRACKET HREF ASSIGN QOUTE_MARK URL QOUTE_MARK CLOSE_BRACKET 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("href",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // body ::= LESS_THAN C_BODY background GREATER_THAN textTag bodyTags LESS_THAN SLASH C_BODY GREATER_THAN textTag 
            {
              Tag RESULT =null;
		
        RESULT = new Body(etiquetas, parametros);
        parametros = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bodyTags ::= bodyTags bodyTag 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bodyTags",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bodyTags ::= bodyTag 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bodyTags",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bodyTag ::= LESS_THAN nameTagBody GREATER_THAN textTag 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bodyTag",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bodyTag ::= LESS_THAN C_BR GREATER_THAN textTag 
            {
              Object RESULT =null;
		
        etiquetas.add(new Br());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bodyTag",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // nameTagBody ::= C_SPAM paramsSPAM GREATER_THAN textTag LESS_THAN SLASH C_SPAM 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            etiquetas.add(new Span(t, parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // nameTagBody ::= C_INPUT paramsINPUT GREATER_THAN textTag LESS_THAN SLASH C_INPUT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            etiquetas.add(new Input(t, parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // nameTagBody ::= C_TEXTAREA paramsTEXTA GREATER_THAN textTag LESS_THAN SLASH C_TEXTAREA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            etiquetas.add(new TextArea(t, parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // nameTagBody ::= inicioSelect textTag optionsTag LESS_THAN SLASH C_SELECT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
            Select sel = new Select(etiquetas, t, parametros);
            parametros = new ArrayList();
            etiquetas = pilaEtiquetas.pop();
            etiquetas.add(sel);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // nameTagBody ::= C_IMG paramsIMG GREATER_THAN textTag LESS_THAN SLASH C_IMG 
            {
              Object RESULT =null;
		
            etiquetas.add(new Img(parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // nameTagBody ::= C_BUTTON paramsBTN GREATER_THAN textTag LESS_THAN SLASH C_BUTTON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            etiquetas.add(new Button(t, parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // nameTagBody ::= C_H1 paramsH1 GREATER_THAN textTag LESS_THAN SLASH C_H1 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            etiquetas.add(new H1(t, parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // nameTagBody ::= C_P paramsP GREATER_THAN textTag LESS_THAN SLASH C_P 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            etiquetas.add(new P(t, parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // nameTagBody ::= inicioDIV textTag LESS_THAN SLASH C_DIV 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            etiquetas = pilaEtiquetas.pop();
            etiquetas.add(new Div(null, t, parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // nameTagBody ::= inicioDIV textTag bodyTags LESS_THAN SLASH C_DIV 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
            parametros = pilaParams.pop();
            Div div = new Div(etiquetas, t, parametros);
            parametros = new ArrayList();
            etiquetas = pilaEtiquetas.pop();
            etiquetas.add(div);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // nameTagBody ::= C_SCRIPTING GREATER_THAN procesos LESS_THAN DIVIDE C_SCRIPTING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // inicioSelect ::= C_SELECT paramsSEL GREATER_THAN 
            {
              Object RESULT =null;
		
        pilaEtiquetas.push(etiquetas);
        etiquetas = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicioSelect",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // inicioDIV ::= C_DIV paramsDIV GREATER_THAN 
            {
              Object RESULT =null;
		
        pilaEtiquetas.push(etiquetas);
        etiquetas = new ArrayList();
        pilaParams.push(parametros);
        parametros = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicioDIV",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // optionsTag ::= optionsTag optionTag 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionsTag",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // optionsTag ::= optionTag 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionsTag",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // optionTag ::= LESS_THAN C_OPTION GREATER_THAN textTag LESS_THAN SLASH C_OPTION GREATER_THAN textTag 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
        etiquetas.add(new Option(o));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionTag",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // background ::= OPEN_BRACKET BACKGROUND ASSIGN QOUTE_MARK color QOUTE_MARK CLOSE_BRACKET 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("background",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // textTag ::= TEXT_TAG 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("textTag",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // textTag ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("textTag",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // paramsSPAM ::= paramsSPAM paramSPAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsSPAM",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // paramsSPAM ::= paramSPAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsSPAM",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // paramSPAM ::= OPEN_BRACKET optionParamSPAM CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramSPAM",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // optionParamSPAM ::= paramColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamSPAM",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // optionParamSPAM ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamSPAM",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // optionParamSPAM ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamSPAM",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // paramsINPUT ::= paramsINPUT paramINPUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsINPUT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // paramsINPUT ::= paramINPUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsINPUT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // paramINPUT ::= OPEN_BRACKET optionParamINPUT CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramINPUT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // optionParamINPUT ::= TYPE ASSIGN QOUTE_MARK type QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamINPUT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // optionParamINPUT ::= paramColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamINPUT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // optionParamINPUT ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamINPUT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // optionParamINPUT ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamINPUT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // paramsTEXTA ::= paramsTEXTA paramTEXTA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsTEXTA",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // paramsTEXTA ::= paramTEXTA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsTEXTA",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // paramTEXTA ::= OPEN_BRACKET optionParamTEXTA CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramTEXTA",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // optionParamTEXTA ::= ROWS ASSIGN QOUTE_MARK ENTERO QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamTEXTA",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // optionParamTEXTA ::= COLS ASSIGN QOUTE_MARK ENTERO QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamTEXTA",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // optionParamTEXTA ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamTEXTA",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // optionParamTEXTA ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamTEXTA",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // paramsSEL ::= paramsSEL paramSEL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsSEL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // paramsSEL ::= paramSEL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsSEL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // paramSEL ::= OPEN_BRACKET optionParamSEL CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramSEL",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // optionParamSEL ::= paramColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamSEL",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // optionParamSEL ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamSEL",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // optionParamSEL ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamSEL",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // paramsDIV ::= paramsDIV paramDIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsDIV",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // paramsDIV ::= paramDIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsDIV",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // paramDIV ::= OPEN_BRACKET optionParamDIV CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramDIV",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // optionParamDIV ::= BACKGROUND ASSIGN QOUTE_MARK color QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamDIV",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // optionParamDIV ::= CLASS ASSIGN QOUTE_MARK clase QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamDIV",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // optionParamDIV ::= paramColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamDIV",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // optionParamDIV ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamDIV",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // optionParamDIV ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamDIV",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // paramsIMG ::= paramsIMG paramIMG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsIMG",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // paramsIMG ::= paramIMG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsIMG",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // paramIMG ::= OPEN_BRACKET optionParamIMG CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramIMG",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // optionParamIMG ::= ALT ASSIGN QOUTE_MARK NAME_PARAM QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamIMG",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // optionParamIMG ::= HEIGHT ASSIGN QOUTE_MARK size QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamIMG",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // optionParamIMG ::= WIDTH ASSIGN QOUTE_MARK size QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamIMG",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // optionParamIMG ::= SRC ASSIGN QOUTE_MARK URL QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamIMG",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // optionParamIMG ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamIMG",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // size ::= SIZE 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = s.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("size",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // size ::= WH_VAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = s.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("size",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // paramsBTN ::= paramsBTN paramBTN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsBTN",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // paramsBTN ::= paramBTN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsBTN",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // paramBTN ::= OPEN_BRACKET optionParamBTN CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramBTN",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // optionParamBTN ::= BACKGROUND ASSIGN QOUTE_MARK color QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamBTN",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // optionParamBTN ::= paramColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamBTN",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // optionParamBTN ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamBTN",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // optionParamBTN ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamBTN",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // paramsH1 ::= paramsH1 paramH1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsH1",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // paramsH1 ::= paramH1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsH1",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // paramH1 ::= OPEN_BRACKET optionParamH1 CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramH1",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // optionParamH1 ::= paramColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamH1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // optionParamH1 ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamH1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // optionParamH1 ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamH1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // paramsP ::= paramsP paramP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsP",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // paramsP ::= paramP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsP",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // paramP ::= OPEN_BRACKET optionParamP CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // optionParamP ::= paramColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamP",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // optionParamP ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamP",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // optionParamP ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamP",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // optionTextParam ::= FONT_SIZE ASSIGN QOUTE_MARK SIZE QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionTextParam",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // optionTextParam ::= FONT_FAMILY ASSIGN QOUTE_MARK font QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionTextParam",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // optionTextParam ::= TEXT_ALIGN ASSIGN QOUTE_MARK align QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionTextParam",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // paramId ::= ID ASSIGN QOUTE_MARK optionId QOUTE_MARK 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramId",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // optionId ::= ID_PARAM 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = i.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionId",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // optionId ::= NAME_PARAM 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = i.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionId",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // paramColor ::= COLOR ASSIGN QOUTE_MARK color QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramColor",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // color ::= COLOR_VALUE 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // color ::= BLACK 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // color ::= OLIVE 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // color ::= TEAL 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // color ::= RED 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // color ::= BLUE 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // color ::= MARRON 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // color ::= NAVY 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // color ::= GRAY 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // color ::= LIME 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // color ::= FUCHSIA 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // color ::= GREEN 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // color ::= PURPLE 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // color ::= SILVER 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // color ::= YELLOW 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // color ::= AQUA 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // font ::= COURIER 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = f.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("font",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // font ::= VERDANA 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = f.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("font",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // font ::= ARIAL 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = f.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("font",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // font ::= GENEVA 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = f.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("font",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // font ::= SANS_SERIF 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = f.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("font",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // align ::= LEFT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("align",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // align ::= CENTER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("align",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // align ::= RIGHT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("align",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // align ::= JUSTIFY 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("align",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // type ::= TEXT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // type ::= NUMBER 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // type ::= RADIO 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // type ::= CHECKBOX 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // procesos ::= procesos process 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procesos",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // procesos ::= process 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procesos",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // process ::= ON_LOAD processBody 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("process",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // process ::= PROCESS_NAME processBody 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("process",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // processBody ::= OPEN_ROUND_BRACKET CLOSE_ROUND_BRACKET OPEN_BRACKET CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("processBody",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // processBody ::= OPEN_ROUND_BRACKET CLOSE_ROUND_BRACKET OPEN_BRACKET instructions CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("processBody",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // instructions ::= instructions instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // instructions ::= instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // instruction ::= oneStatement SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // instruction ::= ifStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // instruction ::= repeatStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // instruction ::= whileStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // instruction ::= insertStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // oneStatement ::= fullStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oneStatement",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // oneStatement ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oneStatement",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // oneStatement ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oneStatement",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // fullStatement ::= tipo GLOBAL_MODE variables ASSIGN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fullStatement",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // fullStatement ::= tipo variables ASSIGN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fullStatement",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // statement ::= tipo GLOBAL_MODE variables 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // statement ::= tipo variables 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // assignment ::= variable ASSIGN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ifStatement ::= simpleIf instructionBlock END ifTypes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ifStatement ::= simpleIf oneStatement SEMI ifTypes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // simpleIf ::= IF OPEN_ROUND_BRACKET condition CLOSE_ROUND_BRACKET THEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleIf",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ifTypes ::= ELSE instructionBlock END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifTypes",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ifTypes ::= ELSE oneStatement SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifTypes",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ifTypes ::= ELSE ifStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifTypes",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ifTypes ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifTypes",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // condition ::= condition EQUAL_TO condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // condition ::= condition NOT_EQTUAL_TO condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // condition ::= condition GREATER_THAN condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // condition ::= condition LESS_THAN condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // condition ::= condition GREATER_THAN_OR_EQUAL_TO condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // condition ::= condition LESS_THAN_OR_EQUAL_TO condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // condition ::= condition AND condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // condition ::= condition OR condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // condition ::= OPEN_ROUND_BRACKET condition CLOSE_ROUND_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // condition ::= OPEN_ROUND_BRACKET condition CLOSE_ROUND_BRACKET EQUAL_TO condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // condition ::= OPEN_ROUND_BRACKET condition CLOSE_ROUND_BRACKET NOT_EQTUAL_TO condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // condition ::= OPEN_ROUND_BRACKET condition CLOSE_ROUND_BRACKET GREATER_THAN condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // condition ::= OPEN_ROUND_BRACKET condition CLOSE_ROUND_BRACKET LESS_THAN condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // condition ::= OPEN_ROUND_BRACKET condition CLOSE_ROUND_BRACKET GREATER_THAN_OR_EQUAL_TO condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // condition ::= OPEN_ROUND_BRACKET condition CLOSE_ROUND_BRACKET LESS_THAN_OR_EQUAL_TO condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // condition ::= OPEN_ROUND_BRACKET condition CLOSE_ROUND_BRACKET AND condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // condition ::= OPEN_ROUND_BRACKET condition CLOSE_ROUND_BRACKET OR condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // condition ::= NOT condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // condition ::= values 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // condition ::= variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // repeatStatement ::= simpleRepeat instructionBlock END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeatStatement",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // repeatStatement ::= simpleRepeat oneStatement SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeatStatement",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // simpleRepeat ::= REPEAT OPEN_ROUND_BRACKET varInicio CLOSE_ROUND_BRACKET HUNTIL OPEN_ROUND_BRACKET limit CLOSE_ROUND_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleRepeat",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // varInicio ::= fullStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInicio",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // varInicio ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInicio",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // limit ::= mathExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("limit",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // limit ::= variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("limit",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // mathExpr ::= mathExpr PLUS mathExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // mathExpr ::= mathExpr MINUS mathExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // mathExpr ::= mathExpr TIMES mathExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // mathExpr ::= mathExpr DIVIDE mathExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // mathExpr ::= OPEN_ROUND_BRACKET mathExpr CLOSE_ROUND_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // mathExpr ::= OPEN_ROUND_BRACKET mathExpr CLOSE_ROUND_BRACKET PLUS mathExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // mathExpr ::= OPEN_ROUND_BRACKET mathExpr CLOSE_ROUND_BRACKET MINUS mathExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // mathExpr ::= OPEN_ROUND_BRACKET mathExpr CLOSE_ROUND_BRACKET TIMES mathExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // mathExpr ::= OPEN_ROUND_BRACKET mathExpr CLOSE_ROUND_BRACKET DIVIDE mathExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // mathExpr ::= numero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // whileStatement ::= simpleWhile instructionBlock END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whileStatement",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // whileStatement ::= simpleWhile oneStatement SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whileStatement",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // simpleWhile ::= WHILE OPEN_ROUND_BRACKET condition CLOSE_ROUND_BRACKET THENWHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleWhile",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // instructionBlock ::= INIT OPEN_BRACE COLON instructions COLON CLOSE_BRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionBlock",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // insertStatement ::= INSERT OPEN_ROUND_BRACKET insertValues CLOSE_ROUND_BRACKET SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("insertStatement",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // insertValues ::= insertValues COMMA insertValue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("insertValues",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // insertValues ::= insertValue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("insertValues",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // insertValue ::= literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("insertValue",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // insertValue ::= numero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("insertValue",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // insertValue ::= variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("insertValue",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // tipo ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // tipo ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // tipo ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // variables ::= variables COMMA variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // variables ::= variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // variable ::= ID_VAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // expr ::= expr PLUS expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // expr ::= expr MINUS expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // expr ::= expr TIMES expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // expr ::= expr DIVIDE expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // expr ::= expr EQUAL_TO expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // expr ::= expr NOT_EQTUAL_TO expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // expr ::= expr GREATER_THAN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // expr ::= expr LESS_THAN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // expr ::= expr GREATER_THAN_OR_EQUAL_TO expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // expr ::= expr LESS_THAN_OR_EQUAL_TO expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // expr ::= expr AND expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // expr ::= expr OR expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // expr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // expr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET PLUS expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // expr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET MINUS expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // expr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET TIMES expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // expr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET DIVIDE expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // expr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET EQUAL_TO expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // expr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET NOT_EQTUAL_TO expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // expr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET GREATER_THAN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // expr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET LESS_THAN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // expr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET GREATER_THAN_OR_EQUAL_TO expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // expr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET LESS_THAN_OR_EQUAL_TO expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // expr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET AND expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // expr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET OR expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // expr ::= NOT expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // expr ::= values 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // expr ::= variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // values ::= numero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("values",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // values ::= caracter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("values",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // values ::= literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("values",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // values ::= bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("values",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // numero ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numero",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // numero ::= DECIMAL_VAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numero",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // caracter ::= CHAR_VAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caracter",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // literal ::= LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // bool ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // bool ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
