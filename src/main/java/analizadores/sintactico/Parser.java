
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores.sintactico;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import model.tags.body.Body;
import model.tags.body.Br;
import model.tags.body.Button;
import model.tags.body.Div;
import model.errores.ErrorAnalisis;
import model.errores.TipoError;
import model.tags.GCIC;
import model.tags.body.H1;
import model.tags.head.Head;
import model.tags.body.Img;
import model.tags.body.Input;
import model.tags.head.Link;
import model.tags.body.Option;
import model.tags.body.P;
import model.tags.Parametro;
import model.tags.body.Select;
import model.tags.body.Span;
import model.tags.Tag;
import model.tags.body.TextArea;
import model.tags.head.Title;
import model.Token;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\310\000\002\002\016\000\002\002\004\000\002\014" +
    "\004\000\002\014\003\000\002\015\005\000\002\016\007" +
    "\000\002\016\003\000\002\057\014\000\002\003\004\000" +
    "\002\003\004\000\002\005\013\000\002\004\014\000\002" +
    "\054\011\000\002\060\015\000\002\006\004\000\002\006" +
    "\003\000\002\007\006\000\002\007\006\000\002\010\011" +
    "\000\002\010\011\000\002\010\011\000\002\010\010\000" +
    "\002\010\011\000\002\010\011\000\002\010\011\000\002" +
    "\010\011\000\002\010\007\000\002\010\010\000\002\010" +
    "\010\000\002\033\005\000\002\037\005\000\002\011\004" +
    "\000\002\011\003\000\002\012\013\000\002\055\011\000" +
    "\002\061\003\000\002\061\002\000\002\017\004\000\002" +
    "\017\003\000\002\020\005\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\022\004\000\002\022\003" +
    "\000\002\023\005\000\002\024\007\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\025\004\000\002" +
    "\025\003\000\002\026\005\000\002\027\007\000\002\027" +
    "\007\000\002\027\003\000\002\027\003\000\002\030\004" +
    "\000\002\030\003\000\002\031\005\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\034\004\000\002" +
    "\034\003\000\002\035\005\000\002\036\007\000\002\036" +
    "\007\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\040\004\000\002\040\003\000\002\041\005\000" +
    "\002\042\007\000\002\042\007\000\002\042\007\000\002" +
    "\042\007\000\002\042\003\000\002\070\003\000\002\070" +
    "\003\000\002\043\004\000\002\043\003\000\002\044\005" +
    "\000\002\045\007\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\046\004\000\002\046\003\000\002" +
    "\047\005\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\051\004\000\002\051\003\000\002\052\005" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\013\007\000\002\013\007\000\002\013\007\000\002" +
    "\067\007\000\002\071\003\000\002\071\003\000\002\056" +
    "\007\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\003\000\002\064\003\000\002" +
    "\064\003\000\002\064\003\000\002\064\003\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\065\003" +
    "\000\002\072\004\000\002\072\003\000\002\073\004\000" +
    "\002\073\004\000\002\074\006\000\002\074\007\000\002" +
    "\075\004\000\002\075\003\000\002\076\003\000\002\076" +
    "\003\000\002\076\003\000\002\077\010\000\002\077\007" +
    "\000\002\103\006\000\002\103\005\000\002\104\006\000" +
    "\002\100\003\000\002\100\003\000\002\100\003\000\002" +
    "\100\003\000\002\100\003\000\002\101\005\000\002\101" +
    "\003\000\002\102\003\000\002\105\003\000\002\105\003" +
    "\000\002\105\003\000\002\105\003\000\002\106\005\000" +
    "\002\106\005\000\002\106\005\000\002\106\005\000\002" +
    "\106\005\000\002\106\007\000\002\106\007\000\002\106" +
    "\007\000\002\106\007\000\002\107\005\000\002\107\005" +
    "\000\002\107\005\000\002\107\005\000\002\107\005\000" +
    "\002\107\005\000\002\107\005\000\002\107\005\000\002" +
    "\107\007\000\002\107\007\000\002\107\007\000\002\107" +
    "\007\000\002\107\007\000\002\107\007\000\002\107\007" +
    "\000\002\107\007\000\002\107\004\000\002\110\003\000" +
    "\002\110\003\000\002\110\003\000\002\110\003\000\002" +
    "\111\003\000\002\111\003\000\002\113\003\000\002\112" +
    "\003\000\002\114\003\000\002\114\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01d4\000\004\167\004\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\150\011\001\002\000\006\150\ufffe\170\ufffe\001" +
    "\002\000\006\035\066\036\u01d1\001\002\000\006\150\011" +
    "\170\014\001\002\000\006\150\uffff\170\uffff\001\002\000" +
    "\006\167\uffdd\210\016\001\002\000\004\167\017\001\002" +
    "\000\006\002\uffde\167\uffde\001\002\000\004\005\u01a7\001" +
    "\002\000\004\167\022\001\002\000\004\167\u01a2\001\002" +
    "\000\004\010\023\001\002\000\004\150\024\001\002\000" +
    "\004\026\u019c\001\002\000\004\170\026\001\002\000\006" +
    "\167\uffdd\210\016\001\002\000\004\167\031\001\002\000" +
    "\004\167\u0197\001\002\000\030\011\046\012\045\013\042" +
    "\014\035\016\034\017\037\020\043\021\044\022\050\023" +
    "\033\024\047\001\002\000\004\167\ufff2\001\002\000\004" +
    "\150\u018a\001\002\000\004\150\u0176\001\002\000\004\150" +
    "\u016b\001\002\000\004\170\u0169\001\002\000\004\150\u0148" +
    "\001\002\000\006\167\uffdd\210\016\001\002\000\006\167" +
    "\uffdd\210\016\001\002\000\004\150\u0117\001\002\000\004" +
    "\170\u0115\001\002\000\004\150\u0102\001\002\000\004\150" +
    "\353\001\002\000\004\150\335\001\002\000\004\170\153" +
    "\001\002\000\004\150\051\001\002\000\014\027\062\031" +
    "\070\032\064\033\065\035\066\001\002\000\006\150\uffa8" +
    "\170\uffa8\001\002\000\006\150\051\170\054\001\002\000" +
    "\006\167\uffdd\210\016\001\002\000\006\150\uffa9\170\uffa9" +
    "\001\002\000\004\167\057\001\002\000\004\157\060\001" +
    "\002\000\004\022\061\001\002\000\004\170\uffe9\001\002" +
    "\000\004\160\127\001\002\000\004\151\uffa5\001\002\000" +
    "\004\160\116\001\002\000\004\160\106\001\002\000\004" +
    "\160\100\001\002\000\004\151\uffa6\001\002\000\004\160" +
    "\074\001\002\000\004\151\uffa4\001\002\000\004\151\073" +
    "\001\002\000\006\150\uffa7\170\uffa7\001\002\000\004\161" +
    "\075\001\002\000\004\107\076\001\002\000\004\161\077" +
    "\001\002\000\004\151\uff9d\001\002\000\004\161\101\001" +
    "\002\000\006\111\103\112\102\001\002\000\004\161\uff98" +
    "\001\002\000\004\161\uff99\001\002\000\004\161\105\001" +
    "\002\000\004\151\uff9a\001\002\000\004\161\107\001\002" +
    "\000\012\073\110\074\113\075\111\076\112\001\002\000" +
    "\004\161\uff81\001\002\000\004\161\uff7f\001\002\000\004" +
    "\161\uff7e\001\002\000\004\161\uff80\001\002\000\004\161" +
    "\115\001\002\000\004\151\uff9b\001\002\000\004\161\117" +
    "\001\002\000\014\066\123\067\124\070\121\071\122\072" +
    "\125\001\002\000\004\161\126\001\002\000\004\161\uff84" +
    "\001\002\000\004\161\uff83\001\002\000\004\161\uff86\001" +
    "\002\000\004\161\uff85\001\002\000\004\161\uff82\001\002" +
    "\000\004\151\uff9c\001\002\000\004\161\130\001\002\000" +
    "\042\047\150\050\135\051\132\052\147\053\142\054\141" +
    "\055\151\056\145\057\133\060\137\061\131\062\144\063" +
    "\140\064\143\065\134\106\146\001\002\000\004\161\uff8b" +
    "\001\002\000\004\161\uff93\001\002\000\004\161\uff8d\001" +
    "\002\000\004\161\uff87\001\002\000\004\161\uff94\001\002" +
    "\000\004\161\152\001\002\000\004\161\uff8c\001\002\000" +
    "\004\161\uff89\001\002\000\004\161\uff90\001\002\000\004" +
    "\161\uff91\001\002\000\004\161\uff88\001\002\000\004\161" +
    "\uff8a\001\002\000\004\161\uff8e\001\002\000\004\161\uff96" +
    "\001\002\000\004\161\uff92\001\002\000\004\161\uff95\001" +
    "\002\000\004\161\uff8f\001\002\000\004\151\uff97\001\002" +
    "\000\006\113\154\206\155\001\002\000\004\152\165\001" +
    "\002\000\004\152\165\001\002\000\010\113\uff78\167\uff78" +
    "\206\uff78\001\002\000\010\113\154\167\160\206\155\001" +
    "\002\000\004\201\162\001\002\000\010\113\uff79\167\uff79" +
    "\206\uff79\001\002\000\004\024\163\001\002\000\004\170" +
    "\uffe5\001\002\000\010\113\uff76\167\uff76\206\uff76\001\002" +
    "\000\004\153\166\001\002\000\004\150\167\001\002\000" +
    "\020\115\172\116\171\117\175\120\205\121\200\151\203" +
    "\207\174\001\002\000\020\115\uff72\116\uff72\117\uff72\120" +
    "\uff72\121\uff72\151\uff72\207\uff72\001\002\000\006\114\uff65" +
    "\207\uff65\001\002\000\006\114\uff69\207\uff69\001\002\000" +
    "\020\115\uff6f\116\uff6f\117\uff6f\120\uff6f\121\uff6f\151\uff6f" +
    "\207\uff6f\001\002\000\042\153\uff62\154\uff62\160\uff62\164" +
    "\uff62\165\uff62\166\uff62\167\uff62\170\uff62\171\uff62\172\uff62" +
    "\173\uff62\174\uff62\176\uff62\177\uff62\200\uff62\201\uff62\001" +
    "\002\000\006\114\uff67\207\uff67\001\002\000\004\160\331" +
    "\001\002\000\020\115\172\116\171\117\175\120\205\121" +
    "\200\151\330\207\174\001\002\000\006\114\uff68\207\uff68" +
    "\001\002\000\020\115\uff71\116\uff71\117\uff71\120\uff71\121" +
    "\uff71\151\uff71\207\uff71\001\002\000\020\115\uff70\116\uff70" +
    "\117\uff70\120\uff70\121\uff70\151\uff70\207\uff70\001\002\000" +
    "\010\113\uff75\167\uff75\206\uff75\001\002\000\006\114\207" +
    "\207\174\001\002\000\006\114\uff66\207\uff66\001\002\000" +
    "\010\154\uff63\160\uff63\164\uff63\001\002\000\004\207\174" +
    "\001\002\000\010\154\211\160\213\164\212\001\002\000" +
    "\004\207\174\001\002\000\020\115\uff6b\116\uff6b\117\uff6b" +
    "\120\uff6b\121\uff6b\151\uff6b\207\uff6b\001\002\000\024\122" +
    "\221\123\226\152\217\175\220\202\232\203\231\204\233" +
    "\205\222\207\174\001\002\000\036\153\uff5f\164\uff5f\165" +
    "\uff5f\166\uff5f\167\uff5f\170\uff5f\171\uff5f\172\uff5f\173\uff5f" +
    "\174\uff5f\176\uff5f\177\uff5f\200\uff5f\201\uff5f\001\002\000" +
    "\034\164\320\165\240\166\250\167\243\170\247\171\242" +
    "\172\246\173\251\174\237\176\244\177\236\200\245\201" +
    "\241\001\002\000\036\153\uff43\164\uff43\165\uff43\166\uff43" +
    "\167\uff43\170\uff43\171\uff43\172\uff43\173\uff43\174\uff43\176" +
    "\uff43\177\uff43\200\uff43\201\uff43\001\002\000\024\122\221" +
    "\123\226\152\217\175\220\202\232\203\231\204\233\205" +
    "\222\207\174\001\002\000\024\122\221\123\226\152\217" +
    "\175\220\202\232\203\231\204\233\205\222\207\174\001" +
    "\002\000\036\153\uff3b\164\uff3b\165\uff3b\166\uff3b\167\uff3b" +
    "\170\uff3b\171\uff3b\172\uff3b\173\uff3b\174\uff3b\176\uff3b\177" +
    "\uff3b\200\uff3b\201\uff3b\001\002\000\036\153\uff3c\164\uff3c" +
    "\165\uff3c\166\uff3c\167\uff3c\170\uff3c\171\uff3c\172\uff3c\173" +
    "\uff3c\174\uff3c\176\uff3c\177\uff3c\200\uff3c\201\uff3c\001\002" +
    "\000\036\153\uff42\164\uff42\165\uff42\166\uff42\167\uff42\170" +
    "\uff42\171\uff42\172\uff42\173\uff42\174\uff42\176\uff42\177\uff42" +
    "\200\uff42\201\uff42\001\002\000\036\153\uff40\164\uff40\165" +
    "\uff40\166\uff40\167\uff40\170\uff40\171\uff40\172\uff40\173\uff40" +
    "\174\uff40\176\uff40\177\uff40\200\uff40\201\uff40\001\002\000" +
    "\036\153\uff60\164\uff60\165\uff60\166\uff60\167\uff60\170\uff60" +
    "\171\uff60\172\uff60\173\uff60\174\uff60\176\uff60\177\uff60\200" +
    "\uff60\201\uff60\001\002\000\036\153\uff3a\164\uff3a\165\uff3a" +
    "\166\uff3a\167\uff3a\170\uff3a\171\uff3a\172\uff3a\173\uff3a\174" +
    "\uff3a\176\uff3a\177\uff3a\200\uff3a\201\uff3a\001\002\000\036" +
    "\153\uff5e\164\uff5e\165\uff5e\166\uff5e\167\uff5e\170\uff5e\171" +
    "\uff5e\172\uff5e\173\uff5e\174\uff5e\176\uff5e\177\uff5e\200\uff5e" +
    "\201\uff5e\001\002\000\036\153\uff41\164\uff41\165\uff41\166" +
    "\uff41\167\uff41\170\uff41\171\uff41\172\uff41\173\uff41\174\uff41" +
    "\176\uff41\177\uff41\200\uff41\201\uff41\001\002\000\036\153" +
    "\uff3e\164\uff3e\165\uff3e\166\uff3e\167\uff3e\170\uff3e\171\uff3e" +
    "\172\uff3e\173\uff3e\174\uff3e\176\uff3e\177\uff3e\200\uff3e\201" +
    "\uff3e\001\002\000\036\153\uff3f\164\uff3f\165\uff3f\166\uff3f" +
    "\167\uff3f\170\uff3f\171\uff3f\172\uff3f\173\uff3f\174\uff3f\176" +
    "\uff3f\177\uff3f\200\uff3f\201\uff3f\001\002\000\036\153\uff3d" +
    "\164\uff3d\165\uff3d\166\uff3d\167\uff3d\170\uff3d\171\uff3d\172" +
    "\uff3d\173\uff3d\174\uff3d\176\uff3d\177\uff3d\200\uff3d\201\uff3d" +
    "\001\002\000\036\153\uff61\164\uff61\165\uff61\166\uff61\167" +
    "\uff61\170\uff61\171\uff61\172\uff61\173\uff61\174\uff61\176\uff61" +
    "\177\uff61\200\uff61\201\uff61\001\002\000\036\153\uff44\164" +
    "\uff44\165\uff44\166\uff44\167\uff44\170\uff44\171\uff44\172\uff44" +
    "\173\uff44\174\uff44\176\uff44\177\uff44\200\uff44\201\uff44\001" +
    "\002\000\024\122\221\123\226\152\217\175\220\202\232" +
    "\203\231\204\233\205\222\207\174\001\002\000\024\122" +
    "\221\123\226\152\217\175\220\202\232\203\231\204\233" +
    "\205\222\207\174\001\002\000\024\122\221\123\226\152" +
    "\217\175\220\202\232\203\231\204\233\205\222\207\174" +
    "\001\002\000\024\122\221\123\226\152\217\175\220\202" +
    "\232\203\231\204\233\205\222\207\174\001\002\000\024" +
    "\122\221\123\226\152\217\175\220\202\232\203\231\204" +
    "\233\205\222\207\174\001\002\000\024\122\221\123\226" +
    "\152\217\175\220\202\232\203\231\204\233\205\222\207" +
    "\174\001\002\000\024\122\221\123\226\152\217\175\220" +
    "\202\232\203\231\204\233\205\222\207\174\001\002\000" +
    "\024\122\221\123\226\152\217\175\220\202\232\203\231" +
    "\204\233\205\222\207\174\001\002\000\024\122\221\123" +
    "\226\152\217\175\220\202\232\203\231\204\233\205\222" +
    "\207\174\001\002\000\024\122\221\123\226\152\217\175" +
    "\220\202\232\203\231\204\233\205\222\207\174\001\002" +
    "\000\024\122\221\123\226\152\217\175\220\202\232\203" +
    "\231\204\233\205\222\207\174\001\002\000\024\122\221" +
    "\123\226\152\217\175\220\202\232\203\231\204\233\205" +
    "\222\207\174\001\002\000\036\153\uff4d\164\uff4d\165\uff4d" +
    "\166\uff4d\167\uff4d\170\uff4d\171\uff4d\172\uff4d\173\uff4d\174" +
    "\237\176\uff4d\177\uff4d\200\uff4d\201\uff4d\001\002\000\036" +
    "\153\uff53\164\uff53\165\uff53\166\uff53\167\uff53\170\uff53\171" +
    "\uff53\172\uff53\173\251\174\237\176\uff53\177\uff53\200\uff53" +
    "\201\uff53\001\002\000\036\153\uff52\164\uff52\165\uff52\166" +
    "\uff52\167\uff52\170\uff52\171\uff52\172\uff52\173\251\174\237" +
    "\176\uff52\177\uff52\200\uff52\201\uff52\001\002\000\036\153" +
    "\uff50\164\uff50\165\uff50\166\uff50\167\uff50\170\uff50\171\uff50" +
    "\172\uff50\173\251\174\237\176\uff50\177\uff50\200\uff50\201" +
    "\uff50\001\002\000\036\153\uff5b\164\uff5b\165\240\166\250" +
    "\167\243\170\247\171\242\172\246\173\251\174\237\176" +
    "\uff5b\177\uff5b\200\uff5b\201\uff5b\001\002\000\036\153\uff5d" +
    "\164\uff5d\165\240\166\250\167\243\170\247\171\242\172" +
    "\246\173\251\174\237\176\uff5d\177\uff5d\200\245\201\241" +
    "\001\002\000\036\153\uff51\164\uff51\165\uff51\166\uff51\167" +
    "\uff51\170\uff51\171\uff51\172\uff51\173\251\174\237\176\uff51" +
    "\177\uff51\200\uff51\201\uff51\001\002\000\036\153\uff4f\164" +
    "\uff4f\165\uff4f\166\uff4f\167\uff4f\170\uff4f\171\uff4f\172\uff4f" +
    "\173\251\174\237\176\uff4f\177\uff4f\200\uff4f\201\uff4f\001" +
    "\002\000\036\153\uff5a\164\uff5a\165\240\166\250\167\243" +
    "\170\247\171\242\172\246\173\251\174\237\176\uff5a\177" +
    "\uff5a\200\uff5a\201\uff5a\001\002\000\036\153\uff54\164\uff54" +
    "\165\uff54\166\uff54\167\uff54\170\uff54\171\uff54\172\uff54\173" +
    "\251\174\237\176\uff54\177\uff54\200\uff54\201\uff54\001\002" +
    "\000\036\153\uff4e\164\uff4e\165\uff4e\166\uff4e\167\uff4e\170" +
    "\uff4e\171\uff4e\172\uff4e\173\uff4e\174\uff4e\176\uff4e\177\uff4e" +
    "\200\uff4e\201\uff4e\001\002\000\036\153\uff5c\164\uff5c\165" +
    "\240\166\250\167\243\170\247\171\242\172\246\173\251" +
    "\174\237\176\uff5c\177\uff5c\200\245\201\241\001\002\000" +
    "\034\153\267\165\240\166\250\167\243\170\247\171\242" +
    "\172\246\173\251\174\237\176\244\177\236\200\245\201" +
    "\241\001\002\000\036\153\uff59\164\uff59\165\272\166\302" +
    "\167\275\170\301\171\274\172\300\173\303\174\270\176" +
    "\276\177\271\200\277\201\273\001\002\000\024\122\221" +
    "\123\226\152\217\175\220\202\232\203\231\204\233\205" +
    "\222\207\174\001\002\000\024\122\221\123\226\152\217" +
    "\175\220\202\232\203\231\204\233\205\222\207\174\001" +
    "\002\000\024\122\221\123\226\152\217\175\220\202\232" +
    "\203\231\204\233\205\222\207\174\001\002\000\024\122" +
    "\221\123\226\152\217\175\220\202\232\203\231\204\233" +
    "\205\222\207\174\001\002\000\024\122\221\123\226\152" +
    "\217\175\220\202\232\203\231\204\233\205\222\207\174" +
    "\001\002\000\024\122\221\123\226\152\217\175\220\202" +
    "\232\203\231\204\233\205\222\207\174\001\002\000\024" +
    "\122\221\123\226\152\217\175\220\202\232\203\231\204" +
    "\233\205\222\207\174\001\002\000\024\122\221\123\226" +
    "\152\217\175\220\202\232\203\231\204\233\205\222\207" +
    "\174\001\002\000\024\122\221\123\226\152\217\175\220" +
    "\202\232\203\231\204\233\205\222\207\174\001\002\000" +
    "\024\122\221\123\226\152\217\175\220\202\232\203\231" +
    "\204\233\205\222\207\174\001\002\000\024\122\221\123" +
    "\226\152\217\175\220\202\232\203\231\204\233\205\222" +
    "\207\174\001\002\000\024\122\221\123\226\152\217\175" +
    "\220\202\232\203\231\204\233\205\222\207\174\001\002" +
    "\000\036\153\uff45\164\uff45\165\uff45\166\uff45\167\uff45\170" +
    "\uff45\171\uff45\172\uff45\173\uff45\174\237\176\uff45\177\uff45" +
    "\200\uff45\201\uff45\001\002\000\036\153\uff4b\164\uff4b\165" +
    "\uff4b\166\uff4b\167\uff4b\170\uff4b\171\uff4b\172\uff4b\173\251" +
    "\174\237\176\uff4b\177\uff4b\200\uff4b\201\uff4b\001\002\000" +
    "\036\153\uff4a\164\uff4a\165\uff4a\166\uff4a\167\uff4a\170\uff4a" +
    "\171\uff4a\172\uff4a\173\251\174\237\176\uff4a\177\uff4a\200" +
    "\uff4a\201\uff4a\001\002\000\036\153\uff48\164\uff48\165\uff48" +
    "\166\uff48\167\uff48\170\uff48\171\uff48\172\uff48\173\251\174" +
    "\237\176\uff48\177\uff48\200\uff48\201\uff48\001\002\000\036" +
    "\153\uff56\164\uff56\165\240\166\250\167\243\170\247\171" +
    "\242\172\246\173\251\174\237\176\uff56\177\uff56\200\uff56" +
    "\201\uff56\001\002\000\036\153\uff58\164\uff58\165\240\166" +
    "\250\167\243\170\247\171\242\172\246\173\251\174\237" +
    "\176\uff58\177\uff58\200\245\201\241\001\002\000\036\153" +
    "\uff49\164\uff49\165\uff49\166\uff49\167\uff49\170\uff49\171\uff49" +
    "\172\uff49\173\251\174\237\176\uff49\177\uff49\200\uff49\201" +
    "\uff49\001\002\000\036\153\uff47\164\uff47\165\uff47\166\uff47" +
    "\167\uff47\170\uff47\171\uff47\172\uff47\173\251\174\237\176" +
    "\uff47\177\uff47\200\uff47\201\uff47\001\002\000\036\153\uff55" +
    "\164\uff55\165\240\166\250\167\243\170\247\171\242\172" +
    "\246\173\251\174\237\176\uff55\177\uff55\200\uff55\201\uff55" +
    "\001\002\000\036\153\uff4c\164\uff4c\165\uff4c\166\uff4c\167" +
    "\uff4c\170\uff4c\171\uff4c\172\uff4c\173\251\174\237\176\uff4c" +
    "\177\uff4c\200\uff4c\201\uff4c\001\002\000\036\153\uff57\164" +
    "\uff57\165\240\166\250\167\243\170\247\171\242\172\246" +
    "\173\251\174\237\176\uff57\177\uff57\200\245\201\241\001" +
    "\002\000\036\153\uff46\164\uff46\165\uff46\166\uff46\167\uff46" +
    "\170\uff46\171\uff46\172\uff46\173\uff46\174\uff46\176\uff46\177" +
    "\uff46\200\uff46\201\uff46\001\002\000\020\115\uff6d\116\uff6d" +
    "\117\uff6d\120\uff6d\121\uff6d\151\uff6d\207\uff6d\001\002\000" +
    "\010\154\uff64\160\uff64\164\uff64\001\002\000\010\154\211" +
    "\160\324\164\323\001\002\000\020\115\uff6c\116\uff6c\117" +
    "\uff6c\120\uff6c\121\uff6c\151\uff6c\207\uff6c\001\002\000\024" +
    "\122\221\123\226\152\217\175\220\202\232\203\231\204" +
    "\233\205\222\207\174\001\002\000\034\164\326\165\240" +
    "\166\250\167\243\170\247\171\242\172\246\173\251\174" +
    "\237\176\244\177\236\200\245\201\241\001\002\000\020" +
    "\115\uff6e\116\uff6e\117\uff6e\120\uff6e\121\uff6e\151\uff6e\207" +
    "\uff6e\001\002\000\020\115\uff73\116\uff73\117\uff73\120\uff73" +
    "\121\uff73\151\uff73\207\uff73\001\002\000\010\113\uff74\167" +
    "\uff74\206\uff74\001\002\000\024\122\221\123\226\152\217" +
    "\175\220\202\232\203\231\204\233\205\222\207\174\001" +
    "\002\000\034\164\333\165\240\166\250\167\243\170\247" +
    "\171\242\172\246\173\251\174\237\176\244\177\236\200" +
    "\245\201\241\001\002\000\020\115\uff6a\116\uff6a\117\uff6a" +
    "\120\uff6a\121\uff6a\151\uff6a\207\uff6a\001\002\000\010\113" +
    "\uff77\167\uff77\206\uff77\001\002\000\014\027\062\031\070" +
    "\032\064\033\065\035\066\001\002\000\006\150\335\170" +
    "\340\001\002\000\006\150\uffdb\170\uffdb\001\002\000\006" +
    "\167\uffdd\210\016\001\002\000\006\150\uffdc\170\uffdc\001" +
    "\002\000\004\167\343\001\002\000\004\157\344\001\002" +
    "\000\004\011\345\001\002\000\004\170\uffef\001\002\000" +
    "\004\151\uffd8\001\002\000\004\151\uffd9\001\002\000\004" +
    "\151\uffd7\001\002\000\004\151\352\001\002\000\006\150" +
    "\uffda\170\uffda\001\002\000\016\027\062\031\070\032\064" +
    "\033\065\034\366\035\066\001\002\000\006\150\353\170" +
    "\356\001\002\000\006\150\uffd5\170\uffd5\001\002\000\006" +
    "\167\uffdd\210\016\001\002\000\006\150\uffd6\170\uffd6\001" +
    "\002\000\004\167\361\001\002\000\004\157\362\001\002" +
    "\000\004\012\363\001\002\000\004\170\uffee\001\002\000" +
    "\004\151\u0101\001\002\000\004\151\uffd1\001\002\000\004" +
    "\160\371\001\002\000\004\151\uffd0\001\002\000\004\151" +
    "\uffd2\001\002\000\004\161\372\001\002\000\012\077\373" +
    "\100\377\101\374\102\376\001\002\000\004\161\uff7d\001" +
    "\002\000\004\161\uff7b\001\002\000\004\161\u0100\001\002" +
    "\000\004\161\uff7a\001\002\000\004\161\uff7c\001\002\000" +
    "\004\151\uffd3\001\002\000\006\150\uffd4\170\uffd4\001\002" +
    "\000\016\026\u010d\027\062\031\070\032\064\033\065\035" +
    "\066\001\002\000\006\150\uffaf\170\uffaf\001\002\000\006" +
    "\150\u0102\170\u0106\001\002\000\006\150\uffb0\170\uffb0\001" +
    "\002\000\006\167\uffdd\210\016\001\002\000\004\167\u0108" +
    "\001\002\000\004\157\u0109\001\002\000\004\021\u010a\001" +
    "\002\000\004\170\uffea\001\002\000\004\151\u0114\001\002" +
    "\000\004\151\uffab\001\002\000\004\160\u0110\001\002\000" +
    "\004\151\uffac\001\002\000\004\151\uffaa\001\002\000\004" +
    "\161\u0111\001\002\000\042\047\150\050\135\051\132\052" +
    "\147\053\142\054\141\055\151\056\145\057\133\060\137" +
    "\061\131\062\144\063\140\064\143\065\134\106\146\001" +
    "\002\000\004\161\u0113\001\002\000\004\151\uffad\001\002" +
    "\000\006\150\uffae\170\uffae\001\002\000\006\167\uffdd\210" +
    "\016\001\002\000\004\167\ufff0\001\002\000\016\031\070" +
    "\032\064\033\065\035\066\037\u0122\040\u0124\001\002\000" +
    "\006\150\u0117\170\u011a\001\002\000\006\150\uffce\170\uffce" +
    "\001\002\000\006\167\uffdd\210\016\001\002\000\006\150" +
    "\uffcf\170\uffcf\001\002\000\004\167\u011d\001\002\000\004" +
    "\157\u011e\001\002\000\004\013\u011f\001\002\000\004\170" +
    "\uffed\001\002\000\004\151\uffca\001\002\000\004\151\u012d" +
    "\001\002\000\004\160\u0129\001\002\000\004\151\uffc9\001" +
    "\002\000\004\160\u0125\001\002\000\004\161\u0126\001\002" +
    "\000\004\202\u0127\001\002\000\004\161\u0128\001\002\000" +
    "\004\151\uffcc\001\002\000\004\161\u012a\001\002\000\004" +
    "\202\u012b\001\002\000\004\161\u012c\001\002\000\004\151" +
    "\uffcb\001\002\000\006\150\uffcd\170\uffcd\001\002\000\004" +
    "\167\u0130\001\002\000\004\167\u0133\001\002\000\032\011" +
    "\046\012\045\013\042\014\035\016\034\017\037\020\043" +
    "\021\044\022\050\023\033\024\047\157\u0131\001\002\000" +
    "\004\016\u0132\001\002\000\004\170\uffe7\001\002\000\032" +
    "\011\046\012\045\013\042\014\035\016\034\017\037\020" +
    "\043\021\044\022\050\023\033\024\047\157\u0135\001\002" +
    "\000\004\167\ufff3\001\002\000\004\016\u0136\001\002\000" +
    "\004\170\uffe6\001\002\000\004\167\u0138\001\002\000\004" +
    "\015\u013e\001\002\000\004\167\u013b\001\002\000\004\167" +
    "\uffe1\001\002\000\006\015\u013e\157\u013d\001\002\000\004" +
    "\167\uffe2\001\002\000\004\014\u0146\001\002\000\004\170" +
    "\u013f\001\002\000\006\167\uffdd\210\016\001\002\000\004" +
    "\167\u0141\001\002\000\004\157\u0142\001\002\000\004\015" +
    "\u0143\001\002\000\004\170\u0144\001\002\000\006\167\uffdd" +
    "\210\016\001\002\000\004\167\uffe0\001\002\000\004\170" +
    "\uffec\001\002\000\006\150\uffb9\170\uffb9\001\002\000\014" +
    "\035\066\042\u0154\043\u0152\044\u0155\045\u0153\001\002\000" +
    "\006\150\u0148\170\u014b\001\002\000\006\150\uffba\170\uffba" +
    "\001\002\000\006\167\uffdd\210\016\001\002\000\004\167" +
    "\u014d\001\002\000\004\157\u014e\001\002\000\004\017\u014f" +
    "\001\002\000\004\170\uffeb\001\002\000\004\151\uffb3\001" +
    "\002\000\004\151\u0168\001\002\000\004\160\u0164\001\002" +
    "\000\004\160\u0160\001\002\000\004\160\u015c\001\002\000" +
    "\004\160\u0156\001\002\000\004\161\u0157\001\002\000\006" +
    "\107\u015a\110\u0158\001\002\000\004\161\uffb1\001\002\000" +
    "\004\161\u015b\001\002\000\004\161\uffb2\001\002\000\004" +
    "\151\uffb6\001\002\000\004\161\u015d\001\002\000\004\105" +
    "\u015e\001\002\000\004\161\u015f\001\002\000\004\151\uffb4" +
    "\001\002\000\004\161\u0161\001\002\000\004\112\u0162\001" +
    "\002\000\004\161\u0163\001\002\000\004\151\uffb7\001\002" +
    "\000\004\161\u0165\001\002\000\006\107\u015a\110\u0158\001" +
    "\002\000\004\161\u0167\001\002\000\004\151\uffb5\001\002" +
    "\000\006\150\uffb8\170\uffb8\001\002\000\006\167\uffdd\210" +
    "\016\001\002\000\004\167\ufff1\001\002\000\014\027\062" +
    "\031\070\032\064\033\065\035\066\001\002\000\006\150" +
    "\uffc7\170\uffc7\001\002\000\006\150\u016b\170\u016e\001\002" +
    "\000\006\167\uffe4\210\uffe4\001\002\000\006\150\uffc8\170" +
    "\uffc8\001\002\000\004\151\u0174\001\002\000\004\151\uffc4" +
    "\001\002\000\004\151\uffc5\001\002\000\004\151\uffc3\001" +
    "\002\000\006\150\uffc6\170\uffc6\001\002\000\006\150\u0176" +
    "\170\u0187\001\002\000\020\026\u017a\027\062\031\070\032" +
    "\064\033\065\035\066\041\u017d\001\002\000\006\150\uffc1" +
    "\170\uffc1\001\002\000\004\151\u0186\001\002\000\004\151" +
    "\uffbc\001\002\000\004\160\u0182\001\002\000\004\151\uffbd" +
    "\001\002\000\004\151\uffbb\001\002\000\004\160\u017e\001" +
    "\002\000\004\161\u017f\001\002\000\002\001\002\000\004" +
    "\161\u0181\001\002\000\004\151\uffbe\001\002\000\004\161" +
    "\u0183\001\002\000\042\047\150\050\135\051\132\052\147" +
    "\053\142\054\141\055\151\056\145\057\133\060\137\061" +
    "\131\062\144\063\140\064\143\065\134\106\146\001\002" +
    "\000\004\161\u0185\001\002\000\004\151\uffbf\001\002\000" +
    "\006\150\uffc0\170\uffc0\001\002\000\006\167\uffe3\210\uffe3" +
    "\001\002\000\006\150\uffc2\170\uffc2\001\002\000\006\150" +
    "\uffa2\170\uffa2\001\002\000\014\027\062\031\070\032\064" +
    "\033\065\035\066\001\002\000\006\150\u018a\170\u018d\001" +
    "\002\000\006\150\uffa3\170\uffa3\001\002\000\006\167\uffdd" +
    "\210\016\001\002\000\004\167\u018f\001\002\000\004\157" +
    "\u0190\001\002\000\004\023\u0191\001\002\000\004\170\uffe8" +
    "\001\002\000\004\151\uff9f\001\002\000\004\151\u0196\001" +
    "\002\000\004\151\uffa0\001\002\000\004\151\uff9e\001\002" +
    "\000\006\150\uffa1\170\uffa1\001\002\000\032\011\046\012" +
    "\045\013\042\014\035\016\034\017\037\020\043\021\044" +
    "\022\050\023\033\024\047\157\u0198\001\002\000\004\010" +
    "\u0199\001\002\000\004\170\u019a\001\002\000\006\167\uffdd" +
    "\210\016\001\002\000\004\167\ufff4\001\002\000\004\160" +
    "\u019d\001\002\000\004\161\u019e\001\002\000\042\047\150" +
    "\050\135\051\132\052\147\053\142\054\141\055\151\056" +
    "\145\057\133\060\137\061\131\062\144\063\140\064\143" +
    "\065\134\106\146\001\002\000\004\161\u01a0\001\002\000" +
    "\004\151\u01a1\001\002\000\004\170\uffdf\001\002\000\004" +
    "\157\u01a3\001\002\000\004\004\u01a4\001\002\000\004\170" +
    "\u01a5\001\002\000\006\002\uffdd\210\016\001\002\000\004" +
    "\002\001\001\002\000\004\170\u01a8\001\002\000\006\167" +
    "\uffdd\210\016\001\002\000\004\167\u01aa\001\002\000\006" +
    "\006\u01c2\007\u01b0\001\002\000\004\167\u01ca\001\002\000" +
    "\004\167\u01c0\001\002\000\004\167\u01ae\001\002\000\004" +
    "\007\u01b0\001\002\000\004\167\ufff8\001\002\000\004\150" +
    "\u01b2\001\002\000\004\170\u01b9\001\002\000\004\025\u01b3" +
    "\001\002\000\004\160\u01b4\001\002\000\004\161\u01b5\001" +
    "\002\000\004\105\u01b6\001\002\000\004\161\u01b7\001\002" +
    "\000\004\151\u01b8\001\002\000\004\170\ufff5\001\002\000" +
    "\006\167\uffdd\210\016\001\002\000\004\167\u01bb\001\002" +
    "\000\004\157\u01bc\001\002\000\004\007\u01bd\001\002\000" +
    "\004\170\u01be\001\002\000\006\167\uffdd\210\016\001\002" +
    "\000\004\167\ufff6\001\002\000\004\006\u01c2\001\002\000" +
    "\004\167\ufff9\001\002\000\004\170\u01c3\001\002\000\006" +
    "\167\uffdd\210\016\001\002\000\004\167\u01c5\001\002\000" +
    "\004\157\u01c6\001\002\000\004\006\u01c7\001\002\000\004" +
    "\170\u01c8\001\002\000\006\167\uffdd\210\016\001\002\000" +
    "\004\167\ufff7\001\002\000\004\157\u01cb\001\002\000\004" +
    "\005\u01cc\001\002\000\004\170\u01cd\001\002\000\006\167" +
    "\uffdd\210\016\001\002\000\004\167\ufffa\001\002\000\004" +
    "\151\u01d6\001\002\000\004\151\ufffb\001\002\000\004\160" +
    "\u01d2\001\002\000\004\161\u01d3\001\002\000\004\112\u01d4" +
    "\001\002\000\004\161\u01d5\001\002\000\004\151\ufffc\001" +
    "\002\000\006\150\ufffd\170\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01d4\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\011\015\007" +
    "\001\001\000\002\001\001\000\006\016\u01ce\067\u01cf\001" +
    "\001\000\004\015\012\001\001\000\002\001\001\000\004" +
    "\061\014\001\001\000\004\057\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\026\001\001" +
    "\000\006\006\027\007\031\001\001\000\004\007\u0133\001" +
    "\001\000\010\010\035\033\037\037\040\001\001\000\002" +
    "\001\001\000\006\051\u018a\052\u0188\001\001\000\006\034" +
    "\u0174\035\u0176\001\001\000\006\030\u016c\031\u016b\001\001" +
    "\000\002\001\001\000\006\040\u0148\041\u0146\001\001\000" +
    "\004\061\u0136\001\001\000\004\061\u012d\001\001\000\006" +
    "\025\u0117\026\u0118\001\001\000\002\001\001\000\006\043" +
    "\u0103\044\u0102\001\001\000\006\022\353\023\354\001\001" +
    "\000\006\017\335\020\336\001\001\000\002\001\001\000" +
    "\006\046\052\047\051\001\001\000\012\013\070\050\071" +
    "\056\066\067\062\001\001\000\002\001\001\000\004\047" +
    "\054\001\001\000\004\061\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\071\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\064\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\072\156\073\155\001\001" +
    "\000\004\074\333\001\001\000\004\074\163\001\001\000" +
    "\002\001\001\000\004\073\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\075\176\076\167\077\200\100\203\102\175\103\201\104" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\076\326\077\200\100\203" +
    "\102\175\103\201\104\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\101\207\102\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\101\321\102\205\001\001\000\002\001\001" +
    "\000\004\102\320\001\001\000\002\001\001\000\024\102" +
    "\226\105\214\106\233\107\224\110\213\111\215\112\227" +
    "\113\222\114\223\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\102\226\105\265\106\233" +
    "\107\224\110\213\111\215\112\227\113\222\114\223\001" +
    "\001\000\024\102\226\105\234\106\233\107\224\110\213" +
    "\111\215\112\227\113\222\114\223\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\102" +
    "\226\105\264\106\233\107\224\110\213\111\215\112\227" +
    "\113\222\114\223\001\001\000\024\102\226\105\263\106" +
    "\233\107\224\110\213\111\215\112\227\113\222\114\223" +
    "\001\001\000\024\102\226\105\262\106\233\107\224\110" +
    "\213\111\215\112\227\113\222\114\223\001\001\000\024" +
    "\102\226\105\261\106\233\107\224\110\213\111\215\112" +
    "\227\113\222\114\223\001\001\000\024\102\226\105\260" +
    "\106\233\107\224\110\213\111\215\112\227\113\222\114" +
    "\223\001\001\000\024\102\226\105\257\106\233\107\224" +
    "\110\213\111\215\112\227\113\222\114\223\001\001\000" +
    "\024\102\226\105\256\106\233\107\224\110\213\111\215" +
    "\112\227\113\222\114\223\001\001\000\024\102\226\105" +
    "\255\106\233\107\224\110\213\111\215\112\227\113\222" +
    "\114\223\001\001\000\024\102\226\105\254\106\233\107" +
    "\224\110\213\111\215\112\227\113\222\114\223\001\001" +
    "\000\024\102\226\105\253\106\233\107\224\110\213\111" +
    "\215\112\227\113\222\114\223\001\001\000\024\102\226" +
    "\105\252\106\233\107\224\110\213\111\215\112\227\113" +
    "\222\114\223\001\001\000\024\102\226\105\251\106\233" +
    "\107\224\110\213\111\215\112\227\113\222\114\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\102\226\105\316\106\233" +
    "\107\224\110\213\111\215\112\227\113\222\114\223\001" +
    "\001\000\024\102\226\105\315\106\233\107\224\110\213" +
    "\111\215\112\227\113\222\114\223\001\001\000\024\102" +
    "\226\105\314\106\233\107\224\110\213\111\215\112\227" +
    "\113\222\114\223\001\001\000\024\102\226\105\313\106" +
    "\233\107\224\110\213\111\215\112\227\113\222\114\223" +
    "\001\001\000\024\102\226\105\312\106\233\107\224\110" +
    "\213\111\215\112\227\113\222\114\223\001\001\000\024" +
    "\102\226\105\311\106\233\107\224\110\213\111\215\112" +
    "\227\113\222\114\223\001\001\000\024\102\226\105\310" +
    "\106\233\107\224\110\213\111\215\112\227\113\222\114" +
    "\223\001\001\000\024\102\226\105\307\106\233\107\224" +
    "\110\213\111\215\112\227\113\222\114\223\001\001\000" +
    "\024\102\226\105\306\106\233\107\224\110\213\111\215" +
    "\112\227\113\222\114\223\001\001\000\024\102\226\105" +
    "\305\106\233\107\224\110\213\111\215\112\227\113\222" +
    "\114\223\001\001\000\024\102\226\105\304\106\233\107" +
    "\224\110\213\111\215\112\227\113\222\114\223\001\001" +
    "\000\024\102\226\105\303\106\233\107\224\110\213\111" +
    "\215\112\227\113\222\114\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\102\226\105" +
    "\324\106\233\107\224\110\213\111\215\112\227\113\222" +
    "\114\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\102\226\105\331" +
    "\106\233\107\224\110\213\111\215\112\227\113\222\114" +
    "\223\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\013\347\021\350\056\346\067\345\001" +
    "\001\000\004\020\340\001\001\000\002\001\001\000\004" +
    "\061\341\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\366\024\363\056\367" +
    "\067\364\001\001\000\004\023\356\001\001\000\002\001" +
    "\001\000\004\061\357\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\065\374\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\u010e\045\u010a" +
    "\056\u010d\067\u010b\001\001\000\002\001\001\000\004\044" +
    "\u0104\001\001\000\002\001\001\000\004\061\u0106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\062\u0111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\u0115\001\001\000" +
    "\002\001\001\000\010\013\u0122\027\u0120\067\u011f\001\001" +
    "\000\004\026\u011a\001\001\000\002\001\001\000\004\061" +
    "\u011b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\u012e\007\031\001\001\000\004\007\u0133" +
    "\001\001\000\010\010\035\033\037\037\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\035\033\037" +
    "\037\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\u0138\012\u0139\001\001\000\002" +
    "\001\001\000\004\012\u013b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\061\u013f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\u0144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\042\u0150\067\u014f\001\001\000\004" +
    "\041\u0149\001\001\000\002\001\001\000\004\061\u014b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\070\u0158\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\070\u0165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\u0169\001\001\000\002\001" +
    "\001\000\012\013\u0172\032\u016f\056\u0171\067\u0170\001\001" +
    "\000\002\001\001\000\004\031\u016e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\u0187\001\001\000\012\013\u017b\036\u0177\056\u017a" +
    "\067\u0178\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\066" +
    "\u017f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\062\u0183\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\u0194\053\u0192\056" +
    "\u0193\067\u0191\001\001\000\004\052\u018b\001\001\000\002" +
    "\001\001\000\004\061\u018d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\035\033\037\037\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\061" +
    "\u019a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\062\u019e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\u01a5\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\u01a8\001\001" +
    "\000\010\003\u01aa\004\u01ab\005\u01ac\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\u01c0\001\001\000\004" +
    "\004\u01ae\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\u01b0\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\u01b9\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\u01be\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\u01c3\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\061\u01c8\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\u01cd\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private final List<ErrorAnalisis> errores = new ArrayList();
    private List<Parametro> parametros = new ArrayList();
    private List<Tag> etiquetas = new ArrayList();
    private List<Tag> etiquetasHead = new ArrayList();
    private Stack<List<Tag>> pilaEtiquetas = new Stack();
    private Stack<List<Parametro>> pilaParams = new Stack();
    private Tag gcicTag;

    public List<ErrorAnalisis> getErrores() {
        return this.errores;
    }

    public Tag getGCIC() {
        return this.gcicTag;
    }

    public void syntax_error(Symbol s) {
        Token t = (Token) s.value;
        StringBuilder descripcion = new StringBuilder("Se esperaba: ");
        expected_token_ids().forEach(x -> descripcion.append(symbl_name_from_id(x)).append(", "));
        errores.add(new ErrorAnalisis(t.getLexema(), t.getLinea(), t.getColumna(), TipoError.SINTACTICO, descripcion.toString()));
        System.out.println(t.getLexema() + ", linea: " + t.getLinea() + ", col: " + t.getColumna() + ", descripcion: " + descripcion.toString());
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        Token t = (Token) cur_token.value;
        System.out.println("Error irrecuperable " + t.getLexema());
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // gcic ::= LESS_THAN C_GCIC paramsGCIC GREATER_THAN textTag head body LESS_THAN SLASH C_GCIC GREATER_THAN textTag 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Tag h = (Tag)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Tag b = (Tag)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
        gcicTag = new GCIC(h, b, parametros);
        parametros = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("gcic",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= gcic EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // paramsGCIC ::= paramsGCIC paramGCIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsGCIC",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // paramsGCIC ::= paramGCIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsGCIC",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // paramGCIC ::= OPEN_BRACKET optionParamGCIC CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramGCIC",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // optionParamGCIC ::= NAME ASSIGN QOUTE_MARK NAME_PARAM QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamGCIC",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // optionParamGCIC ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamGCIC",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // head ::= LESS_THAN C_HEAD GREATER_THAN textTag headTags LESS_THAN SLASH C_HEAD GREATER_THAN textTag 
            {
              Tag RESULT =null;
		
        RESULT = new Head(etiquetasHead);
        etiquetasHead = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("head",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // headTags ::= link title 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("headTags",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // headTags ::= title link 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("headTags",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // title ::= LESS_THAN C_TITLE GREATER_THAN textTag LESS_THAN SLASH C_TITLE GREATER_THAN textTag 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
        etiquetasHead.add(new Title(t.trim()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("title",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // link ::= LESS_THAN C_LINK href GREATER_THAN textTag LESS_THAN SLASH C_LINK GREATER_THAN textTag 
            {
              Object RESULT =null;
		
        etiquetasHead.add(new Link(parametros));
        parametros = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("link",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // href ::= OPEN_BRACKET HREF ASSIGN QOUTE_MARK URL QOUTE_MARK CLOSE_BRACKET 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("href",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // body ::= LESS_THAN C_BODY background GREATER_THAN textTag bodyTags LESS_THAN SLASH C_BODY GREATER_THAN textTag 
            {
              Tag RESULT =null;
		
        RESULT = new Body(etiquetas, parametros);
        parametros = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bodyTags ::= bodyTags bodyTag 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bodyTags",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bodyTags ::= bodyTag 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bodyTags",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bodyTag ::= LESS_THAN nameTagBody GREATER_THAN textTag 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bodyTag",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bodyTag ::= LESS_THAN C_BR GREATER_THAN textTag 
            {
              Object RESULT =null;
		
        etiquetas.add(new Br());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bodyTag",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // nameTagBody ::= C_SPAM paramsSPAM GREATER_THAN textTag LESS_THAN SLASH C_SPAM 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            etiquetas.add(new Span(t, parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // nameTagBody ::= C_INPUT paramsINPUT GREATER_THAN textTag LESS_THAN SLASH C_INPUT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            etiquetas.add(new Input(t, parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // nameTagBody ::= C_TEXTAREA paramsTEXTA GREATER_THAN textTag LESS_THAN SLASH C_TEXTAREA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            etiquetas.add(new TextArea(t, parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // nameTagBody ::= inicioSelect textTag optionsTag LESS_THAN SLASH C_SELECT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
            Select sel = new Select(etiquetas, t, parametros);
            parametros = new ArrayList();
            etiquetas = pilaEtiquetas.pop();
            etiquetas.add(sel);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // nameTagBody ::= C_IMG paramsIMG GREATER_THAN textTag LESS_THAN SLASH C_IMG 
            {
              Object RESULT =null;
		
            etiquetas.add(new Img(parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // nameTagBody ::= C_BUTTON paramsBTN GREATER_THAN textTag LESS_THAN SLASH C_BUTTON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            etiquetas.add(new Button(t, parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // nameTagBody ::= C_H1 paramsH1 GREATER_THAN textTag LESS_THAN SLASH C_H1 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            etiquetas.add(new H1(t, parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // nameTagBody ::= C_P paramsP GREATER_THAN textTag LESS_THAN SLASH C_P 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            etiquetas.add(new P(t, parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // nameTagBody ::= inicioDIV textTag LESS_THAN SLASH C_DIV 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            etiquetas = pilaEtiquetas.pop();
            etiquetas.add(new Div(null, t, parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // nameTagBody ::= inicioDIV textTag bodyTags LESS_THAN SLASH C_DIV 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
            parametros = pilaParams.pop();
            Div div = new Div(etiquetas, t, parametros);
            parametros = new ArrayList();
            etiquetas = pilaEtiquetas.pop();
            etiquetas.add(div);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // nameTagBody ::= C_SCRIPTING GREATER_THAN procesos LESS_THAN DIVIDE C_SCRIPTING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // inicioSelect ::= C_SELECT paramsSEL GREATER_THAN 
            {
              Object RESULT =null;
		
        pilaEtiquetas.push(etiquetas);
        etiquetas = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicioSelect",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // inicioDIV ::= C_DIV paramsDIV GREATER_THAN 
            {
              Object RESULT =null;
		
        pilaEtiquetas.push(etiquetas);
        etiquetas = new ArrayList();
        pilaParams.push(parametros);
        parametros = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicioDIV",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // optionsTag ::= optionsTag optionTag 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionsTag",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // optionsTag ::= optionTag 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionsTag",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // optionTag ::= LESS_THAN C_OPTION GREATER_THAN textTag LESS_THAN SLASH C_OPTION GREATER_THAN textTag 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
        etiquetas.add(new Option(o));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionTag",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // background ::= OPEN_BRACKET BACKGROUND ASSIGN QOUTE_MARK color QOUTE_MARK CLOSE_BRACKET 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("background",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // textTag ::= TEXT_TAG 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("textTag",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // textTag ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("textTag",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // paramsSPAM ::= paramsSPAM paramSPAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsSPAM",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // paramsSPAM ::= paramSPAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsSPAM",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // paramSPAM ::= OPEN_BRACKET optionParamSPAM CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramSPAM",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // optionParamSPAM ::= paramColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamSPAM",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // optionParamSPAM ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamSPAM",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // optionParamSPAM ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamSPAM",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // paramsINPUT ::= paramsINPUT paramINPUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsINPUT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // paramsINPUT ::= paramINPUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsINPUT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // paramINPUT ::= OPEN_BRACKET optionParamINPUT CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramINPUT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // optionParamINPUT ::= TYPE ASSIGN QOUTE_MARK type QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamINPUT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // optionParamINPUT ::= paramColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamINPUT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // optionParamINPUT ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamINPUT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // optionParamINPUT ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamINPUT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // paramsTEXTA ::= paramsTEXTA paramTEXTA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsTEXTA",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // paramsTEXTA ::= paramTEXTA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsTEXTA",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // paramTEXTA ::= OPEN_BRACKET optionParamTEXTA CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramTEXTA",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // optionParamTEXTA ::= ROWS ASSIGN QOUTE_MARK ENTERO QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamTEXTA",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // optionParamTEXTA ::= COLS ASSIGN QOUTE_MARK ENTERO QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamTEXTA",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // optionParamTEXTA ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamTEXTA",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // optionParamTEXTA ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamTEXTA",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // paramsSEL ::= paramsSEL paramSEL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsSEL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // paramsSEL ::= paramSEL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsSEL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // paramSEL ::= OPEN_BRACKET optionParamSEL CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramSEL",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // optionParamSEL ::= paramColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamSEL",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // optionParamSEL ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamSEL",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // optionParamSEL ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamSEL",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // paramsDIV ::= paramsDIV paramDIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsDIV",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // paramsDIV ::= paramDIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsDIV",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // paramDIV ::= OPEN_BRACKET optionParamDIV CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramDIV",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // optionParamDIV ::= BACKGROUND ASSIGN QOUTE_MARK color QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamDIV",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // optionParamDIV ::= CLASS ASSIGN QOUTE_MARK clase QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamDIV",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // optionParamDIV ::= paramColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamDIV",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // optionParamDIV ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamDIV",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // optionParamDIV ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamDIV",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // paramsIMG ::= paramsIMG paramIMG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsIMG",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // paramsIMG ::= paramIMG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsIMG",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // paramIMG ::= OPEN_BRACKET optionParamIMG CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramIMG",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // optionParamIMG ::= ALT ASSIGN QOUTE_MARK NAME_PARAM QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamIMG",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // optionParamIMG ::= HEIGHT ASSIGN QOUTE_MARK size QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamIMG",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // optionParamIMG ::= WIDTH ASSIGN QOUTE_MARK size QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamIMG",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // optionParamIMG ::= SRC ASSIGN QOUTE_MARK URL QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamIMG",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // optionParamIMG ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamIMG",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // size ::= SIZE 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = s.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("size",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // size ::= WH_VAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = s.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("size",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // paramsBTN ::= paramsBTN paramBTN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsBTN",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // paramsBTN ::= paramBTN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsBTN",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // paramBTN ::= OPEN_BRACKET optionParamBTN CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramBTN",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // optionParamBTN ::= BACKGROUND ASSIGN QOUTE_MARK color QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamBTN",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // optionParamBTN ::= paramColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamBTN",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // optionParamBTN ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamBTN",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // optionParamBTN ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamBTN",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // paramsH1 ::= paramsH1 paramH1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsH1",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // paramsH1 ::= paramH1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsH1",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // paramH1 ::= OPEN_BRACKET optionParamH1 CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramH1",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // optionParamH1 ::= paramColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamH1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // optionParamH1 ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamH1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // optionParamH1 ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamH1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // paramsP ::= paramsP paramP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsP",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // paramsP ::= paramP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsP",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // paramP ::= OPEN_BRACKET optionParamP CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // optionParamP ::= paramColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamP",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // optionParamP ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamP",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // optionParamP ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamP",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // optionTextParam ::= FONT_SIZE ASSIGN QOUTE_MARK SIZE QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionTextParam",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // optionTextParam ::= FONT_FAMILY ASSIGN QOUTE_MARK font QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionTextParam",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // optionTextParam ::= TEXT_ALIGN ASSIGN QOUTE_MARK align QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionTextParam",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // paramId ::= ID ASSIGN QOUTE_MARK optionId QOUTE_MARK 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramId",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // optionId ::= ID_PARAM 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = i.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionId",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // optionId ::= NAME_PARAM 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = i.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionId",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // paramColor ::= COLOR ASSIGN QOUTE_MARK color QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramColor",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // color ::= COLOR_VALUE 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // color ::= BLACK 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // color ::= OLIVE 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // color ::= TEAL 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // color ::= RED 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // color ::= BLUE 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // color ::= MARRON 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // color ::= NAVY 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // color ::= GRAY 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // color ::= LIME 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // color ::= FUCHSIA 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // color ::= GREEN 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // color ::= PURPLE 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // color ::= SILVER 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // color ::= YELLOW 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // color ::= AQUA 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // font ::= COURIER 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = f.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("font",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // font ::= VERDANA 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = f.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("font",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // font ::= ARIAL 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = f.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("font",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // font ::= GENEVA 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = f.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("font",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // font ::= SANS_SERIF 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = f.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("font",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // align ::= LEFT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("align",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // align ::= CENTER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("align",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // align ::= RIGHT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("align",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // align ::= JUSTIFY 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("align",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // type ::= TEXT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // type ::= NUMBER 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // type ::= RADIO 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // type ::= CHECKBOX 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // procesos ::= procesos process 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procesos",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // procesos ::= process 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procesos",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // process ::= ON_LOAD processBody 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("process",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // process ::= PROCESS_NAME processBody 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("process",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // processBody ::= OPEN_ROUND_BRACKET CLOSE_ROUND_BRACKET OPEN_BRACKET CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("processBody",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // processBody ::= OPEN_ROUND_BRACKET CLOSE_ROUND_BRACKET OPEN_BRACKET instructions CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("processBody",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // instructions ::= instructions instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // instructions ::= instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // instruction ::= fullStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // instruction ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // instruction ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // fullStatement ::= tipo GLOBAL_MODE variables ASSIGN expr SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fullStatement",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // fullStatement ::= tipo variables ASSIGN expr SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fullStatement",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // statement ::= tipo GLOBAL_MODE variables SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // statement ::= tipo variables SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // assignment ::= variable ASSIGN expr SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // tipo ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // tipo ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // tipo ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // variables ::= variables COMMA variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // variables ::= variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // variable ::= ID_VAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // expr ::= mathExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // expr ::= logicExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // expr ::= values 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // expr ::= variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // mathExpr ::= expr PLUS expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // mathExpr ::= expr MINUS expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // mathExpr ::= expr TIMES expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // mathExpr ::= expr DIVIDE expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // mathExpr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // mathExpr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET PLUS expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // mathExpr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET MINUS expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // mathExpr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET TIMES expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // mathExpr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET DIVIDE expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // logicExpr ::= expr EQUAL_TO expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // logicExpr ::= expr NOT_EQTUAL_TO expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // logicExpr ::= expr GREATER_THAN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // logicExpr ::= expr LESS_THAN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // logicExpr ::= expr GREATER_THAN_OR_EQUAL_TO expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // logicExpr ::= expr LESS_THAN_OR_EQUAL_TO expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // logicExpr ::= expr AND expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // logicExpr ::= expr OR expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // logicExpr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET EQUAL_TO expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // logicExpr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET NOT_EQTUAL_TO expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // logicExpr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET GREATER_THAN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // logicExpr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET LESS_THAN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // logicExpr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET GREATER_THAN_OR_EQUAL_TO expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // logicExpr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET LESS_THAN_OR_EQUAL_TO expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // logicExpr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET AND expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // logicExpr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET OR expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // logicExpr ::= NOT expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicExpr",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // values ::= numero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("values",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // values ::= caracter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("values",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // values ::= literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("values",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // values ::= bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("values",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // numero ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numero",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // numero ::= DECIMAL_VAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numero",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // caracter ::= CHAR_VAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caracter",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // literal ::= LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // bool ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // bool ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
