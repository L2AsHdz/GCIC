
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores.sintactico;

import generator.NameTokenGenerator;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import model.errores.ErrorAnalisis;
import model.errores.TipoError;
import model.scripting.Expresion;
import model.scripting.Function;
import model.scripting.ifstatement.ElseIfStatement;
import model.scripting.ifstatement.ElseStatement;
import model.scripting.ifstatement.IfStatement;
import model.scripting.ifstatement.IfType;
import model.scripting.Instruction;
import model.scripting.Process;
import model.scripting.statement.Assignment;
import model.scripting.statement.FullStatement;
import model.scripting.statement.SimpleStatement;
import model.scripting.TipoDato;
import model.scripting.Variable;
import model.scripting.VariableTS;
import model.tags.body.Body;
import model.tags.body.Br;
import model.tags.body.Button;
import model.tags.body.Div;
import model.tags.body.H1;
import model.tags.head.Head;
import model.tags.body.Img;
import model.tags.body.Input;
import model.tags.head.Link;
import model.tags.body.Option;
import model.tags.body.P;
import model.tags.body.Scripting;
import model.tags.body.Select;
import model.tags.body.Span;
import model.tags.body.TextArea;
import model.tags.GCIC;
import model.tags.head.Title;
import model.tags.Parametro;
import model.tags.Tag;
import model.Token;
import model.TypeToken;
import validator.and.AndValidator;
import validator.AsignacionValidator;
import validator.divide.DivideValidator;
import validator.equalto.EqualToValidator;
import validator.greaterorequal.GreaterOrEqualValidator;
import validator.greaterthan.GreaterThanValidator;
import validator.lessorequal.LessOrEqualValidator;
import validator.lessthan.LessThanValidator;
import validator.minus.MinusValidator;
import validator.not.NotValidator;
import validator.notequalto.NotEqualToValidator;
import validator.OperatorValidator;
import validator.or.OrValidator;
import validator.plus.PlusValidator;
import validator.times.TimesValidator;
import validator.VariableValidator;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\372\000\002\002\016\000\002\002\004\000\002\002" +
    "\004\000\002\014\004\000\002\014\003\000\002\015\005" +
    "\000\002\016\007\000\002\016\007\000\002\137\002\000" +
    "\002\057\015\000\002\003\004\000\002\003\004\000\002" +
    "\005\013\000\002\004\014\000\002\054\011\000\002\060" +
    "\015\000\002\006\004\000\002\006\003\000\002\007\006" +
    "\000\002\007\006\000\002\010\011\000\002\010\011\000" +
    "\002\010\011\000\002\010\010\000\002\010\011\000\002" +
    "\010\011\000\002\010\011\000\002\010\011\000\002\010" +
    "\007\000\002\010\010\000\002\010\010\000\002\033\005" +
    "\000\002\037\005\000\002\011\004\000\002\011\003\000" +
    "\002\012\013\000\002\055\011\000\002\061\003\000\002" +
    "\061\002\000\002\017\004\000\002\017\003\000\002\020" +
    "\005\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\022\004\000\002\022\003\000\002\023\005\000" +
    "\002\024\007\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\025\004\000\002\025\003\000\002\026" +
    "\005\000\002\027\007\000\002\027\007\000\002\027\003" +
    "\000\002\027\003\000\002\030\004\000\002\030\003\000" +
    "\002\031\005\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\034\004\000\002\034\003\000\002\035" +
    "\005\000\002\036\007\000\002\036\007\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\040\004\000" +
    "\002\040\003\000\002\041\005\000\002\042\007\000\002" +
    "\042\007\000\002\042\007\000\002\042\007\000\002\042" +
    "\003\000\002\070\003\000\002\070\003\000\002\043\004" +
    "\000\002\043\003\000\002\044\005\000\002\045\007\000" +
    "\002\045\011\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\046\004\000\002\046\003\000\002\047" +
    "\005\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\051\004\000\002\051\003\000\002\052\005\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\013\007\000\002\013\007\000\002\013\007\000\002\067" +
    "\007\000\002\071\003\000\002\071\003\000\002\056\007" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\063\003\000\002\063\003\000\002\063\003\000\002" +
    "\063\003\000\002\063\003\000\002\064\003\000\002\064" +
    "\003\000\002\064\003\000\002\064\003\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\065\003\000" +
    "\002\072\004\000\002\072\003\000\002\140\002\000\002" +
    "\073\005\000\002\141\002\000\002\073\005\000\002\074" +
    "\006\000\002\074\007\000\002\075\004\000\002\075\003" +
    "\000\002\076\004\000\002\142\002\000\002\076\004\000" +
    "\002\076\003\000\002\076\003\000\002\076\003\000\002" +
    "\077\003\000\002\077\003\000\002\077\003\000\002\077" +
    "\003\000\002\100\007\000\002\100\006\000\002\101\005" +
    "\000\002\101\004\000\002\102\005\000\002\104\006\000" +
    "\002\104\006\000\002\105\007\000\002\143\002\000\002" +
    "\106\006\000\002\144\002\000\002\106\006\000\002\106" +
    "\004\000\002\106\002\000\002\107\005\000\002\107\005" +
    "\000\002\110\012\000\002\111\003\000\002\111\003\000" +
    "\002\112\003\000\002\112\003\000\002\134\005\000\002" +
    "\134\005\000\002\134\005\000\002\134\005\000\002\134" +
    "\005\000\002\134\007\000\002\134\007\000\002\134\007" +
    "\000\002\134\007\000\002\134\003\000\002\113\005\000" +
    "\002\113\005\000\002\114\007\000\002\103\010\000\002" +
    "\115\007\000\002\116\005\000\002\116\003\000\002\117" +
    "\003\000\002\117\003\000\002\117\003\000\002\125\003" +
    "\000\002\125\003\000\002\125\003\000\002\125\003\000" +
    "\002\125\003\000\002\122\005\000\002\122\003\000\002" +
    "\123\003\000\002\135\003\000\002\133\005\000\002\133" +
    "\005\000\002\133\005\000\002\133\005\000\002\133\005" +
    "\000\002\133\005\000\002\133\005\000\002\133\005\000" +
    "\002\133\005\000\002\133\005\000\002\133\005\000\002" +
    "\133\005\000\002\133\005\000\002\133\004\000\002\133" +
    "\003\000\002\133\003\000\002\133\003\000\002\136\004" +
    "\000\002\136\004\000\002\136\004\000\002\136\004\000" +
    "\002\136\004\000\002\136\004\000\002\136\004\000\002" +
    "\136\004\000\002\120\004\000\002\120\004\000\002\120" +
    "\004\000\002\124\005\000\002\124\005\000\002\121\004" +
    "\000\002\126\003\000\002\126\003\000\002\126\003\000" +
    "\002\126\003\000\002\127\003\000\002\127\003\000\002" +
    "\131\003\000\002\130\003\000\002\132\003\000\002\132" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0244\000\006\164\004\165\005\001\002\000\004\004" +
    "\012\001\002\000\006\002\uffdb\202\011\001\002\000\004" +
    "\002\007\001\002\000\004\002\000\001\002\000\004\002" +
    "\uffff\001\002\000\006\002\uffdc\164\uffdc\001\002\000\004" +
    "\146\014\001\002\000\006\146\ufffd\165\ufffd\001\002\000" +
    "\006\034\u023b\035\u023d\001\002\000\006\146\014\165\017" +
    "\001\002\000\006\146\ufffe\165\ufffe\001\002\000\006\164" +
    "\uffdb\202\011\001\002\000\004\164\ufff9\001\002\000\004" +
    "\164\u0212\001\002\000\004\164\024\001\002\000\004\164" +
    "\u020d\001\002\000\004\010\025\001\002\000\004\146\026" +
    "\001\002\000\004\026\u0207\001\002\000\004\165\030\001" +
    "\002\000\006\164\uffdb\202\011\001\002\000\004\164\033" +
    "\001\002\000\004\164\u0202\001\002\000\030\011\050\012" +
    "\047\013\044\014\037\016\035\017\041\020\045\021\046" +
    "\022\052\023\036\024\051\001\002\000\004\164\ufff0\001" +
    "\002\000\004\146\u01ef\001\002\000\004\146\u01e1\001\002" +
    "\000\004\146\u01d6\001\002\000\004\165\u01d4\001\002\000" +
    "\004\146\u01b3\001\002\000\006\164\uffdb\202\011\001\002" +
    "\000\006\164\uffdb\202\011\001\002\000\004\146\u0182\001" +
    "\002\000\004\165\u0180\001\002\000\004\146\u0167\001\002" +
    "\000\004\146\u014f\001\002\000\004\146\u0141\001\002\000" +
    "\004\165\155\001\002\000\004\146\053\001\002\000\014" +
    "\027\064\030\072\031\066\032\067\034\070\001\002\000" +
    "\006\146\uffa5\165\uffa5\001\002\000\006\146\053\165\056" +
    "\001\002\000\006\164\uffdb\202\011\001\002\000\006\146" +
    "\uffa6\165\uffa6\001\002\000\004\164\061\001\002\000\004" +
    "\155\062\001\002\000\004\022\063\001\002\000\004\165" +
    "\uffe7\001\002\000\004\156\131\001\002\000\004\147\uffa2" +
    "\001\002\000\004\156\120\001\002\000\004\156\110\001" +
    "\002\000\004\156\102\001\002\000\004\147\uffa3\001\002" +
    "\000\004\156\076\001\002\000\004\147\uffa1\001\002\000" +
    "\004\147\075\001\002\000\006\146\uffa4\165\uffa4\001\002" +
    "\000\004\157\077\001\002\000\004\106\100\001\002\000" +
    "\004\157\101\001\002\000\004\147\uff9a\001\002\000\004" +
    "\157\103\001\002\000\006\110\105\111\104\001\002\000" +
    "\004\157\uff95\001\002\000\004\157\uff96\001\002\000\004" +
    "\157\107\001\002\000\004\147\uff97\001\002\000\004\157" +
    "\111\001\002\000\012\072\112\073\114\074\113\075\115" +
    "\001\002\000\004\157\uff7e\001\002\000\004\157\uff7c\001" +
    "\002\000\004\157\uff7d\001\002\000\004\157\uff7b\001\002" +
    "\000\004\157\117\001\002\000\004\147\uff98\001\002\000" +
    "\004\157\121\001\002\000\014\065\125\066\126\067\123" +
    "\070\124\071\127\001\002\000\004\157\130\001\002\000" +
    "\004\157\uff81\001\002\000\004\157\uff80\001\002\000\004" +
    "\157\uff83\001\002\000\004\157\uff82\001\002\000\004\157" +
    "\uff7f\001\002\000\004\147\uff99\001\002\000\004\157\132" +
    "\001\002\000\042\046\152\047\137\050\134\051\151\052" +
    "\144\053\143\054\153\055\147\056\135\057\141\060\133" +
    "\061\146\062\142\063\145\064\136\105\150\001\002\000" +
    "\004\157\uff88\001\002\000\004\157\uff90\001\002\000\004" +
    "\157\uff8a\001\002\000\004\157\uff84\001\002\000\004\157" +
    "\uff91\001\002\000\004\157\154\001\002\000\004\157\uff89" +
    "\001\002\000\004\157\uff86\001\002\000\004\157\uff8d\001" +
    "\002\000\004\157\uff8e\001\002\000\004\157\uff85\001\002" +
    "\000\004\157\uff87\001\002\000\004\157\uff8b\001\002\000" +
    "\004\157\uff93\001\002\000\004\157\uff8f\001\002\000\004" +
    "\157\uff92\001\002\000\004\157\uff8c\001\002\000\004\147" +
    "\uff94\001\002\000\006\112\156\200\157\001\002\000\004" +
    "\150\uff74\001\002\000\004\150\uff72\001\002\000\010\112" +
    "\uff75\164\uff75\200\uff75\001\002\000\010\112\156\164\162" +
    "\200\157\001\002\000\004\176\164\001\002\000\010\112" +
    "\uff76\164\uff76\200\uff76\001\002\000\004\024\165\001\002" +
    "\000\004\165\uffe3\001\002\000\004\150\170\001\002\000" +
    "\010\112\uff71\164\uff71\200\uff71\001\002\000\004\151\171" +
    "\001\002\000\004\146\172\001\002\000\036\114\221\115" +
    "\204\116\206\117\203\120\210\131\220\132\174\133\212" +
    "\136\uff6b\141\225\143\202\145\211\147\175\201\223\001" +
    "\002\000\040\114\uff68\115\uff68\116\uff68\117\uff68\120\uff68" +
    "\131\uff68\132\uff68\133\uff68\136\uff68\141\uff68\143\uff68\145" +
    "\uff68\147\uff68\160\uff68\201\uff68\001\002\000\004\150\331" +
    "\001\002\000\010\112\uff70\164\uff70\200\uff70\001\002\000" +
    "\036\114\221\115\204\116\206\117\203\120\210\131\220" +
    "\132\174\133\212\136\uff6b\141\225\143\202\145\211\147" +
    "\u013d\201\223\001\002\000\004\161\uff65\001\002\000\006" +
    "\113\u013b\201\223\001\002\000\026\114\221\115\204\116" +
    "\206\117\203\120\210\131\220\132\174\133\212\134\u0107" +
    "\201\223\001\002\000\004\150\u0132\001\002\000\006\113" +
    "\uff36\201\uff36\001\002\000\006\113\uff35\201\uff35\001\002" +
    "\000\004\136\u011f\001\002\000\006\113\uff37\201\uff37\001" +
    "\002\000\040\114\uff69\115\uff69\116\uff69\117\uff69\120\uff69" +
    "\131\uff69\132\uff69\133\uff69\136\uff69\141\uff69\143\uff69\145" +
    "\uff69\147\uff69\160\uff69\201\uff69\001\002\000\006\113\uff38" +
    "\201\uff38\001\002\000\004\150\u0113\001\002\000\004\150" +
    "\331\001\002\000\026\114\221\115\204\116\206\117\203" +
    "\120\210\131\220\132\174\133\212\134\u0107\201\223\001" +
    "\002\000\040\114\uff67\115\uff67\116\uff67\117\uff67\120\uff67" +
    "\131\uff67\132\uff67\133\uff67\136\uff67\141\uff67\143\uff67\145" +
    "\uff67\147\uff67\160\uff67\201\uff67\001\002\000\004\161\u0106" +
    "\001\002\000\004\161\uff64\001\002\000\004\156\u0104\001" +
    "\002\000\004\150\273\001\002\000\006\113\uff39\201\uff39" +
    "\001\002\000\040\114\uff6d\115\uff6d\116\uff6d\117\uff6d\120" +
    "\uff6d\131\uff6d\132\uff6d\133\uff6d\136\uff6d\141\uff6d\143\uff6d" +
    "\145\uff6d\147\uff6d\160\uff6d\201\uff6d\001\002\000\042\151" +
    "\uff32\152\uff32\156\uff32\161\uff32\162\uff32\163\uff32\164\uff32" +
    "\165\uff32\166\uff32\167\uff32\170\uff32\171\uff32\173\uff32\174" +
    "\uff32\175\uff32\176\uff32\001\002\000\004\161\uff66\001\002" +
    "\000\004\150\227\001\002\000\004\161\uff63\001\002\000" +
    "\016\114\221\115\204\116\206\117\203\120\210\201\223" +
    "\001\002\000\004\151\350\001\002\000\004\151\uff50\001" +
    "\002\000\004\151\uff51\001\002\000\006\113\236\201\223" +
    "\001\002\000\010\152\uff33\156\uff33\161\uff33\001\002\000" +
    "\006\152\240\156\346\001\002\000\004\201\223\001\002" +
    "\000\006\152\240\156\241\001\002\000\004\201\223\001" +
    "\002\000\044\121\267\122\245\123\260\124\242\125\272" +
    "\126\270\127\261\130\253\150\247\172\251\201\223\204" +
    "\252\205\266\206\271\207\255\210\254\211\262\001\002" +
    "\000\004\150\273\001\002\000\036\151\uff22\161\uff22\162" +
    "\uff22\163\uff22\164\uff22\165\uff22\166\uff22\167\uff22\170\uff22" +
    "\171\uff22\173\uff22\174\uff22\175\uff22\176\uff22\001\002\000" +
    "\036\151\uff31\161\uff31\162\302\163\313\164\305\165\312" +
    "\166\304\167\311\170\314\171\301\173\306\174\300\175" +
    "\310\176\303\001\002\000\004\150\273\001\002\000\036" +
    "\151\uff20\161\uff20\162\uff20\163\uff20\164\uff20\165\uff20\166" +
    "\uff20\167\uff20\170\uff20\171\uff20\173\uff20\174\uff20\175\uff20" +
    "\176\uff20\001\002\000\044\121\267\122\245\123\260\124" +
    "\242\125\272\126\270\127\261\130\253\150\247\172\251" +
    "\201\223\204\252\205\266\206\271\207\255\210\254\211" +
    "\262\001\002\000\036\151\uff11\161\uff11\162\uff11\163\uff11" +
    "\164\uff11\165\uff11\166\uff11\167\uff11\170\uff11\171\uff11\173" +
    "\uff11\174\uff11\175\uff11\176\uff11\001\002\000\044\121\267" +
    "\122\245\123\260\124\242\125\272\126\270\127\261\130" +
    "\253\150\247\172\251\201\223\204\252\205\266\206\271" +
    "\207\255\210\254\211\262\001\002\000\040\151\uff0d\152" +
    "\uff0d\161\uff0d\162\uff0d\163\uff0d\164\uff0d\165\uff0d\166\uff0d" +
    "\167\uff0d\170\uff0d\171\uff0d\173\uff0d\174\uff0d\175\uff0d\176" +
    "\uff0d\001\002\000\004\150\273\001\002\000\036\151\uff09" +
    "\161\uff09\162\uff09\163\uff09\164\uff09\165\uff09\166\uff09\167" +
    "\uff09\170\uff09\171\uff09\173\uff09\174\uff09\175\uff09\176\uff09" +
    "\001\002\000\040\151\uff0a\152\uff0a\161\uff0a\162\uff0a\163" +
    "\uff0a\164\uff0a\165\uff0a\166\uff0a\167\uff0a\170\uff0a\171\uff0a" +
    "\173\uff0a\174\uff0a\175\uff0a\176\uff0a\001\002\000\036\151" +
    "\uff10\161\uff10\162\uff10\163\uff10\164\uff10\165\uff10\166\uff10" +
    "\167\uff10\170\uff10\171\uff10\173\uff10\174\uff10\175\uff10\176" +
    "\uff10\001\002\000\036\151\uff0e\161\uff0e\162\uff0e\163\uff0e" +
    "\164\uff0e\165\uff0e\166\uff0e\167\uff0e\170\uff0e\171\uff0e\173" +
    "\uff0e\174\uff0e\175\uff0e\176\uff0e\001\002\000\004\150\273" +
    "\001\002\000\004\150\331\001\002\000\036\151\uff08\161" +
    "\uff08\162\uff08\163\uff08\164\uff08\165\uff08\166\uff08\167\uff08" +
    "\170\uff08\171\uff08\173\uff08\174\uff08\175\uff08\176\uff08\001" +
    "\002\000\006\151\uff62\161\uff62\001\002\000\036\151\uff21" +
    "\161\uff21\162\uff21\163\uff21\164\uff21\165\uff21\166\uff21\167" +
    "\uff21\170\uff21\171\uff21\173\uff21\174\uff21\175\uff21\176\uff21" +
    "\001\002\000\036\151\uff0f\161\uff0f\162\uff0f\163\uff0f\164" +
    "\uff0f\165\uff0f\166\uff0f\167\uff0f\170\uff0f\171\uff0f\173\uff0f" +
    "\174\uff0f\175\uff0f\176\uff0f\001\002\000\040\151\uff0c\152" +
    "\uff0c\161\uff0c\162\uff0c\163\uff0c\164\uff0c\165\uff0c\166\uff0c" +
    "\167\uff0c\170\uff0c\171\uff0c\173\uff0c\174\uff0c\175\uff0c\176" +
    "\uff0c\001\002\000\004\150\273\001\002\000\004\150\331" +
    "\001\002\000\036\151\uff0b\161\uff0b\162\uff0b\163\uff0b\164" +
    "\uff0b\165\uff0b\166\uff0b\167\uff0b\170\uff0b\171\uff0b\173\uff0b" +
    "\174\uff0b\175\uff0b\176\uff0b\001\002\000\004\150\273\001" +
    "\002\000\046\121\267\122\245\123\260\124\242\125\272" +
    "\126\270\127\261\130\253\150\247\172\251\201\223\203" +
    "\276\204\252\205\266\206\271\207\255\210\254\211\262" +
    "\001\002\000\036\151\uff1b\161\uff1b\162\uff1b\163\uff1b\164" +
    "\uff1b\165\uff1b\166\uff1b\167\uff1b\170\uff1b\171\uff1b\173\uff1b" +
    "\174\uff1b\175\uff1b\176\uff1b\001\002\000\034\151\307\162" +
    "\302\163\313\164\305\165\312\166\304\167\311\170\314" +
    "\171\301\173\306\174\300\175\310\176\303\001\002\000" +
    "\004\151\277\001\002\000\036\151\uff13\161\uff13\162\uff13" +
    "\163\uff13\164\uff13\165\uff13\166\uff13\167\uff13\170\uff13\171" +
    "\uff13\173\uff13\174\uff13\175\uff13\176\uff13\001\002\000\044" +
    "\121\267\122\245\123\260\124\242\125\272\126\270\127" +
    "\261\130\253\150\247\172\251\201\223\204\252\205\266" +
    "\206\271\207\255\210\254\211\262\001\002\000\044\121" +
    "\267\122\245\123\260\124\242\125\272\126\270\127\261" +
    "\130\253\150\247\172\251\201\223\204\252\205\266\206" +
    "\271\207\255\210\254\211\262\001\002\000\044\121\267" +
    "\122\245\123\260\124\242\125\272\126\270\127\261\130" +
    "\253\150\247\172\251\201\223\204\252\205\266\206\271" +
    "\207\255\210\254\211\262\001\002\000\044\121\267\122" +
    "\245\123\260\124\242\125\272\126\270\127\261\130\253" +
    "\150\247\172\251\201\223\204\252\205\266\206\271\207" +
    "\255\210\254\211\262\001\002\000\044\121\267\122\245" +
    "\123\260\124\242\125\272\126\270\127\261\130\253\150" +
    "\247\172\251\201\223\204\252\205\266\206\271\207\255" +
    "\210\254\211\262\001\002\000\044\121\267\122\245\123" +
    "\260\124\242\125\272\126\270\127\261\130\253\150\247" +
    "\172\251\201\223\204\252\205\266\206\271\207\255\210" +
    "\254\211\262\001\002\000\044\121\267\122\245\123\260" +
    "\124\242\125\272\126\270\127\261\130\253\150\247\172" +
    "\251\201\223\204\252\205\266\206\271\207\255\210\254" +
    "\211\262\001\002\000\036\151\uff14\161\uff14\162\uff14\163" +
    "\uff14\164\uff14\165\uff14\166\uff14\167\uff14\170\uff14\171\uff14" +
    "\173\uff14\174\uff14\175\uff14\176\uff14\001\002\000\044\121" +
    "\267\122\245\123\260\124\242\125\272\126\270\127\261" +
    "\130\253\150\247\172\251\201\223\204\252\205\266\206" +
    "\271\207\255\210\254\211\262\001\002\000\044\121\267" +
    "\122\245\123\260\124\242\125\272\126\270\127\261\130" +
    "\253\150\247\172\251\201\223\204\252\205\266\206\271" +
    "\207\255\210\254\211\262\001\002\000\044\121\267\122" +
    "\245\123\260\124\242\125\272\126\270\127\261\130\253" +
    "\150\247\172\251\201\223\204\252\205\266\206\271\207" +
    "\255\210\254\211\262\001\002\000\044\121\267\122\245" +
    "\123\260\124\242\125\272\126\270\127\261\130\253\150" +
    "\247\172\251\201\223\204\252\205\266\206\271\207\255" +
    "\210\254\211\262\001\002\000\044\121\267\122\245\123" +
    "\260\124\242\125\272\126\270\127\261\130\253\150\247" +
    "\172\251\201\223\204\252\205\266\206\271\207\255\210" +
    "\254\211\262\001\002\000\036\151\uff25\161\uff25\162\uff25" +
    "\163\uff25\164\uff25\165\uff25\166\uff25\167\uff25\170\uff25\171" +
    "\301\173\uff25\174\uff25\175\uff25\176\uff25\001\002\000\036" +
    "\151\uff2b\161\uff2b\162\uff2b\163\uff2b\164\uff2b\165\uff2b\166" +
    "\uff2b\167\uff2b\170\314\171\301\173\uff2b\174\uff2b\175\uff2b" +
    "\176\uff2b\001\002\000\036\151\uff2a\161\uff2a\162\uff2a\163" +
    "\uff2a\164\uff2a\165\uff2a\166\uff2a\167\uff2a\170\314\171\301" +
    "\173\uff2a\174\uff2a\175\uff2a\176\uff2a\001\002\000\036\151" +
    "\uff28\161\uff28\162\uff28\163\uff28\164\uff28\165\uff28\166\uff28" +
    "\167\uff28\170\314\171\301\173\uff28\174\uff28\175\uff28\176" +
    "\uff28\001\002\000\036\151\uff2e\161\uff2e\162\302\163\313" +
    "\164\305\165\312\166\304\167\311\170\314\171\301\173" +
    "\uff2e\174\uff2e\175\uff2e\176\uff2e\001\002\000\036\151\uff30" +
    "\161\uff30\162\302\163\313\164\305\165\312\166\304\167" +
    "\311\170\314\171\301\173\uff30\174\uff30\175\310\176\303" +
    "\001\002\000\036\151\uff29\161\uff29\162\uff29\163\uff29\164" +
    "\uff29\165\uff29\166\uff29\167\uff29\170\314\171\301\173\uff29" +
    "\174\uff29\175\uff29\176\uff29\001\002\000\036\151\uff27\161" +
    "\uff27\162\uff27\163\uff27\164\uff27\165\uff27\166\uff27\167\uff27" +
    "\170\314\171\301\173\uff27\174\uff27\175\uff27\176\uff27\001" +
    "\002\000\036\151\uff2d\161\uff2d\162\302\163\313\164\305" +
    "\165\312\166\304\167\311\170\314\171\301\173\uff2d\174" +
    "\uff2d\175\uff2d\176\uff2d\001\002\000\036\151\uff2c\161\uff2c" +
    "\162\uff2c\163\uff2c\164\uff2c\165\uff2c\166\uff2c\167\uff2c\170" +
    "\314\171\301\173\uff2c\174\uff2c\175\uff2c\176\uff2c\001\002" +
    "\000\036\151\uff26\161\uff26\162\uff26\163\uff26\164\uff26\165" +
    "\uff26\166\uff26\167\uff26\170\uff26\171\uff26\173\uff26\174\uff26" +
    "\175\uff26\176\uff26\001\002\000\036\151\uff2f\161\uff2f\162" +
    "\302\163\313\164\305\165\312\166\304\167\311\170\314" +
    "\171\301\173\uff2f\174\uff2f\175\310\176\303\001\002\000" +
    "\004\151\333\001\002\000\036\151\uff1a\161\uff1a\162\uff1a" +
    "\163\uff1a\164\uff1a\165\uff1a\166\uff1a\167\uff1a\170\uff1a\171" +
    "\uff1a\173\uff1a\174\uff1a\175\uff1a\176\uff1a\001\002\000\036" +
    "\151\uff12\161\uff12\162\uff12\163\uff12\164\uff12\165\uff12\166" +
    "\uff12\167\uff12\170\uff12\171\uff12\173\uff12\174\uff12\175\uff12" +
    "\176\uff12\001\002\000\036\151\uff1f\161\uff1f\162\uff1f\163" +
    "\uff1f\164\uff1f\165\uff1f\166\uff1f\167\uff1f\170\uff1f\171\uff1f" +
    "\173\uff1f\174\uff1f\175\uff1f\176\uff1f\001\002\000\036\151" +
    "\uff19\161\uff19\162\uff19\163\uff19\164\uff19\165\uff19\166\uff19" +
    "\167\uff19\170\uff19\171\uff19\173\uff19\174\uff19\175\uff19\176" +
    "\uff19\001\002\000\036\151\uff1d\161\uff1d\162\uff1d\163\uff1d" +
    "\164\uff1d\165\uff1d\166\uff1d\167\uff1d\170\uff1d\171\uff1d\173" +
    "\uff1d\174\uff1d\175\uff1d\176\uff1d\001\002\000\036\151\uff18" +
    "\161\uff18\162\uff18\163\uff18\164\uff18\165\uff18\166\uff18\167" +
    "\uff18\170\uff18\171\uff18\173\uff18\174\uff18\175\uff18\176\uff18" +
    "\001\002\000\036\151\uff23\161\uff23\162\uff23\163\uff23\164" +
    "\uff23\165\uff23\166\uff23\167\uff23\170\uff23\171\uff23\173\uff23" +
    "\174\uff23\175\uff23\176\uff23\001\002\000\034\151\342\162" +
    "\302\163\313\164\305\165\312\166\304\167\311\170\314" +
    "\171\301\173\306\174\300\175\310\176\303\001\002\000" +
    "\036\151\uff24\161\uff24\162\uff24\163\uff24\164\uff24\165\uff24" +
    "\166\uff24\167\uff24\170\uff24\171\uff24\173\uff24\174\uff24\175" +
    "\uff24\176\uff24\001\002\000\036\151\uff1e\161\uff1e\162\uff1e" +
    "\163\uff1e\164\uff1e\165\uff1e\166\uff1e\167\uff1e\170\uff1e\171" +
    "\uff1e\173\uff1e\174\uff1e\175\uff1e\176\uff1e\001\002\000\036" +
    "\151\uff1c\161\uff1c\162\uff1c\163\uff1c\164\uff1c\165\uff1c\166" +
    "\uff1c\167\uff1c\170\uff1c\171\uff1c\173\uff1c\174\uff1c\175\uff1c" +
    "\176\uff1c\001\002\000\010\152\uff34\156\uff34\161\uff34\001" +
    "\002\000\044\121\267\122\245\123\260\124\242\125\272" +
    "\126\270\127\261\130\253\150\247\172\251\201\223\204" +
    "\252\205\266\206\271\207\255\210\254\211\262\001\002" +
    "\000\006\151\uff61\161\uff61\001\002\000\004\142\351\001" +
    "\002\000\004\150\352\001\002\000\012\150\357\201\223" +
    "\204\252\205\266\001\002\000\004\151\u0102\001\002\000" +
    "\014\151\uff44\173\uff44\174\uff44\175\uff44\176\uff44\001\002" +
    "\000\014\151\uff4f\173\361\174\362\175\365\176\363\001" +
    "\002\000\004\151\uff4e\001\002\000\010\150\357\204\252" +
    "\205\266\001\002\000\014\151\364\173\361\174\362\175" +
    "\365\176\363\001\002\000\010\150\357\204\252\205\266" +
    "\001\002\000\010\150\357\204\252\205\266\001\002\000" +
    "\010\150\357\204\252\205\266\001\002\000\014\151\uff49" +
    "\173\367\174\370\175\372\176\371\001\002\000\010\150" +
    "\357\204\252\205\266\001\002\000\014\151\uff4b\173\uff4b" +
    "\174\uff4b\175\uff4b\176\uff4b\001\002\000\010\150\357\204" +
    "\252\205\266\001\002\000\010\150\357\204\252\205\266" +
    "\001\002\000\010\150\357\204\252\205\266\001\002\000" +
    "\010\150\357\204\252\205\266\001\002\000\014\151\uff46" +
    "\173\uff46\174\uff46\175\uff46\176\uff46\001\002\000\014\151" +
    "\uff45\173\uff45\174\uff45\175\uff45\176\uff45\001\002\000\014" +
    "\151\uff47\173\uff47\174\uff47\175\365\176\363\001\002\000" +
    "\014\151\uff48\173\uff48\174\uff48\175\365\176\363\001\002" +
    "\000\014\151\uff4a\173\uff4a\174\uff4a\175\uff4a\176\uff4a\001" +
    "\002\000\014\151\uff4c\173\uff4c\174\uff4c\175\365\176\363" +
    "\001\002\000\014\151\uff4d\173\uff4d\174\uff4d\175\365\176" +
    "\363\001\002\000\026\114\uff52\115\uff52\116\uff52\117\uff52" +
    "\120\uff52\131\uff52\132\uff52\133\uff52\134\uff52\201\uff52\001" +
    "\002\000\004\161\uff16\001\002\000\044\121\267\122\245" +
    "\123\260\124\242\125\272\126\270\127\261\130\253\150" +
    "\247\172\251\201\223\204\252\205\266\206\271\207\255" +
    "\210\254\211\262\001\002\000\006\151\uff5e\161\uff5e\001" +
    "\002\000\040\114\uff6c\115\uff6c\116\uff6c\117\uff6c\120\uff6c" +
    "\131\uff6c\132\uff6c\133\uff6c\136\uff6c\141\uff6c\143\uff6c\145" +
    "\uff6c\147\uff6c\160\uff6c\201\uff6c\001\002\000\004\153\u010c" +
    "\001\002\000\004\161\u010b\001\002\000\004\135\u010a\001" +
    "\002\000\040\114\uff43\115\uff43\116\uff43\117\uff43\120\uff43" +
    "\131\uff43\132\uff43\133\uff43\136\uff43\141\uff43\143\uff43\145" +
    "\uff43\147\uff43\160\uff43\201\uff43\001\002\000\040\114\uff42" +
    "\115\uff42\116\uff42\117\uff42\120\uff42\131\uff42\132\uff42\133" +
    "\uff42\136\uff42\141\uff42\143\uff42\145\uff42\147\uff42\160\uff42" +
    "\201\uff42\001\002\000\004\160\u010d\001\002\000\034\114" +
    "\221\115\204\116\206\117\203\120\210\131\220\132\174" +
    "\133\212\136\uff6b\141\225\143\202\145\211\201\223\001" +
    "\002\000\036\114\221\115\204\116\206\117\203\120\210" +
    "\131\220\132\174\133\212\136\uff6b\141\225\143\202\145" +
    "\211\160\u010f\201\223\001\002\000\004\154\u0111\001\002" +
    "\000\040\114\uff6e\115\uff6e\116\uff6e\117\uff6e\120\uff6e\131" +
    "\uff6e\132\uff6e\133\uff6e\136\uff6e\141\uff6e\143\uff6e\145\uff6e" +
    "\147\uff6e\160\uff6e\201\uff6e\001\002\000\004\135\uff40\001" +
    "\002\000\004\161\uff15\001\002\000\012\201\223\204\252" +
    "\205\266\207\255\001\002\000\006\151\uff3d\152\uff3d\001" +
    "\002\000\006\151\uff3a\152\uff3a\001\002\000\006\151\uff3b" +
    "\152\uff3b\001\002\000\006\151\u011a\152\u0119\001\002\000" +
    "\006\151\uff3c\152\uff3c\001\002\000\012\201\223\204\252" +
    "\205\266\207\255\001\002\000\004\161\u011b\001\002\000" +
    "\040\114\uff3f\115\uff3f\116\uff3f\117\uff3f\120\uff3f\131\uff3f" +
    "\132\uff3f\133\uff3f\136\uff3f\141\uff3f\143\uff3f\145\uff3f\147" +
    "\uff3f\160\uff3f\201\uff3f\001\002\000\006\151\uff3e\152\uff3e" +
    "\001\002\000\026\114\221\115\204\116\206\117\203\120" +
    "\210\131\220\132\174\133\212\134\u0107\201\223\001\002" +
    "\000\040\114\uff6a\115\uff6a\116\uff6a\117\uff6a\120\uff6a\131" +
    "\uff6a\132\uff6a\133\uff6a\136\uff6a\141\uff6a\143\uff6a\145\uff6a" +
    "\147\uff6a\160\uff6a\201\uff6a\001\002\000\004\150\u0120\001" +
    "\002\000\044\121\267\122\245\123\260\124\242\125\272" +
    "\126\270\127\261\130\253\150\247\172\251\201\223\204" +
    "\252\205\266\206\271\207\255\210\254\211\262\001\002" +
    "\000\034\151\u0122\162\302\163\313\164\305\165\312\166" +
    "\304\167\311\170\314\171\301\173\306\174\300\175\310" +
    "\176\303\001\002\000\004\137\u0123\001\002\000\026\114" +
    "\uff5b\115\uff5b\116\uff5b\117\uff5b\120\uff5b\131\uff5b\132\uff5b" +
    "\133\uff5b\134\uff5b\201\uff5b\001\002\000\004\161\u0130\001" +
    "\002\000\004\135\u0126\001\002\000\042\114\uff55\115\uff55" +
    "\116\uff55\117\uff55\120\uff55\131\uff55\132\uff55\133\uff55\136" +
    "\uff55\140\u0127\141\uff55\143\uff55\145\uff55\147\uff55\160\uff55" +
    "\201\uff55\001\002\000\030\114\uff58\115\uff58\116\uff58\117" +
    "\uff58\120\uff58\131\uff58\132\uff58\133\uff58\134\uff5a\136\u011f" +
    "\201\uff58\001\002\000\040\114\uff5d\115\uff5d\116\uff5d\117" +
    "\uff5d\120\uff5d\131\uff5d\132\uff5d\133\uff5d\136\uff5d\141\uff5d" +
    "\143\uff5d\145\uff5d\147\uff5d\160\uff5d\201\uff5d\001\002\000" +
    "\040\114\uff56\115\uff56\116\uff56\117\uff56\120\uff56\131\uff56" +
    "\132\uff56\133\uff56\136\uff56\141\uff56\143\uff56\145\uff56\147" +
    "\uff56\160\uff56\201\uff56\001\002\000\024\114\221\115\204" +
    "\116\206\117\203\120\210\131\220\132\174\133\212\201" +
    "\223\001\002\000\004\134\u0107\001\002\000\004\135\u012d" +
    "\001\002\000\040\114\uff59\115\uff59\116\uff59\117\uff59\120" +
    "\uff59\131\uff59\132\uff59\133\uff59\136\uff59\141\uff59\143\uff59" +
    "\145\uff59\147\uff59\160\uff59\201\uff59\001\002\000\004\161" +
    "\u012f\001\002\000\040\114\uff57\115\uff57\116\uff57\117\uff57" +
    "\120\uff57\131\uff57\132\uff57\133\uff57\136\uff57\141\uff57\143" +
    "\uff57\145\uff57\147\uff57\160\uff57\201\uff57\001\002\000\042" +
    "\114\uff55\115\uff55\116\uff55\117\uff55\120\uff55\131\uff55\132" +
    "\uff55\133\uff55\136\uff55\140\u0127\141\uff55\143\uff55\145\uff55" +
    "\147\uff55\160\uff55\201\uff55\001\002\000\040\114\uff5c\115" +
    "\uff5c\116\uff5c\117\uff5c\120\uff5c\131\uff5c\132\uff5c\133\uff5c" +
    "\136\uff5c\141\uff5c\143\uff5c\145\uff5c\147\uff5c\160\uff5c\201" +
    "\uff5c\001\002\000\044\121\267\122\245\123\260\124\242" +
    "\125\272\126\270\127\261\130\253\150\247\172\251\201" +
    "\223\204\252\205\266\206\271\207\255\210\254\211\262" +
    "\001\002\000\034\151\u0134\162\302\163\313\164\305\165" +
    "\312\166\304\167\311\170\314\171\301\173\306\174\300" +
    "\175\310\176\303\001\002\000\004\144\u0135\001\002\000" +
    "\026\114\uff41\115\uff41\116\uff41\117\uff41\120\uff41\131\uff41" +
    "\132\uff41\133\uff41\134\uff41\201\uff41\001\002\000\004\161" +
    "\u0139\001\002\000\004\135\u0138\001\002\000\040\114\uff54" +
    "\115\uff54\116\uff54\117\uff54\120\uff54\131\uff54\132\uff54\133" +
    "\uff54\136\uff54\141\uff54\143\uff54\145\uff54\147\uff54\160\uff54" +
    "\201\uff54\001\002\000\040\114\uff53\115\uff53\116\uff53\117" +
    "\uff53\120\uff53\131\uff53\132\uff53\133\uff53\136\uff53\141\uff53" +
    "\143\uff53\145\uff53\147\uff53\160\uff53\201\uff53\001\002\000" +
    "\010\152\240\156\346\161\uff5f\001\002\000\004\201\223" +
    "\001\002\000\010\152\240\156\241\161\uff60\001\002\000" +
    "\010\112\uff6f\164\uff6f\200\uff6f\001\002\000\004\161\uff17" +
    "\001\002\000\004\150\170\001\002\000\010\112\uff73\164" +
    "\uff73\200\uff73\001\002\000\014\027\064\030\072\031\066" +
    "\032\067\034\070\001\002\000\006\146\u0141\165\u0144\001" +
    "\002\000\006\146\uffd9\165\uffd9\001\002\000\006\164\uffdb" +
    "\202\011\001\002\000\006\146\uffda\165\uffda\001\002\000" +
    "\004\164\u0147\001\002\000\004\155\u0148\001\002\000\004" +
    "\011\u0149\001\002\000\004\165\uffed\001\002\000\004\147" +
    "\uffd6\001\002\000\004\147\uffd7\001\002\000\004\147\uffd5" +
    "\001\002\000\004\147\u014e\001\002\000\006\146\uffd8\165" +
    "\uffd8\001\002\000\016\027\064\030\072\031\066\032\067" +
    "\033\u015a\034\070\001\002\000\006\146\u014f\165\u0152\001" +
    "\002\000\006\146\uffd3\165\uffd3\001\002\000\006\164\uffdb" +
    "\202\011\001\002\000\006\146\uffd4\165\uffd4\001\002\000" +
    "\004\164\u0155\001\002\000\004\155\u0156\001\002\000\004" +
    "\012\u0157\001\002\000\004\165\uffec\001\002\000\004\147" +
    "\u0165\001\002\000\004\147\uffcf\001\002\000\004\156\u015d" +
    "\001\002\000\004\147\uffd0\001\002\000\004\147\uffce\001" +
    "\002\000\004\157\u015e\001\002\000\012\076\u015f\077\u0162" +
    "\100\u0160\101\u0161\001\002\000\004\157\uff7a\001\002\000" +
    "\004\157\uff78\001\002\000\004\157\uff77\001\002\000\004" +
    "\157\uff79\001\002\000\004\157\u0164\001\002\000\004\147" +
    "\uffd1\001\002\000\006\146\uffd2\165\uffd2\001\002\000\006" +
    "\146\uffad\165\uffad\001\002\000\020\026\u0171\027\064\030" +
    "\072\031\066\032\067\034\070\045\u0172\001\002\000\006" +
    "\146\u0167\165\u016a\001\002\000\006\146\uffae\165\uffae\001" +
    "\002\000\006\164\uffdb\202\011\001\002\000\004\164\u016c" +
    "\001\002\000\004\155\u016d\001\002\000\004\021\u016e\001" +
    "\002\000\004\165\uffe8\001\002\000\004\147\u017f\001\002" +
    "\000\004\147\uffa8\001\002\000\004\156\u017b\001\002\000" +
    "\004\156\u0175\001\002\000\004\147\uffa7\001\002\000\004" +
    "\147\uffa9\001\002\000\004\157\u0176\001\002\000\004\200" +
    "\u0177\001\002\000\004\150\u0178\001\002\000\004\151\u0179" +
    "\001\002\000\004\157\u017a\001\002\000\004\147\uffaa\001" +
    "\002\000\004\157\u017c\001\002\000\042\046\152\047\137" +
    "\050\134\051\151\052\144\053\143\054\153\055\147\056" +
    "\135\057\141\060\133\061\146\062\142\063\145\064\136" +
    "\105\150\001\002\000\004\157\u017e\001\002\000\004\147" +
    "\uffab\001\002\000\006\146\uffac\165\uffac\001\002\000\006" +
    "\164\uffdb\202\011\001\002\000\004\164\uffee\001\002\000" +
    "\016\030\072\031\066\032\067\034\070\036\u018d\037\u018f" +
    "\001\002\000\006\146\u0182\165\u0185\001\002\000\006\146" +
    "\uffcc\165\uffcc\001\002\000\006\164\uffdb\202\011\001\002" +
    "\000\006\146\uffcd\165\uffcd\001\002\000\004\164\u0188\001" +
    "\002\000\004\155\u0189\001\002\000\004\013\u018a\001\002" +
    "\000\004\165\uffeb\001\002\000\004\147\uffc8\001\002\000" +
    "\004\147\u0198\001\002\000\004\156\u0194\001\002\000\004" +
    "\147\uffc7\001\002\000\004\156\u0190\001\002\000\004\157" +
    "\u0191\001\002\000\004\177\u0192\001\002\000\004\157\u0193" +
    "\001\002\000\004\147\uffca\001\002\000\004\157\u0195\001" +
    "\002\000\004\177\u0196\001\002\000\004\157\u0197\001\002" +
    "\000\004\147\uffc9\001\002\000\006\146\uffcb\165\uffcb\001" +
    "\002\000\004\164\u019b\001\002\000\004\164\u019e\001\002" +
    "\000\032\011\050\012\047\013\044\014\037\016\035\017" +
    "\041\020\045\021\046\022\052\023\036\024\051\155\u019c" +
    "\001\002\000\004\016\u019d\001\002\000\004\165\uffe5\001" +
    "\002\000\032\011\050\012\047\013\044\014\037\016\035" +
    "\017\041\020\045\021\046\022\052\023\036\024\051\155" +
    "\u01a0\001\002\000\004\164\ufff1\001\002\000\004\016\u01a1" +
    "\001\002\000\004\165\uffe4\001\002\000\004\164\u01a3\001" +
    "\002\000\004\015\u01a9\001\002\000\004\164\u01a6\001\002" +
    "\000\004\164\uffdf\001\002\000\006\015\u01a9\155\u01a8\001" +
    "\002\000\004\164\uffe0\001\002\000\004\014\u01b1\001\002" +
    "\000\004\165\u01aa\001\002\000\006\164\uffdb\202\011\001" +
    "\002\000\004\164\u01ac\001\002\000\004\155\u01ad\001\002" +
    "\000\004\015\u01ae\001\002\000\004\165\u01af\001\002\000" +
    "\006\164\uffdb\202\011\001\002\000\004\164\uffde\001\002" +
    "\000\004\165\uffea\001\002\000\006\146\uffb7\165\uffb7\001" +
    "\002\000\014\034\070\041\u01bf\042\u01bd\043\u01c0\044\u01be" +
    "\001\002\000\006\146\u01b3\165\u01b6\001\002\000\006\146" +
    "\uffb8\165\uffb8\001\002\000\006\164\uffdb\202\011\001\002" +
    "\000\004\164\u01b8\001\002\000\004\155\u01b9\001\002\000" +
    "\004\017\u01ba\001\002\000\004\165\uffe9\001\002\000\004" +
    "\147\uffb1\001\002\000\004\147\u01d3\001\002\000\004\156" +
    "\u01cf\001\002\000\004\156\u01cb\001\002\000\004\156\u01c7" +
    "\001\002\000\004\156\u01c1\001\002\000\004\157\u01c2\001" +
    "\002\000\006\106\u01c5\107\u01c3\001\002\000\004\157\uffaf" +
    "\001\002\000\004\157\u01c6\001\002\000\004\157\uffb0\001" +
    "\002\000\004\147\uffb4\001\002\000\004\157\u01c8\001\002" +
    "\000\004\104\u01c9\001\002\000\004\157\u01ca\001\002\000" +
    "\004\147\uffb2\001\002\000\004\157\u01cc\001\002\000\004" +
    "\111\u01cd\001\002\000\004\157\u01ce\001\002\000\004\147" +
    "\uffb5\001\002\000\004\157\u01d0\001\002\000\006\106\u01c5" +
    "\107\u01c3\001\002\000\004\157\u01d2\001\002\000\004\147" +
    "\uffb3\001\002\000\006\146\uffb6\165\uffb6\001\002\000\006" +
    "\164\uffdb\202\011\001\002\000\004\164\uffef\001\002\000" +
    "\014\027\064\030\072\031\066\032\067\034\070\001\002" +
    "\000\006\146\uffc5\165\uffc5\001\002\000\006\146\u01d6\165" +
    "\u01d9\001\002\000\006\164\uffe2\202\uffe2\001\002\000\006" +
    "\146\uffc6\165\uffc6\001\002\000\004\147\u01df\001\002\000" +
    "\004\147\uffc2\001\002\000\004\147\uffc3\001\002\000\004" +
    "\147\uffc1\001\002\000\006\146\uffc4\165\uffc4\001\002\000" +
    "\006\146\uff9f\165\uff9f\001\002\000\014\027\064\030\072" +
    "\031\066\032\067\034\070\001\002\000\006\146\u01e1\165" +
    "\u01e4\001\002\000\006\146\uffa0\165\uffa0\001\002\000\006" +
    "\164\uffdb\202\011\001\002\000\004\164\u01e6\001\002\000" +
    "\004\155\u01e7\001\002\000\004\023\u01e8\001\002\000\004" +
    "\165\uffe6\001\002\000\004\147\uff9c\001\002\000\004\147" +
    "\u01ed\001\002\000\004\147\uff9d\001\002\000\004\147\uff9b" +
    "\001\002\000\006\146\uff9e\165\uff9e\001\002\000\006\146" +
    "\u01ef\165\u0200\001\002\000\020\026\u01f3\027\064\030\072" +
    "\031\066\032\067\034\070\040\u01f6\001\002\000\006\146" +
    "\uffbf\165\uffbf\001\002\000\004\147\u01ff\001\002\000\004" +
    "\147\uffba\001\002\000\004\156\u01fb\001\002\000\004\147" +
    "\uffb9\001\002\000\004\147\uffbb\001\002\000\004\156\u01f7" +
    "\001\002\000\004\157\u01f8\001\002\000\002\001\002\000" +
    "\004\157\u01fa\001\002\000\004\147\uffbc\001\002\000\004" +
    "\157\u01fc\001\002\000\042\046\152\047\137\050\134\051" +
    "\151\052\144\053\143\054\153\055\147\056\135\057\141" +
    "\060\133\061\146\062\142\063\145\064\136\105\150\001" +
    "\002\000\004\157\u01fe\001\002\000\004\147\uffbd\001\002" +
    "\000\006\146\uffbe\165\uffbe\001\002\000\006\164\uffe1\202" +
    "\uffe1\001\002\000\006\146\uffc0\165\uffc0\001\002\000\032" +
    "\011\050\012\047\013\044\014\037\016\035\017\041\020" +
    "\045\021\046\022\052\023\036\024\051\155\u0203\001\002" +
    "\000\004\010\u0204\001\002\000\004\165\u0205\001\002\000" +
    "\006\164\uffdb\202\011\001\002\000\004\164\ufff2\001\002" +
    "\000\004\156\u0208\001\002\000\004\157\u0209\001\002\000" +
    "\042\046\152\047\137\050\134\051\151\052\144\053\143" +
    "\054\153\055\147\056\135\057\141\060\133\061\146\062" +
    "\142\063\145\064\136\105\150\001\002\000\004\157\u020b" +
    "\001\002\000\004\147\u020c\001\002\000\004\165\uffdd\001" +
    "\002\000\004\155\u020e\001\002\000\004\004\u020f\001\002" +
    "\000\004\165\u0210\001\002\000\006\002\uffdb\202\011\001" +
    "\002\000\004\002\001\001\002\000\004\005\u0213\001\002" +
    "\000\004\165\u0214\001\002\000\006\164\uffdb\202\011\001" +
    "\002\000\004\164\u0216\001\002\000\006\006\u022e\007\u021c" +
    "\001\002\000\004\164\u0236\001\002\000\004\164\u022c\001" +
    "\002\000\004\164\u021a\001\002\000\004\007\u021c\001\002" +
    "\000\004\164\ufff6\001\002\000\004\146\u021d\001\002\000" +
    "\004\025\u0226\001\002\000\004\165\u021f\001\002\000\006" +
    "\164\uffdb\202\011\001\002\000\004\164\u0221\001\002\000" +
    "\004\155\u0222\001\002\000\004\007\u0223\001\002\000\004" +
    "\165\u0224\001\002\000\006\164\uffdb\202\011\001\002\000" +
    "\004\164\ufff4\001\002\000\004\156\u0227\001\002\000\004" +
    "\157\u0228\001\002\000\004\104\u0229\001\002\000\004\157" +
    "\u022a\001\002\000\004\147\u022b\001\002\000\004\165\ufff3" +
    "\001\002\000\004\006\u022e\001\002\000\004\164\ufff7\001" +
    "\002\000\004\165\u022f\001\002\000\006\164\uffdb\202\011" +
    "\001\002\000\004\164\u0231\001\002\000\004\155\u0232\001" +
    "\002\000\004\006\u0233\001\002\000\004\165\u0234\001\002" +
    "\000\006\164\uffdb\202\011\001\002\000\004\164\ufff5\001" +
    "\002\000\004\155\u0237\001\002\000\004\005\u0238\001\002" +
    "\000\004\165\u0239\001\002\000\006\164\uffdb\202\011\001" +
    "\002\000\004\164\ufff8\001\002\000\004\156\u0243\001\002" +
    "\000\004\147\u0242\001\002\000\004\156\u023e\001\002\000" +
    "\004\157\u023f\001\002\000\004\111\u0240\001\002\000\004" +
    "\157\u0241\001\002\000\004\147\ufffb\001\002\000\006\146" +
    "\ufffc\165\ufffc\001\002\000\004\157\u0244\001\002\000\006" +
    "\110\105\111\104\001\002\000\004\157\u0246\001\002\000" +
    "\004\147\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0244\000\004\002\005\001\001\000\002\001\001\000" +
    "\004\061\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\014\015" +
    "\012\001\001\000\002\001\001\000\004\016\u023b\001\001" +
    "\000\004\015\015\001\001\000\002\001\001\000\004\061" +
    "\017\001\001\000\006\057\021\137\020\001\001\000\002" +
    "\001\001\000\004\060\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\030\001\001\000\006\006" +
    "\031\007\033\001\001\000\004\007\u019e\001\001\000\010" +
    "\010\037\033\041\037\042\001\001\000\002\001\001\000" +
    "\006\034\u01ed\035\u01ef\001\001\000\006\051\u01e1\052\u01df" +
    "\001\001\000\006\030\u01d7\031\u01d6\001\001\000\002\001" +
    "\001\000\006\040\u01b3\041\u01b1\001\001\000\004\061\u01a1" +
    "\001\001\000\004\061\u0198\001\001\000\006\025\u0182\026" +
    "\u0183\001\001\000\002\001\001\000\006\043\u0167\044\u0165" +
    "\001\001\000\006\022\u014f\023\u0150\001\001\000\006\017" +
    "\u0141\020\u0142\001\001\000\002\001\001\000\006\046\054" +
    "\047\053\001\001\000\012\013\072\050\073\056\070\067" +
    "\064\001\001\000\002\001\001\000\004\047\056\001\001" +
    "\000\004\061\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\071\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\064\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\063\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\062\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\072\160\073\157\001\001\000\004\140" +
    "\u013e\001\001\000\004\141\165\001\001\000\002\001\001" +
    "\000\004\073\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\074\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\075\175\076\221\077\214\100\223\101\176" +
    "\102\215\107\206\110\200\113\172\114\212\115\213\120" +
    "\225\123\216\125\177\142\204\001\001\000\002\001\001" +
    "\000\004\121\u013d\001\001\000\002\001\001\000\036\076" +
    "\u010f\077\214\100\223\101\176\102\215\107\206\110\200" +
    "\113\172\114\212\115\213\120\225\123\216\125\177\142" +
    "\204\001\001\000\002\001\001\000\006\122\u0139\123\233" +
    "\001\001\000\022\077\u0135\100\223\101\176\102\215\103" +
    "\u0136\120\225\123\216\125\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\104\u011d\105" +
    "\u011c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u0111\001\001\000" +
    "\022\077\u0107\100\223\101\176\102\215\103\u0108\120\225" +
    "\123\216\125\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\124\u0102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\100\231\102\230\111\227\123\216\125\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\122\234\123\233\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\122\236\123\233\001\001\000\002" +
    "\001\001\000\004\123\344\001\001\000\024\123\263\126" +
    "\242\127\247\130\264\131\255\132\256\133\243\135\262" +
    "\136\245\001\001\000\004\124\343\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\124\342\001\001\000\002" +
    "\001\001\000\022\123\263\126\242\127\247\130\264\131" +
    "\255\132\256\133\340\136\245\001\001\000\002\001\001" +
    "\000\022\123\263\126\242\127\247\130\264\131\255\132" +
    "\256\133\337\136\245\001\001\000\002\001\001\000\004" +
    "\124\336\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\124\335\001\001" +
    "\000\004\121\334\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\124\333\001\001\000\004\121\331\001\001\000" +
    "\002\001\001\000\004\124\273\001\001\000\022\123\263" +
    "\126\242\127\247\130\264\131\255\132\256\133\274\136" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\123\263\126\242\127" +
    "\247\130\264\131\255\132\256\133\327\136\245\001\001" +
    "\000\022\123\263\126\242\127\247\130\264\131\255\132" +
    "\256\133\326\136\245\001\001\000\022\123\263\126\242" +
    "\127\247\130\264\131\255\132\256\133\325\136\245\001" +
    "\001\000\022\123\263\126\242\127\247\130\264\131\255" +
    "\132\256\133\324\136\245\001\001\000\022\123\263\126" +
    "\242\127\247\130\264\131\255\132\256\133\323\136\245" +
    "\001\001\000\022\123\263\126\242\127\247\130\264\131" +
    "\255\132\256\133\322\136\245\001\001\000\022\123\263" +
    "\126\242\127\247\130\264\131\255\132\256\133\321\136" +
    "\245\001\001\000\002\001\001\000\022\123\263\126\242" +
    "\127\247\130\264\131\255\132\256\133\320\136\245\001" +
    "\001\000\022\123\263\126\242\127\247\130\264\131\255" +
    "\132\256\133\317\136\245\001\001\000\022\123\263\126" +
    "\242\127\247\130\264\131\255\132\256\133\316\136\245" +
    "\001\001\000\022\123\263\126\242\127\247\130\264\131" +
    "\255\132\256\133\315\136\245\001\001\000\022\123\263" +
    "\126\242\127\247\130\264\131\255\132\256\133\314\136" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\123\263\126\242\127\247\130\264\131\255\132\256" +
    "\133\243\135\346\136\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\112\352\123\355" +
    "\127\353\134\354\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\127\353" +
    "\134\357\001\001\000\002\001\001\000\006\127\353\134" +
    "\u0100\001\001\000\006\127\353\134\377\001\001\000\006" +
    "\127\353\134\376\001\001\000\002\001\001\000\006\127" +
    "\353\134\365\001\001\000\002\001\001\000\006\127\353" +
    "\134\375\001\001\000\006\127\353\134\374\001\001\000" +
    "\006\127\353\134\373\001\001\000\006\127\353\134\372" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\123\263\126\242\127\247\130\264\131\255\132\256" +
    "\133\243\135\u0104\136\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\075\u010d\076\221\077\214\100\223\101\176" +
    "\102\215\107\206\110\200\113\172\114\212\115\213\120" +
    "\225\123\216\125\177\142\204\001\001\000\036\076\u010f" +
    "\077\214\100\223\101\176\102\215\107\206\110\200\113" +
    "\172\114\212\115\213\120\225\123\216\125\177\142\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\116\u0116\117\u0113\123\u0114" +
    "\127\u0115\130\u0117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\117\u011b\123\u0114\127\u0115\130\u0117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\077\u0123\100\223\101\176\102\215\103\u0124\120\225\123" +
    "\216\125\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\123\263\126\242\127\247\130\264\131\255\132" +
    "\256\133\u0120\136\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\106\u0127\001\001\000\012\104\u0128\105\u011c" +
    "\143\u012a\144\u0129\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\077\u012d\100\223\101\176\102\215\120\225" +
    "\123\216\125\177\001\001\000\004\103\u012b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\106\u0130\001\001\000\002\001\001\000" +
    "\022\123\263\126\242\127\247\130\264\131\255\132\256" +
    "\133\u0132\136\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\122\u013b\123\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\074\u013f\001\001\000" +
    "\002\001\001\000\012\013\u014b\021\u014c\056\u014a\067\u0149" +
    "\001\001\000\004\020\u0144\001\001\000\002\001\001\000" +
    "\004\061\u0145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\u015b\024\u0157\056" +
    "\u015a\067\u0158\001\001\000\004\023\u0152\001\001\000\002" +
    "\001\001\000\004\061\u0153\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\065\u0162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\u0172\045\u016e\056\u0173\067\u016f\001\001\000\004" +
    "\044\u0168\001\001\000\002\001\001\000\004\061\u016a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\u017c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\u0180" +
    "\001\001\000\002\001\001\000\010\013\u018d\027\u018b\067" +
    "\u018a\001\001\000\004\026\u0185\001\001\000\002\001\001" +
    "\000\004\061\u0186\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\u0199\007\033\001\001\000" +
    "\004\007\u019e\001\001\000\010\010\037\033\041\037\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\037\033\041\037\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\u01a3\012\u01a4\001" +
    "\001\000\002\001\001\000\004\012\u01a6\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\u01aa\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\u01af\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\042\u01bb\067\u01ba\001" +
    "\001\000\004\041\u01b4\001\001\000\002\001\001\000\004" +
    "\061\u01b6\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\070\u01c3" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\070\u01d0\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\u01d4\001\001" +
    "\000\002\001\001\000\012\013\u01dd\032\u01da\056\u01dc\067" +
    "\u01db\001\001\000\002\001\001\000\004\031\u01d9\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\u01eb\053\u01e9\056" +
    "\u01ea\067\u01e8\001\001\000\004\052\u01e2\001\001\000\002" +
    "\001\001\000\004\061\u01e4\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\u0200\001\001\000\012" +
    "\013\u01f3\036\u01f0\056\u01f4\067\u01f1\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\066\u01f8\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\u01fc\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\037\033" +
    "\041\037\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\061\u0205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\u0209\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\u0210" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\u0214\001\001\000\010\003\u0216\004\u0217" +
    "\005\u0218\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\u022c\001\001\000\004\004\u021a\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\054\u021d\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\u021f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\u0224\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\061" +
    "\u022f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\u0234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\061\u0239\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\071\u0244" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private final List<ErrorAnalisis> errores = new ArrayList();
    private List<Parametro> parametros = new ArrayList();
    private List<String> tagIds = new ArrayList();
    private List<Tag> etiquetas = new ArrayList();
    private List<Tag> etiquetasHead = new ArrayList();
    private Stack<List<Tag>> pilaEtiquetas = new Stack();
    private Stack<List<Parametro>> pilaParams = new Stack();
    private String link;
    private String idCaptcha;
    private Tag gcicTag;

    private Process onLoad = null;
    private List<Process> processList = new ArrayList();
    private List<Instruction> instructionList = new ArrayList();
    private List<Variable> variableList = new ArrayList();
    private List<VariableTS> variableListGlobal = new ArrayList();
    private List<String> varsToAssign = new ArrayList();
    private List<IfType> ifTypesList = new ArrayList();
    private Stack<List<IfType>> pilaIfTypes = new Stack();
    private Stack<List<Instruction>> pilaInstructions = new Stack();
    private String errorCondition = "";
    private Stack<String> pilaConditions = new Stack();

    private OperatorValidator plusValidator = new PlusValidator();
    private OperatorValidator minusValidator = new MinusValidator();
    private OperatorValidator timesValidator = new TimesValidator();
    private OperatorValidator divideValidator = new DivideValidator();
    private OperatorValidator equalValidator = new EqualToValidator();
    private OperatorValidator notEqualValidator = new NotEqualToValidator();
    private OperatorValidator andValidator = new AndValidator();
    private OperatorValidator orValidator = new OrValidator();
    private NotValidator notValidator = new NotValidator();
    private OperatorValidator greaterValidator = new GreaterThanValidator();
    private OperatorValidator lessValidator = new LessThanValidator();
    private OperatorValidator greaterOrEqualValidator = new GreaterOrEqualValidator();
    private OperatorValidator lessOrEqualValidator = new LessOrEqualValidator();

    private VariableValidator varValidator = new VariableValidator();
    private AsignacionValidator assignValidator = new AsignacionValidator();

    private String currentProcess;
    private String errorVar = "";
    private int countOnLoad = 0;

    public List<ErrorAnalisis> getErrores() {
        return this.errores;
    }

    public List<VariableTS> getVariables() {
        return this.variableListGlobal;
    }

    public Tag getGCIC() {
        return this.gcicTag;
    }

    private boolean canAdded(String id) {
        for (String i: tagIds) {
            if (i.equals(id)) {
                return false;
            }
        }
        return true;
    }

    public void syntax_error(Symbol s) {
        Token t = (Token) s.value;
        String descripcion = "Error en: " + t.getLexema();
        StringBuilder solucion = new StringBuilder("Se esperaba ");
        expected_token_ids().forEach(x -> solucion.append(NameTokenGenerator.getName(x)).append(", "));
        errores.add(new ErrorAnalisis(t.getLinea(), t.getColumna(), TipoError.SINTACTICO, descripcion, solucion.toString()));
        System.out.println(t.getLexema() + ", linea: " + t.getLinea() + ", col: " + t.getColumna() + ", descripcion: " + descripcion.toString());
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        Token t = (Token) cur_token.value;
        System.out.println("Error irrecuperable " + t.getLexema());
    }

    protected int error_sync_size() {
        return 1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // gcic ::= LESS_THAN C_GCIC paramsGCIC GREATER_THAN textTag head body LESS_THAN SLASH C_GCIC GREATER_THAN textTag 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Tag h = (Tag)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Tag b = (Tag)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
        parametros = pilaParams.pop();
        gcicTag = new GCIC(h, b, parametros);
        parametros = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("gcic",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= gcic EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // gcic ::= GREATER_THAN textTag 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("gcic",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // paramsGCIC ::= paramsGCIC paramGCIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsGCIC",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // paramsGCIC ::= paramGCIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsGCIC",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // paramGCIC ::= OPEN_BRACKET optionParamGCIC CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramGCIC",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // optionParamGCIC ::= NAME ASSIGN QOUTE_MARK NAME_PARAM QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamGCIC",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // optionParamGCIC ::= ID ASSIGN QOUTE_MARK optionId QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        if (canAdded(v)) {
            parametros.add(new Parametro(n.getLexema(), v));
            idCaptcha = v;
            tagIds.add(v);
        } else {
            errores.add(new ErrorAnalisis(n.getLinea(), n.getColumna(), TipoError.SEMANTICO, "El id especificado esta repetido", "Cambie el nombre del id"));
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamGCIC",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              Tag RESULT =null;

            pilaParams.push(parametros);
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // head ::= NT$0 LESS_THAN C_HEAD GREATER_THAN textTag headTags LESS_THAN SLASH C_HEAD GREATER_THAN textTag 
            {
              Tag RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Tag) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		
            RESULT = new Head(etiquetasHead);
            etiquetasHead = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("head",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // headTags ::= link title 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("headTags",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // headTags ::= title link 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("headTags",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // title ::= LESS_THAN C_TITLE GREATER_THAN textTag LESS_THAN SLASH C_TITLE GREATER_THAN textTag 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
        etiquetasHead.add(new Title(t.trim()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("title",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // link ::= LESS_THAN C_LINK href GREATER_THAN textTag LESS_THAN SLASH C_LINK GREATER_THAN textTag 
            {
              Object RESULT =null;
		
        etiquetasHead.add(new Link(parametros));
        parametros = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("link",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // href ::= OPEN_BRACKET HREF ASSIGN QOUTE_MARK URL QOUTE_MARK CLOSE_BRACKET 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
        link = v.getLexema();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("href",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // body ::= LESS_THAN C_BODY background GREATER_THAN textTag bodyTags LESS_THAN SLASH C_BODY GREATER_THAN textTag 
            {
              Tag RESULT =null;
		
        RESULT = new Body(etiquetas, parametros);
        parametros = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bodyTags ::= bodyTags bodyTag 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bodyTags",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bodyTags ::= bodyTag 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bodyTags",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bodyTag ::= LESS_THAN nameTagBody GREATER_THAN textTag 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bodyTag",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bodyTag ::= LESS_THAN C_BR GREATER_THAN textTag 
            {
              Object RESULT =null;
		
        etiquetas.add(new Br());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bodyTag",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // nameTagBody ::= C_SPAM paramsSPAM GREATER_THAN textTag LESS_THAN SLASH C_SPAM 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            etiquetas.add(new Span(t, parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // nameTagBody ::= C_INPUT paramsINPUT GREATER_THAN textTag LESS_THAN SLASH C_INPUT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            etiquetas.add(new Input(t, parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // nameTagBody ::= C_TEXTAREA paramsTEXTA GREATER_THAN textTag LESS_THAN SLASH C_TEXTAREA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            etiquetas.add(new TextArea(t, parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // nameTagBody ::= inicioSelect textTag optionsTag LESS_THAN SLASH C_SELECT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
            Select sel = new Select(etiquetas, t, parametros);
            parametros = new ArrayList();
            etiquetas = pilaEtiquetas.pop();
            etiquetas.add(sel);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // nameTagBody ::= C_IMG paramsIMG GREATER_THAN textTag LESS_THAN SLASH C_IMG 
            {
              Object RESULT =null;
		
            etiquetas.add(new Img(parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // nameTagBody ::= C_BUTTON paramsBTN GREATER_THAN textTag LESS_THAN SLASH C_BUTTON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            etiquetas.add(new Button(t, parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // nameTagBody ::= C_H1 paramsH1 GREATER_THAN textTag LESS_THAN SLASH C_H1 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            etiquetas.add(new H1(t, parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // nameTagBody ::= C_P paramsP GREATER_THAN textTag LESS_THAN SLASH C_P 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            etiquetas.add(new P(t, parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // nameTagBody ::= inicioDIV textTag LESS_THAN SLASH C_DIV 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            etiquetas = pilaEtiquetas.pop();
            etiquetas.add(new Div(null, t, parametros));
            parametros = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // nameTagBody ::= inicioDIV textTag bodyTags LESS_THAN SLASH C_DIV 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
            parametros = pilaParams.pop();
            Div div = new Div(etiquetas, t, parametros);
            parametros = new ArrayList();
            etiquetas = pilaEtiquetas.pop();
            etiquetas.add(div);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // nameTagBody ::= C_SCRIPTING GREATER_THAN procesos LESS_THAN DIVIDE C_SCRIPTING 
            {
              Object RESULT =null;
		
            etiquetas.add(new Scripting(onLoad, processList));
            onLoad = null;
            processList = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameTagBody",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // inicioSelect ::= C_SELECT paramsSEL GREATER_THAN 
            {
              Object RESULT =null;
		
        pilaEtiquetas.push(etiquetas);
        etiquetas = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicioSelect",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // inicioDIV ::= C_DIV paramsDIV GREATER_THAN 
            {
              Object RESULT =null;
		
        pilaEtiquetas.push(etiquetas);
        etiquetas = new ArrayList();
        pilaParams.push(parametros);
        parametros = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicioDIV",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // optionsTag ::= optionsTag optionTag 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionsTag",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // optionsTag ::= optionTag 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionsTag",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // optionTag ::= LESS_THAN C_OPTION GREATER_THAN textTag LESS_THAN SLASH C_OPTION GREATER_THAN textTag 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
        etiquetas.add(new Option(o));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionTag",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // background ::= OPEN_BRACKET BACKGROUND ASSIGN QOUTE_MARK color QOUTE_MARK CLOSE_BRACKET 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("background",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // textTag ::= TEXT_TAG 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("textTag",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // textTag ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("textTag",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // paramsSPAM ::= paramsSPAM paramSPAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsSPAM",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // paramsSPAM ::= paramSPAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsSPAM",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // paramSPAM ::= OPEN_BRACKET optionParamSPAM CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramSPAM",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // optionParamSPAM ::= paramColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamSPAM",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // optionParamSPAM ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamSPAM",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // optionParamSPAM ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamSPAM",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // paramsINPUT ::= paramsINPUT paramINPUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsINPUT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // paramsINPUT ::= paramINPUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsINPUT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // paramINPUT ::= OPEN_BRACKET optionParamINPUT CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramINPUT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // optionParamINPUT ::= TYPE ASSIGN QOUTE_MARK type QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamINPUT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // optionParamINPUT ::= paramColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamINPUT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // optionParamINPUT ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamINPUT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // optionParamINPUT ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamINPUT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // paramsTEXTA ::= paramsTEXTA paramTEXTA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsTEXTA",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // paramsTEXTA ::= paramTEXTA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsTEXTA",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // paramTEXTA ::= OPEN_BRACKET optionParamTEXTA CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramTEXTA",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // optionParamTEXTA ::= ROWS ASSIGN QOUTE_MARK ENTERO QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamTEXTA",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // optionParamTEXTA ::= COLS ASSIGN QOUTE_MARK ENTERO QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamTEXTA",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // optionParamTEXTA ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamTEXTA",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // optionParamTEXTA ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamTEXTA",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // paramsSEL ::= paramsSEL paramSEL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsSEL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // paramsSEL ::= paramSEL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsSEL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // paramSEL ::= OPEN_BRACKET optionParamSEL CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramSEL",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // optionParamSEL ::= paramColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamSEL",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // optionParamSEL ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamSEL",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // optionParamSEL ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamSEL",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // paramsDIV ::= paramsDIV paramDIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsDIV",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // paramsDIV ::= paramDIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsDIV",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // paramDIV ::= OPEN_BRACKET optionParamDIV CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramDIV",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // optionParamDIV ::= BACKGROUND ASSIGN QOUTE_MARK color QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamDIV",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // optionParamDIV ::= CLASS ASSIGN QOUTE_MARK clase QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamDIV",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // optionParamDIV ::= paramColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamDIV",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // optionParamDIV ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamDIV",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // optionParamDIV ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamDIV",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // paramsIMG ::= paramsIMG paramIMG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsIMG",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // paramsIMG ::= paramIMG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsIMG",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // paramIMG ::= OPEN_BRACKET optionParamIMG CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramIMG",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // optionParamIMG ::= ALT ASSIGN QOUTE_MARK NAME_PARAM QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamIMG",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // optionParamIMG ::= HEIGHT ASSIGN QOUTE_MARK size QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamIMG",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // optionParamIMG ::= WIDTH ASSIGN QOUTE_MARK size QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamIMG",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // optionParamIMG ::= SRC ASSIGN QOUTE_MARK URL QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamIMG",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // optionParamIMG ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamIMG",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // size ::= SIZE 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = s.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("size",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // size ::= WH_VAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = s.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("size",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // paramsBTN ::= paramsBTN paramBTN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsBTN",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // paramsBTN ::= paramBTN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsBTN",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // paramBTN ::= OPEN_BRACKET optionParamBTN CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramBTN",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // optionParamBTN ::= BACKGROUND ASSIGN QOUTE_MARK color QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamBTN",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // optionParamBTN ::= ONCLICK ASSIGN QOUTE_MARK PROCESS_NAME OPEN_ROUND_BRACKET CLOSE_ROUND_BRACKET QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamBTN",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // optionParamBTN ::= paramColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamBTN",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // optionParamBTN ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamBTN",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // optionParamBTN ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamBTN",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // paramsH1 ::= paramsH1 paramH1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsH1",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // paramsH1 ::= paramH1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsH1",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // paramH1 ::= OPEN_BRACKET optionParamH1 CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramH1",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // optionParamH1 ::= paramColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamH1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // optionParamH1 ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamH1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // optionParamH1 ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamH1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // paramsP ::= paramsP paramP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsP",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // paramsP ::= paramP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsP",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // paramP ::= OPEN_BRACKET optionParamP CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // optionParamP ::= paramColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamP",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // optionParamP ::= paramId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamP",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // optionParamP ::= optionTextParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionParamP",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // optionTextParam ::= FONT_SIZE ASSIGN QOUTE_MARK SIZE QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v.getLexema()));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionTextParam",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // optionTextParam ::= FONT_FAMILY ASSIGN QOUTE_MARK font QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionTextParam",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // optionTextParam ::= TEXT_ALIGN ASSIGN QOUTE_MARK align QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionTextParam",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // paramId ::= ID ASSIGN QOUTE_MARK optionId QOUTE_MARK 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        if (canAdded(v)) {
            parametros.add(new Parametro(n.getLexema(), v));
            tagIds.add(v);
        } else {
            errores.add(new ErrorAnalisis(n.getLinea(), n.getColumna(), TipoError.SEMANTICO, "El id especificado esta repetido", "Cambie el nombre del id"));
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramId",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // optionId ::= ID_PARAM 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = i.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionId",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // optionId ::= NAME_PARAM 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = i.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionId",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // paramColor ::= COLOR ASSIGN QOUTE_MARK color QOUTE_MARK 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parametros.add(new Parametro(n.getLexema(), v));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramColor",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // color ::= COLOR_VALUE 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // color ::= BLACK 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // color ::= OLIVE 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // color ::= TEAL 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // color ::= RED 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // color ::= BLUE 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // color ::= MARRON 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // color ::= NAVY 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // color ::= GRAY 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // color ::= LIME 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // color ::= FUCHSIA 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // color ::= GREEN 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // color ::= PURPLE 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // color ::= SILVER 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // color ::= YELLOW 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // color ::= AQUA 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("color",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // font ::= COURIER 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = f.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("font",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // font ::= VERDANA 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = f.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("font",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // font ::= ARIAL 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = f.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("font",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // font ::= GENEVA 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = f.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("font",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // font ::= SANS_SERIF 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = f.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("font",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // align ::= LEFT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("align",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // align ::= CENTER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("align",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // align ::= RIGHT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("align",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // align ::= JUSTIFY 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("align",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // type ::= TEXT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // type ::= NUMBER 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // type ::= RADIO 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // type ::= CHECKBOX 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // procesos ::= procesos process 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procesos",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // procesos ::= process 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procesos",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NT$1 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
currentProcess = p.getLexema() + ++countOnLoad;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // process ::= ON_LOAD NT$1 processBody 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            if (onLoad == null) {
                onLoad = new Process(p.getLexema() + countOnLoad++, instructionList);
            } else {
                errores.add(new ErrorAnalisis(p.getLinea(), p.getColumna(), TipoError.SEMANTICO, "Hay ma de un proceso ON_LOAD", "Deje solo un metodo ON_LOAD en el proceso"));
            }
            instructionList = new ArrayList();
            variableList = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("process",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NT$2 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
currentProcess = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // process ::= PROCESS_NAME NT$2 processBody 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            boolean exists = false;

            for (Process pp:  processList) {
                if (pp.getName().equals(p.getLexema())) {
                    exists = true;
                }
            }
            if (exists) {
                errores.add(new ErrorAnalisis(p.getLinea(), p.getColumna(), TipoError.SEMANTICO, "El proceso con el nombre especificado ya existe", "Cambie el nombre del proceso"));
            } else {
                processList.add(new Process(p.getLexema(), instructionList));
            }
            instructionList = new ArrayList();
            variableList = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("process",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // processBody ::= OPEN_ROUND_BRACKET CLOSE_ROUND_BRACKET OPEN_BRACKET CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("processBody",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // processBody ::= OPEN_ROUND_BRACKET CLOSE_ROUND_BRACKET OPEN_BRACKET instructions CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("processBody",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // instructions ::= instructions instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // instructions ::= instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // instruction ::= oneStatement SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$3 ::= 
            {
              Object RESULT =null;

            pilaIfTypes.push(ifTypesList);
            ifTypesList = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // instruction ::= NT$3 ifStatement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            if (errorCondition.isEmpty()) {
                IfStatement ifSt = new IfStatement(pilaConditions.pop(), instructionList, ifTypesList);
                instructionList = pilaInstructions.pop();
                ifTypesList = pilaIfTypes.pop();
                instructionList.add(ifSt);
            } else {
                instructionList = pilaInstructions.pop();
                errores.add(new ErrorAnalisis(i.getLinea(), i.getColumna(), TipoError.SEMANTICO, errorCondition, "Verifique la condicion ingresada"));
                errorCondition = "";
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // instruction ::= repeatStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // instruction ::= whileStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // instruction ::= insertStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // oneStatement ::= fullStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oneStatement",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // oneStatement ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oneStatement",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // oneStatement ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oneStatement",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // oneStatement ::= otherFunctions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oneStatement",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // fullStatement ::= tipo GLOBAL_MODE variables ASSIGN assign 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TypeToken t = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            if (errorVar.isEmpty()) {
                List<String> erroresA = assignValidator.validate(variableList, varsToAssign, t.getType(), a);

                if (errores.isEmpty()) {
                    varsToAssign.forEach(v -> {
                        variableList.add(new Variable(v, t.getType(), true));
                        variableListGlobal.add(new VariableTS(v, t.getType(), "@global", currentProcess));
                    });
                    instructionList.add(new FullStatement(t.getType(), true, varsToAssign, a.getText()));
                } else {
                    erroresA.forEach(e -> errores.add(new ErrorAnalisis(t.getLinea(), t.getColumna(), TipoError.SEMANTICO, e, "Verifique la declaracion")));
                }
            } else {
                errores.add(new ErrorAnalisis(t.getLinea(), t.getColumna(), TipoError.SEMANTICO, errorVar, "Verifique la declaracion"));
                errorVar = "";
            }
            varsToAssign = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fullStatement",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // fullStatement ::= tipo variables ASSIGN assign 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TypeToken t = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            if (errorVar.isEmpty()) {
                List<String> erroresA = assignValidator.validate(variableList, varsToAssign, t.getType(), a);

                if (errores.isEmpty()) {
                    varsToAssign.forEach(v -> {
                        variableList.add(new Variable(v, t.getType(), true));
                        variableListGlobal.add(new VariableTS(v, t.getType(), "-", currentProcess));
                    });
                    instructionList.add(new FullStatement(t.getType(), false, varsToAssign, a.getText()));
                } else {
                    erroresA.forEach(e -> errores.add(new ErrorAnalisis(t.getLinea(), t.getColumna(), TipoError.SEMANTICO, e, "Verifique la declaracion")));
                }
            } else {
                errores.add(new ErrorAnalisis(t.getLinea(), t.getColumna(), TipoError.SEMANTICO, errorVar, "Verifique la declaracion"));
                errorVar = "";
            }
            varsToAssign = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fullStatement",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // statement ::= tipo GLOBAL_MODE variables 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeToken t = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        List<String> erroresA = varValidator.validate(variableList, varsToAssign);

        if (errores.isEmpty()) {
            varsToAssign.forEach(v -> {
                variableList.add(new Variable(v, t.getType(), false));
                variableListGlobal.add(new VariableTS(v, t.getType(), "@global", currentProcess));
            });
            instructionList.add(new SimpleStatement(t.getType(), true, varsToAssign));
        } else {
            erroresA.forEach(e -> errores.add(new ErrorAnalisis(t.getLinea(), t.getColumna(), TipoError.SEMANTICO, e, "Verifique la declaracion")));
        }
        varsToAssign = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // statement ::= tipo variables 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeToken t = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        List<String> erroresA = varValidator.validate(variableList, varsToAssign);

        if (errores.isEmpty()) {
            varsToAssign.forEach(v -> {
                variableList.add(new Variable(v, t.getType(), false));
                variableListGlobal.add(new VariableTS(v, t.getType(), "-", currentProcess));
            });
            instructionList.add(new SimpleStatement(t.getType(), false, varsToAssign));
        } else {
            erroresA.forEach(e -> errores.add(new ErrorAnalisis(t.getLinea(), t.getColumna(), TipoError.SEMANTICO, e, "Verifique la declaracion")));
        }
        varsToAssign = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // assignment ::= variable ASSIGN assign 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            if (errorVar.isEmpty()) {
                String error = assignValidator.validate(variableList, v, a);

                if (error.isEmpty()) {
                    instructionList.add(new Assignment(v, a.getText()));
                } else {
                    errores.add(new ErrorAnalisis(t.getLinea(), t.getColumna(), TipoError.SEMANTICO, error, "Verifique la asignacion"));
                }
            } else {
                errores.add(new ErrorAnalisis(t.getLinea(), t.getColumna(), TipoError.SEMANTICO, errorVar, "Verifique la asignacion"));
                errorVar = "";
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // ifStatement ::= simpleIf instructionBlock END ifTypes 
            {
              Token RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT = i;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ifStatement ::= simpleIf oneStatement SEMI ifTypes 
            {
              Token RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT = i;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // simpleIf ::= IF OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET THEN 
            {
              Token RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            if (c.getTipo() == null) {
                errorCondition = "La condicion contiene una operacion entre tipos no valida";
                c.setText(errorCondition);
            } else if (c.getTipo() != TipoDato.BOOLEAN) {
                errorCondition = "El tipo que retorna la expresion debe ser booleano";
                c.setText(errorCondition);
            }
            pilaConditions.push(c.getText());
            pilaInstructions.push(instructionList);
            instructionList = new ArrayList();
            RESULT = i;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleIf",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // NT$4 ::= 
            {
              Token RESULT =null;

            pilaInstructions.push(instructionList);
            instructionList = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // ifTypes ::= ELSE NT$4 instructionBlock END 
            {
              Token RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Token) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            ifTypesList.add(new ElseStatement(instructionList));
            instructionList = pilaInstructions.pop();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifTypes",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // NT$5 ::= 
            {
              Token RESULT =null;

            pilaInstructions.push(instructionList);
            instructionList = new ArrayList();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // ifTypes ::= ELSE NT$5 oneStatement SEMI 
            {
              Token RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Token) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            ifTypesList.add(new ElseStatement(instructionList));
            instructionList = pilaInstructions.pop();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifTypes",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // ifTypes ::= ELSE ifStatement 
            {
              Token RESULT =null;
		
            ifTypesList.add(new ElseIfStatement(pilaConditions.pop(), instructionList));
            instructionList = pilaInstructions.pop();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifTypes",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // ifTypes ::= 
            {
              Token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifTypes",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // repeatStatement ::= simpleRepeat instructionBlock END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeatStatement",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // repeatStatement ::= simpleRepeat oneStatement SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeatStatement",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // simpleRepeat ::= REPEAT OPEN_ROUND_BRACKET varInicio CLOSE_ROUND_BRACKET HUNTIL OPEN_ROUND_BRACKET limit CLOSE_ROUND_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleRepeat",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // varInicio ::= fullStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInicio",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // varInicio ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInicio",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // limit ::= mathExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("limit",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // limit ::= variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("limit",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // mathExpr ::= mathExpr PLUS mathExpr 
            {
              Expresion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // mathExpr ::= mathExpr MINUS mathExpr 
            {
              Expresion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // mathExpr ::= mathExpr TIMES mathExpr 
            {
              Expresion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // mathExpr ::= mathExpr DIVIDE mathExpr 
            {
              Expresion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // mathExpr ::= OPEN_ROUND_BRACKET mathExpr CLOSE_ROUND_BRACKET 
            {
              Expresion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // mathExpr ::= OPEN_ROUND_BRACKET mathExpr CLOSE_ROUND_BRACKET PLUS mathExpr 
            {
              Expresion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // mathExpr ::= OPEN_ROUND_BRACKET mathExpr CLOSE_ROUND_BRACKET MINUS mathExpr 
            {
              Expresion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // mathExpr ::= OPEN_ROUND_BRACKET mathExpr CLOSE_ROUND_BRACKET TIMES mathExpr 
            {
              Expresion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // mathExpr ::= OPEN_ROUND_BRACKET mathExpr CLOSE_ROUND_BRACKET DIVIDE mathExpr 
            {
              Expresion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // mathExpr ::= numero 
            {
              Expresion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExpr",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // whileStatement ::= simpleWhile instructionBlock END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whileStatement",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // whileStatement ::= simpleWhile oneStatement SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whileStatement",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // simpleWhile ::= WHILE OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET THENWHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleWhile",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // instructionBlock ::= INIT OPEN_BRACE COLON instructions COLON CLOSE_BRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionBlock",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // insertStatement ::= INSERT OPEN_ROUND_BRACKET insertValues CLOSE_ROUND_BRACKET SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("insertStatement",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // insertValues ::= insertValues COMMA insertValue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("insertValues",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // insertValues ::= insertValue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("insertValues",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // insertValue ::= literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("insertValue",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // insertValue ::= numero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("insertValue",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // insertValue ::= variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("insertValue",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // tipo ::= INTEGER 
            {
              TypeToken RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeToken t = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // tipo ::= STRING 
            {
              TypeToken RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeToken t = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // tipo ::= BOOLEAN 
            {
              TypeToken RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeToken t = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // tipo ::= CHAR 
            {
              TypeToken RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeToken t = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // tipo ::= DECIMAL 
            {
              TypeToken RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeToken t = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // variables ::= variables COMMA variable 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		varsToAssign.add(v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // variables ::= variable 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		varsToAssign.add(v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // variable ::= ID_VAR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = v.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // assign ::= expr 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // expr ::= expr PLUS expr 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = plusValidator.validate(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // expr ::= expr MINUS expr 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = minusValidator.validate(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // expr ::= expr TIMES expr 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = timesValidator.validate(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // expr ::= expr DIVIDE expr 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = divideValidator.validate(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // expr ::= expr EQUAL_TO expr 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = equalValidator.validate(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // expr ::= expr NOT_EQTUAL_TO expr 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = notEqualValidator.validate(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // expr ::= expr GREATER_THAN expr 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = greaterValidator.validate(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // expr ::= expr LESS_THAN expr 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = lessValidator.validate(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // expr ::= expr GREATER_THAN_OR_EQUAL_TO expr 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = greaterOrEqualValidator.validate(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // expr ::= expr LESS_THAN_OR_EQUAL_TO expr 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = lessOrEqualValidator.validate(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // expr ::= expr AND expr 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = andValidator.validate(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // expr ::= expr OR expr 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = orValidator.validate(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // expr ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Expresion(e.getTipo(), "(" + e.getText() + ")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // expr ::= NOT expr 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = notValidator.validate(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // expr ::= values 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion v = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // expr ::= variable 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Expresion tempExpr = varValidator.validate(variableList, v, currentProcess);

            if (tempExpr.getTipo() == null) {
                errorVar = tempExpr.getText();
            }

            RESULT = tempExpr;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // expr ::= specialFunctions 
            {
              Expresion RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion sf = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = sf;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // specialFunctions ::= ASC parameter 
            {
              Expresion RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeToken sf = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expresion(sf.getType(), sf.getLexema() + "(" + p + ")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specialFunctions",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // specialFunctions ::= DESC parameter 
            {
              Expresion RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeToken sf = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expresion(sf.getType(), sf.getLexema() + "(" + p + ")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specialFunctions",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // specialFunctions ::= LETPAR_NUM parameter 
            {
              Expresion RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeToken sf = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expresion(sf.getType(), sf.getLexema() + "(" + p + ")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specialFunctions",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // specialFunctions ::= LETIMPAR_NUM parameter 
            {
              Expresion RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeToken sf = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expresion(sf.getType(), sf.getLexema() + "(" + p + ")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specialFunctions",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // specialFunctions ::= REVERSE parameter 
            {
              Expresion RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeToken sf = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expresion(sf.getType(), sf.getLexema() + "(" + p + ")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specialFunctions",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // specialFunctions ::= CARACTER_ALEATORIO roundBrackets 
            {
              Expresion RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeToken sf = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Expresion(sf.getType(), sf.getLexema() + "()");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specialFunctions",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // specialFunctions ::= NUM_ALEATORIO roundBrackets 
            {
              Expresion RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeToken sf = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Expresion(sf.getType(), sf.getLexema() + "()");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specialFunctions",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // specialFunctions ::= ELEMENT_BY_ID parameter 
            {
              Expresion RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeToken sf = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expresion(sf.getType(), "document.getElementById(" + p + ").value");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specialFunctions",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // otherFunctions ::= EXIT roundBrackets 
            {
              Object RESULT =null;
		int ofleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token of = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		instructionList.add(new Function(of.getLexema(), "(\"" + idCaptcha + "\")"));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otherFunctions",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // otherFunctions ::= ALERT_INFO parameter 
            {
              Object RESULT =null;
		int ofleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token of = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		instructionList.add(new Function("alert", "(" + p + ")"));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otherFunctions",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // otherFunctions ::= REDIRECT roundBrackets 
            {
              Object RESULT =null;
		int ofleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token of = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		instructionList.add(new Function(of.getLexema(), "(\"" + link + "\", \"" + idCaptcha + "\")"));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otherFunctions",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // parameter ::= OPEN_ROUND_BRACKET expr CLOSE_ROUND_BRACKET 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            if (e.getTipo() != TipoDato.STRING) {
                errorVar = "El tipo del parametro debe de ser tipo string";
            }
            RESULT = e.getText();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // parameter ::= OPEN_ROUND_BRACKET DATOSCRIPT CLOSE_ROUND_BRACKET 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            if (canAdded(d.getLexema())) {
                System.out.println("No existe una etiqueta con el id especificado");
                errores.add(new ErrorAnalisis(d.getLinea(), d.getColumna(), TipoError.SEMANTICO, "No existe una etiqueta con el id especificado", "Ingrese un id de una etiqueta existente"));
            }
            RESULT = "'" + d.getLexema() + "'";
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // roundBrackets ::= OPEN_ROUND_BRACKET CLOSE_ROUND_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("roundBrackets",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // values ::= numero 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion v = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("values",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // values ::= caracter 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion v = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("values",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // values ::= literal 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion v = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("values",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // values ::= bool 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion v = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("values",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // numero ::= ENTERO2 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeToken n = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expresion(n.getType(), n.getLexema());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numero",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // numero ::= DECIMAL_VAL 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeToken n = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expresion(n.getType(), n.getLexema());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numero",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // caracter ::= CHAR_VAL 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeToken c = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expresion(c.getType(), "'" + c.getLexema() + "'");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caracter",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // literal ::= LITERAL 
            {
              Expresion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeToken l = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expresion(l.getType(), l.getLexema());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // bool ::= TRUE 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeToken b = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expresion(b.getType(), b.getLexema());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // bool ::= FALSE 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeToken b = (TypeToken)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expresion(b.getType(), b.getLexema());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
