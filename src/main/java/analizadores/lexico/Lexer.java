// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.flex

package analizadores.lexico;

import java.util.ArrayList;
import java.util.List;
import model.errores.ErrorAnalisis;
import model.errores.TipoError;
import model.scripting.TipoDato;
import model.Token;
import model.TypeToken;
import static analizadores.sintactico.Sym.*;

import java_cup.runtime.Symbol;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int TAG = 2;
  public static final int PARAMETER = 4;
  public static final int VALUE = 6;
  public static final int SCRIPTING = 8;
  public static final int LITERALS = 10;
  public static final int OTHER = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u7300\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\1\22\0\1\3\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\10\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\0\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\45"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\45\1\64\1\0\1\65\1\0\1\66\1\0\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117"+
    "\1\120\1\121\1\122\1\123\7\0\1\1\32\0\1\1"+
    "\11\0\1\45\12\0\1\45\4\0\1\45\5\0\27\45"+
    "\1\0\37\45\1\0\u01ca\45\4\0\14\45\16\0\5\45"+
    "\7\0\1\45\1\0\1\45\21\0\160\124\5\45\1\0"+
    "\2\45\2\0\4\45\1\0\1\45\6\0\1\45\1\0"+
    "\3\45\1\0\1\45\1\0\24\45\1\0\123\45\1\0"+
    "\213\45\1\0\7\124\246\45\1\0\46\45\2\0\1\45"+
    "\6\0\51\45\10\0\55\124\1\0\1\124\1\0\2\124"+
    "\1\0\2\124\1\0\1\124\10\0\33\45\4\0\4\45"+
    "\35\0\13\124\5\0\53\45\25\124\12\125\4\0\2\45"+
    "\1\124\143\45\1\0\1\45\7\124\2\0\6\124\2\45"+
    "\2\124\1\0\4\124\2\45\12\125\3\45\2\0\1\45"+
    "\20\0\1\45\1\124\36\45\33\124\2\0\131\45\13\124"+
    "\1\45\16\0\12\125\41\45\11\124\2\45\4\0\1\45"+
    "\2\0\1\124\2\0\26\45\4\124\1\45\11\124\1\45"+
    "\3\124\1\45\5\124\22\0\31\45\3\124\4\0\13\45"+
    "\65\0\25\45\1\0\10\45\25\0\17\124\1\0\41\124"+
    "\66\45\3\124\1\45\22\124\1\45\7\124\12\45\2\124"+
    "\2\0\12\125\1\0\20\45\3\124\1\0\10\45\2\0"+
    "\2\45\2\0\26\45\1\0\7\45\1\0\1\45\3\0"+
    "\4\45\2\0\1\124\1\45\7\124\2\0\2\124\2\0"+
    "\3\124\1\45\10\0\1\124\4\0\2\45\1\0\3\45"+
    "\2\124\2\0\12\125\2\45\12\0\1\45\1\0\1\124"+
    "\2\0\3\124\1\0\6\45\4\0\2\45\2\0\26\45"+
    "\1\0\7\45\1\0\2\45\1\0\2\45\1\0\2\45"+
    "\2\0\1\124\1\0\5\124\4\0\2\124\2\0\3\124"+
    "\3\0\1\124\7\0\4\45\1\0\1\45\7\0\12\125"+
    "\2\124\3\45\1\124\13\0\3\124\1\0\11\45\1\0"+
    "\3\45\1\0\26\45\1\0\7\45\1\0\2\45\1\0"+
    "\5\45\2\0\1\124\1\45\10\124\1\0\3\124\1\0"+
    "\3\124\2\0\1\45\17\0\2\45\2\124\2\0\12\125"+
    "\11\0\1\45\6\124\1\0\3\124\1\0\10\45\2\0"+
    "\2\45\2\0\26\45\1\0\7\45\1\0\2\45\1\0"+
    "\5\45\2\0\1\124\1\45\7\124\2\0\2\124\2\0"+
    "\3\124\10\0\2\124\4\0\2\45\1\0\3\45\2\124"+
    "\2\0\12\125\1\0\1\45\20\0\1\124\1\45\1\0"+
    "\6\45\3\0\3\45\1\0\4\45\3\0\2\45\1\0"+
    "\1\45\1\0\2\45\3\0\2\45\3\0\3\45\3\0"+
    "\14\45\4\0\5\124\3\0\3\124\1\0\4\124\2\0"+
    "\1\45\6\0\1\124\16\0\12\125\20\0\5\124\10\45"+
    "\1\0\3\45\1\0\27\45\1\0\20\45\3\0\1\45"+
    "\7\124\1\0\3\124\1\0\4\124\7\0\2\124\1\0"+
    "\3\45\5\0\2\45\2\124\2\0\12\125\20\0\1\45"+
    "\3\124\1\0\10\45\1\0\3\45\1\0\27\45\1\0"+
    "\12\45\1\0\5\45\2\0\1\124\1\45\7\124\1\0"+
    "\3\124\1\0\4\124\7\0\2\124\7\0\1\45\1\0"+
    "\2\45\2\124\2\0\12\125\1\0\2\45\15\0\4\124"+
    "\1\0\10\45\1\0\3\45\1\0\51\45\2\124\1\45"+
    "\7\124\1\0\3\124\1\0\4\124\1\45\5\0\3\45"+
    "\1\124\7\0\3\45\2\124\2\0\12\125\12\0\6\45"+
    "\2\0\2\124\1\0\22\45\3\0\30\45\1\0\11\45"+
    "\1\0\1\45\2\0\7\45\3\0\1\124\4\0\6\124"+
    "\1\0\1\124\1\0\10\124\6\0\12\125\2\0\2\124"+
    "\15\0\60\45\1\124\2\45\7\124\5\0\7\45\10\124"+
    "\1\0\12\125\47\0\2\45\1\0\1\45\1\0\5\45"+
    "\1\0\30\45\1\0\1\45\1\0\12\45\1\124\2\45"+
    "\11\124\1\45\2\0\5\45\1\0\1\45\1\0\6\124"+
    "\2\0\12\125\2\0\4\45\40\0\1\45\27\0\2\124"+
    "\6\0\12\125\13\0\1\124\1\0\1\124\1\0\1\124"+
    "\4\0\2\124\10\45\1\0\44\45\4\0\24\124\1\0"+
    "\2\124\5\45\13\124\1\0\44\124\11\0\1\124\71\0"+
    "\53\45\24\124\1\45\12\125\6\0\6\45\4\124\4\45"+
    "\3\124\1\45\3\124\2\45\7\124\3\45\4\124\15\45"+
    "\14\124\1\45\1\124\12\125\4\124\2\0\46\45\1\0"+
    "\1\45\5\0\1\45\2\0\53\45\1\0\115\45\1\0"+
    "\4\45\2\0\7\45\1\0\1\45\1\0\4\45\2\0"+
    "\51\45\1\0\4\45\2\0\41\45\1\0\4\45\2\0"+
    "\7\45\1\0\1\45\1\0\4\45\2\0\17\45\1\0"+
    "\71\45\1\0\4\45\2\0\103\45\2\0\3\124\40\0"+
    "\20\45\20\0\126\45\2\0\6\45\3\0\u016c\45\2\0"+
    "\21\45\1\1\32\45\5\0\113\45\3\0\3\124\10\45"+
    "\7\0\15\45\1\0\4\45\3\124\13\0\22\45\3\124"+
    "\13\0\22\45\2\124\14\0\15\45\1\0\3\45\1\0"+
    "\2\124\14\0\64\45\40\124\3\0\1\45\4\0\1\45"+
    "\1\124\2\0\12\125\41\0\3\124\2\0\12\125\6\0"+
    "\131\45\7\0\5\45\2\124\42\45\1\124\1\45\5\0"+
    "\106\45\12\0\37\45\1\0\14\124\4\0\14\124\12\0"+
    "\12\125\36\45\2\0\5\45\13\0\54\45\4\0\32\45"+
    "\6\0\12\125\46\0\27\45\5\124\4\0\65\45\12\124"+
    "\1\0\35\124\2\0\1\124\12\125\6\0\12\125\15\0"+
    "\1\45\10\0\17\124\101\0\5\124\57\45\21\124\7\45"+
    "\4\0\12\125\21\0\11\124\14\0\3\124\36\45\15\124"+
    "\2\45\12\125\54\45\16\124\14\0\44\45\24\124\10\0"+
    "\12\125\3\0\3\45\12\125\44\45\2\0\11\45\7\0"+
    "\53\45\2\0\3\45\20\0\3\124\1\0\25\124\4\45"+
    "\1\124\6\45\1\124\2\45\3\124\1\45\5\0\300\45"+
    "\72\124\1\0\5\124\26\45\2\0\6\45\2\0\46\45"+
    "\2\0\6\45\2\0\10\45\1\0\1\45\1\0\1\45"+
    "\1\0\1\45\1\0\37\45\2\0\65\45\1\0\7\45"+
    "\1\0\1\45\3\0\3\45\1\0\7\45\3\0\4\45"+
    "\2\0\6\45\4\0\15\45\5\0\3\45\1\0\7\45"+
    "\3\0\13\1\35\0\2\1\5\0\1\1\17\0\2\124"+
    "\23\0\1\124\12\0\1\1\21\0\1\45\15\0\1\45"+
    "\20\0\15\45\63\0\41\124\21\0\1\45\4\0\1\45"+
    "\2\0\12\45\1\0\1\45\3\0\5\45\6\0\1\45"+
    "\1\0\1\45\1\0\1\45\1\0\4\45\1\0\13\45"+
    "\2\0\4\45\5\0\5\45\4\0\1\45\21\0\43\124"+
    "\2\45\4\124\u022d\0\64\124\26\0\57\45\1\0\57\45"+
    "\1\0\205\45\6\0\4\45\3\124\2\45\14\0\46\45"+
    "\1\0\1\45\5\0\1\45\2\0\70\45\7\0\1\45"+
    "\17\0\1\124\27\45\11\0\7\45\1\0\7\45\1\0"+
    "\7\45\1\0\7\45\1\0\7\45\1\0\7\45\1\0"+
    "\7\45\1\0\7\45\1\0\40\124\57\0\1\45\320\0"+
    "\1\1\4\0\2\45\1\124\31\0\17\124\1\0\5\45"+
    "\2\0\3\124\2\45\4\0\126\45\2\0\2\124\2\0"+
    "\3\45\1\0\132\45\1\0\4\45\5\0\53\45\1\0"+
    "\136\45\21\0\33\45\65\0\306\45\112\0\360\45\20\0"+
    "\215\45\103\0\56\45\2\0\15\45\3\0\20\45\12\125"+
    "\2\45\24\0\57\45\4\124\1\0\12\124\1\0\37\45"+
    "\2\124\106\45\14\124\45\0\11\45\2\0\147\45\2\0"+
    "\65\45\2\0\5\45\60\0\13\45\1\124\3\45\1\124"+
    "\4\45\1\124\27\45\5\124\30\0\64\45\14\0\2\124"+
    "\62\45\22\124\12\0\12\125\6\0\22\124\6\45\3\0"+
    "\1\45\1\0\2\45\1\124\12\125\34\45\10\124\2\0"+
    "\27\45\15\124\14\0\35\45\3\0\4\124\57\45\16\124"+
    "\16\0\1\45\12\125\6\0\5\45\1\124\12\45\12\125"+
    "\5\45\1\0\51\45\16\124\11\0\3\45\1\124\10\45"+
    "\2\124\2\0\12\125\6\0\27\45\3\0\1\45\3\124"+
    "\62\45\1\124\1\45\3\124\2\45\2\124\5\45\2\124"+
    "\1\45\1\124\1\45\30\0\3\45\2\0\13\45\5\124"+
    "\2\0\3\45\2\124\12\0\6\45\2\0\6\45\2\0"+
    "\6\45\11\0\7\45\1\0\7\45\1\0\53\45\1\0"+
    "\14\45\10\0\163\45\10\124\1\0\2\124\2\0\12\125"+
    "\6\0\244\45\14\0\27\45\4\0\61\45\4\0\156\45"+
    "\2\0\152\45\46\0\7\45\14\0\5\45\5\0\1\45"+
    "\1\124\12\45\1\0\15\45\1\0\5\45\1\0\1\45"+
    "\1\0\2\45\1\0\2\45\1\0\154\45\41\0\153\45"+
    "\22\0\100\45\2\0\66\45\50\0\14\45\4\0\20\124"+
    "\20\0\20\124\3\0\2\124\30\0\3\124\40\0\5\45"+
    "\1\0\207\45\23\0\12\125\7\0\32\45\4\0\1\124"+
    "\1\0\32\45\13\0\131\45\3\0\6\45\2\0\6\45"+
    "\2\0\6\45\2\0\3\45\43\0\14\45\1\0\32\45"+
    "\1\0\23\45\1\0\2\45\1\0\17\45\2\0\16\45"+
    "\42\0\173\45\105\0\65\124\210\0\1\124\202\0\35\45"+
    "\3\0\61\45\17\0\1\124\37\0\40\45\15\0\24\45"+
    "\1\124\10\45\1\124\5\0\46\45\5\124\5\0\36\45"+
    "\2\0\44\45\4\0\10\45\1\0\5\124\52\0\236\45"+
    "\2\0\12\125\6\0\44\45\4\0\44\45\4\0\50\45"+
    "\10\0\64\45\234\0\67\45\11\0\26\45\12\0\10\45"+
    "\230\0\6\45\2\0\1\45\1\0\54\45\1\0\2\45"+
    "\3\0\1\45\2\0\27\45\12\0\27\45\11\0\37\45"+
    "\101\0\23\45\1\0\2\45\12\0\26\45\12\0\32\45"+
    "\106\0\70\45\6\0\2\45\100\0\1\45\3\124\1\0"+
    "\2\124\5\0\4\124\4\45\1\0\3\45\1\0\35\45"+
    "\2\0\3\124\4\0\1\124\40\0\35\45\3\0\35\45"+
    "\43\0\10\45\1\0\34\45\2\124\31\0\66\45\12\0"+
    "\26\45\12\0\23\45\15\0\22\45\156\0\111\45\67\0"+
    "\63\45\15\0\63\45\15\0\44\45\4\124\10\0\12\125"+
    "\306\0\35\45\12\0\1\45\10\0\26\45\13\124\217\0"+
    "\27\45\11\0\3\124\65\45\17\124\37\0\12\125\17\0"+
    "\4\124\55\45\13\124\25\0\31\45\7\0\12\125\6\0"+
    "\3\124\44\45\16\124\1\0\12\125\4\0\1\45\2\124"+
    "\11\0\43\45\1\124\2\0\1\45\11\0\3\124\60\45"+
    "\16\124\4\45\4\0\4\124\3\0\12\125\1\45\1\0"+
    "\1\45\43\0\22\45\1\0\31\45\14\124\6\0\1\124"+
    "\101\0\7\45\1\0\1\45\1\0\4\45\1\0\17\45"+
    "\1\0\12\45\7\0\57\45\14\124\5\0\12\125\6\0"+
    "\4\124\1\0\10\45\2\0\2\45\2\0\26\45\1\0"+
    "\7\45\1\0\2\45\1\0\5\45\1\0\2\124\1\45"+
    "\7\124\2\0\2\124\2\0\3\124\2\0\1\45\6\0"+
    "\1\124\5\0\5\45\2\124\2\0\7\124\3\0\5\124"+
    "\213\0\65\45\22\124\4\45\5\0\12\125\4\0\1\124"+
    "\1\45\40\0\60\45\24\124\2\45\1\0\1\45\10\0"+
    "\12\125\246\0\57\45\7\124\2\0\11\124\27\0\4\45"+
    "\2\124\42\0\60\45\21\124\3\0\1\45\13\0\12\125"+
    "\46\0\53\45\15\124\1\45\7\0\12\125\66\0\33\45"+
    "\2\0\17\124\4\0\12\125\306\0\54\45\17\124\145\0"+
    "\100\45\12\125\25\0\1\45\240\0\10\45\2\0\47\45"+
    "\7\124\2\0\7\124\1\45\1\0\1\45\1\124\33\0"+
    "\1\45\12\124\50\45\7\124\1\45\4\124\10\0\1\124"+
    "\10\0\1\45\13\124\56\45\20\124\3\0\1\45\42\0"+
    "\71\45\7\0\11\45\1\0\45\45\10\124\1\0\10\124"+
    "\1\45\17\0\12\125\30\0\36\45\2\0\26\124\1\0"+
    "\16\124\111\0\7\45\1\0\2\45\1\0\46\45\6\124"+
    "\3\0\1\124\1\0\2\124\1\0\7\124\1\45\1\124"+
    "\10\0\12\125\6\0\6\45\1\0\2\45\1\0\40\45"+
    "\5\124\1\0\2\124\1\0\5\124\1\45\7\0\12\125"+
    "\u0136\0\23\45\4\124\11\0\232\45\146\0\157\124\21\0"+
    "\304\45\274\0\57\45\321\0\107\45\271\0\71\45\7\0"+
    "\37\45\1\0\12\125\146\0\36\45\2\0\5\124\13\0"+
    "\60\45\7\124\11\0\4\45\14\0\12\125\11\0\25\45"+
    "\5\0\23\45\260\0\100\45\200\0\113\45\4\0\1\124"+
    "\1\45\67\124\7\0\4\124\15\45\100\0\2\45\1\0"+
    "\1\45\34\0\370\45\10\0\363\45\15\0\37\45\61\0"+
    "\3\45\21\0\4\45\10\0\u018c\45\4\0\153\45\5\0"+
    "\15\45\3\0\11\45\7\0\12\45\3\0\2\124\306\0"+
    "\5\124\3\0\6\124\10\0\10\124\2\0\7\124\36\0"+
    "\4\124\224\0\3\124\273\0\125\45\1\0\107\45\1\0"+
    "\2\45\2\0\1\45\2\0\2\45\2\0\4\45\1\0"+
    "\14\45\1\0\1\45\1\0\7\45\1\0\101\45\1\0"+
    "\4\45\2\0\10\45\1\0\7\45\1\0\34\45\1\0"+
    "\4\45\1\0\5\45\1\0\1\45\3\0\7\45\1\0"+
    "\u0154\45\2\0\31\45\1\0\31\45\1\0\37\45\1\0"+
    "\31\45\1\0\37\45\1\0\31\45\1\0\37\45\1\0"+
    "\31\45\1\0\37\45\1\0\31\45\1\0\10\45\2\0"+
    "\62\125\67\124\4\0\62\124\10\0\1\124\16\0\1\124"+
    "\26\0\5\124\1\0\17\124\120\0\7\124\1\0\21\124"+
    "\2\0\7\124\1\0\2\124\1\0\5\124\325\0\55\45"+
    "\3\0\7\124\7\45\2\0\12\125\4\0\1\45\u0171\0"+
    "\54\45\4\124\12\125\6\0\305\45\13\0\7\124\51\0"+
    "\104\45\7\124\1\45\4\0\12\125\246\0\4\45\1\0"+
    "\33\45\1\0\2\45\1\0\1\45\2\0\1\45\1\0"+
    "\12\45\1\0\4\45\1\0\1\45\1\0\1\45\6\0"+
    "\1\45\4\0\1\45\1\0\1\45\1\0\1\45\1\0"+
    "\3\45\1\0\2\45\1\0\1\45\2\0\1\45\1\0"+
    "\1\45\1\0\1\45\1\0\1\45\1\0\1\45\1\0"+
    "\2\45\1\0\1\45\2\0\4\45\1\0\7\45\1\0"+
    "\4\45\1\0\4\45\1\0\1\45\1\0\12\45\1\0"+
    "\21\45\5\0\3\45\1\0\5\45\1\0\21\45\164\0"+
    "\32\124\6\0\32\124\6\0\32\124\166\0\327\45\51\0"+
    "\65\45\13\0\336\45\2\0\u0182\45\16\0\u0131\45\37\0"+
    "\36\45\342\0\360\124\20\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\1\1\3\1\4\1\2\1\4"+
    "\1\5\1\4\1\6\1\4\1\7\1\10\1\11\1\12"+
    "\14\4\1\13\1\4\1\14\1\15\1\16\1\14\1\4"+
    "\2\17\27\20\1\21\1\22\2\4\1\23\1\24\1\25"+
    "\1\26\1\27\2\30\1\31\1\32\1\33\1\11\1\34"+
    "\1\4\16\35\1\36\1\37\10\35\1\40\1\4\1\41"+
    "\1\42\1\43\1\2\1\0\1\2\10\0\1\44\10\0"+
    "\1\45\1\0\1\46\1\0\35\20\1\47\1\50\2\0"+
    "\1\51\1\52\1\53\1\0\11\35\1\54\20\35\1\55"+
    "\10\0\1\56\2\0\1\57\11\0\1\60\4\0\1\61"+
    "\30\20\1\62\1\20\1\63\5\20\1\64\1\65\1\0"+
    "\1\35\1\66\4\35\1\67\24\35\2\0\1\70\3\0"+
    "\1\71\15\0\1\72\2\0\1\73\1\74\1\0\1\75"+
    "\1\0\1\76\1\0\1\77\5\20\1\100\1\20\1\101"+
    "\4\20\1\102\3\20\1\103\1\104\1\20\1\105\7\20"+
    "\1\106\1\107\1\20\2\0\3\35\1\110\1\111\1\112"+
    "\1\35\1\113\10\35\1\114\2\35\1\115\5\35\1\116"+
    "\3\0\1\117\2\0\1\120\11\0\1\121\1\122\4\0"+
    "\1\123\1\0\1\124\4\20\1\125\4\20\1\126\1\0"+
    "\4\20\1\127\1\20\1\130\1\131\1\0\2\20\1\0"+
    "\15\35\1\132\2\35\1\133\3\35\1\0\1\134\1\0"+
    "\1\135\1\136\1\0\1\137\3\0\1\140\5\0\1\141"+
    "\3\0\1\20\1\142\2\20\1\143\1\20\1\144\1\20"+
    "\1\0\1\20\1\145\1\146\1\147\1\0\1\150\1\151"+
    "\1\0\3\35\1\152\1\153\5\35\1\154\6\35\1\155"+
    "\1\2\1\0\1\156\4\0\1\157\3\0\1\160\1\0"+
    "\1\77\1\161\1\20\1\162\1\20\1\163\1\0\1\164"+
    "\1\0\1\165\6\35\1\166\1\35\1\167\1\35\1\170"+
    "\1\171\1\35\1\172\1\173\1\174\1\0\1\175\5\0"+
    "\1\176\1\177\1\0\10\35\4\0\1\200\2\0\6\35"+
    "\1\201\1\35\1\0\1\202\1\203\1\0\1\204\1\205"+
    "\1\206\3\35\1\207\2\35\1\210\1\211\1\35\1\212"+
    "\4\35\1\213\3\35\1\214\2\35\1\215\3\35\1\216";

  private static int [] zzUnpackAction() {
    int [] result = new int[606];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\126\0\254\0\u0102\0\u0158\0\u01ae\0\u0204\0\u025a"+
    "\0\u02b0\0\u0306\0\u035c\0\u03b2\0\u0408\0\u045e\0\u03b2\0\u035c"+
    "\0\u03b2\0\u04b4\0\u03b2\0\u03b2\0\u03b2\0\u03b2\0\u050a\0\u0560"+
    "\0\u05b6\0\u060c\0\u0662\0\u06b8\0\u070e\0\u0764\0\u07ba\0\u0810"+
    "\0\u0866\0\u08bc\0\u03b2\0\u0912\0\u0968\0\u03b2\0\u03b2\0\u09be"+
    "\0\u0a14\0\u0a6a\0\u0ac0\0\u0b16\0\u0b6c\0\u0bc2\0\u0c18\0\u0c6e"+
    "\0\u0cc4\0\u0d1a\0\u0d70\0\u0dc6\0\u0e1c\0\u0e72\0\u0ec8\0\u0f1e"+
    "\0\u0f74\0\u0fca\0\u1020\0\u1076\0\u10cc\0\u1122\0\u1178\0\u11ce"+
    "\0\u1224\0\u127a\0\u12d0\0\u03b2\0\u1326\0\u137c\0\u03b2\0\u03b2"+
    "\0\u03b2\0\u13d2\0\u03b2\0\u03b2\0\u1428\0\u03b2\0\u03b2\0\u147e"+
    "\0\u14d4\0\u152a\0\u1580\0\u15d6\0\u162c\0\u1682\0\u16d8\0\u172e"+
    "\0\u1784\0\u17da\0\u1830\0\u1886\0\u18dc\0\u1932\0\u1988\0\u19de"+
    "\0\u1a34\0\u03b2\0\u03b2\0\u1a8a\0\u1ae0\0\u1b36\0\u1b8c\0\u1be2"+
    "\0\u1c38\0\u1c8e\0\u1ce4\0\u03b2\0\u1d3a\0\u03b2\0\u1d90\0\u03b2"+
    "\0\u1de6\0\u1e3c\0\u1e92\0\u1ee8\0\u1f3e\0\u1f94\0\u1fea\0\u2040"+
    "\0\u2096\0\u20ec\0\u2142\0\u03b2\0\u2198\0\u21ee\0\u2244\0\u229a"+
    "\0\u22f0\0\u2346\0\u239c\0\u23f2\0\u2448\0\u0a14\0\u03b2\0\u249e"+
    "\0\u24f4\0\u254a\0\u25a0\0\u25f6\0\u264c\0\u26a2\0\u26f8\0\u274e"+
    "\0\u27a4\0\u27fa\0\u2850\0\u28a6\0\u28fc\0\u2952\0\u29a8\0\u29fe"+
    "\0\u2a54\0\u2aaa\0\u2b00\0\u2b56\0\u2bac\0\u2c02\0\u2c58\0\u2cae"+
    "\0\u2d04\0\u2d5a\0\u2db0\0\u2e06\0\u2e5c\0\u03b2\0\u03b2\0\u2eb2"+
    "\0\u2f08\0\u03b2\0\u03b2\0\u03b2\0\u2f5e\0\u2fb4\0\u300a\0\u3060"+
    "\0\u30b6\0\u310c\0\u3162\0\u31b8\0\u320e\0\u3264\0\u162c\0\u32ba"+
    "\0\u3310\0\u3366\0\u33bc\0\u3412\0\u3468\0\u34be\0\u3514\0\u356a"+
    "\0\u35c0\0\u3616\0\u366c\0\u36c2\0\u3718\0\u376e\0\u37c4\0\u03b2"+
    "\0\u381a\0\u3870\0\u38c6\0\u391c\0\u3972\0\u39c8\0\u3a1e\0\u3a74"+
    "\0\u03b2\0\u3aca\0\u3b20\0\u03b2\0\u3b76\0\u3bcc\0\u3c22\0\u3c78"+
    "\0\u3cce\0\u3d24\0\u3d7a\0\u3dd0\0\u3e26\0\u03b2\0\u3e7c\0\u3ed2"+
    "\0\u3f28\0\u3f7e\0\u0a14\0\u3fd4\0\u402a\0\u4080\0\u40d6\0\u412c"+
    "\0\u4182\0\u41d8\0\u422e\0\u4284\0\u42da\0\u4330\0\u4386\0\u43dc"+
    "\0\u4432\0\u4488\0\u44de\0\u4534\0\u458a\0\u45e0\0\u4636\0\u468c"+
    "\0\u46e2\0\u4738\0\u478e\0\u0e1c\0\u47e4\0\u0e1c\0\u483a\0\u4890"+
    "\0\u48e6\0\u493c\0\u4992\0\u03b2\0\u49e8\0\u4a3e\0\u4a94\0\u162c"+
    "\0\u4aea\0\u4b40\0\u4b96\0\u4bec\0\u162c\0\u4c42\0\u4c98\0\u4cee"+
    "\0\u4d44\0\u4d9a\0\u4df0\0\u4e46\0\u4e9c\0\u4ef2\0\u4f48\0\u4f9e"+
    "\0\u4ff4\0\u504a\0\u50a0\0\u50f6\0\u514c\0\u51a2\0\u51f8\0\u524e"+
    "\0\u52a4\0\u52fa\0\u5350\0\u03b2\0\u53a6\0\u53fc\0\u5452\0\u03b2"+
    "\0\u54a8\0\u54fe\0\u5554\0\u55aa\0\u5600\0\u5656\0\u56ac\0\u5702"+
    "\0\u5758\0\u57ae\0\u5804\0\u585a\0\u58b0\0\u03b2\0\u5906\0\u595c"+
    "\0\u03b2\0\u03b2\0\u59b2\0\u03b2\0\u5a08\0\u03b2\0\u5a5e\0\u5ab4"+
    "\0\u5b0a\0\u5b60\0\u5bb6\0\u5c0c\0\u5c62\0\u0e1c\0\u5cb8\0\u0e1c"+
    "\0\u5d0e\0\u5d64\0\u5dba\0\u5e10\0\u0e1c\0\u5e66\0\u5ebc\0\u5f12"+
    "\0\u0e1c\0\u0e1c\0\u5f68\0\u0e1c\0\u5fbe\0\u6014\0\u606a\0\u60c0"+
    "\0\u6116\0\u616c\0\u61c2\0\u0e1c\0\u0e1c\0\u6218\0\u49e8\0\u626e"+
    "\0\u62c4\0\u631a\0\u6370\0\u162c\0\u162c\0\u162c\0\u63c6\0\u162c"+
    "\0\u641c\0\u6472\0\u64c8\0\u651e\0\u6574\0\u65ca\0\u6620\0\u6676"+
    "\0\u66cc\0\u6722\0\u6778\0\u162c\0\u67ce\0\u6824\0\u687a\0\u68d0"+
    "\0\u6926\0\u162c\0\u697c\0\u69d2\0\u6a28\0\u03b2\0\u6a7e\0\u6ad4"+
    "\0\u03b2\0\u6b2a\0\u6b80\0\u6bd6\0\u6c2c\0\u6c82\0\u6cd8\0\u6d2e"+
    "\0\u6d84\0\u6dda\0\u03b2\0\u03b2\0\u6e30\0\u6e86\0\u6edc\0\u6f32"+
    "\0\u03b2\0\u6f88\0\u0b6c\0\u6fde\0\u7034\0\u708a\0\u70e0\0\u0e1c"+
    "\0\u7136\0\u718c\0\u71e2\0\u7238\0\u0e1c\0\u728e\0\u72e4\0\u733a"+
    "\0\u7390\0\u73e6\0\u0e1c\0\u743c\0\u0e1c\0\u0e1c\0\u7492\0\u74e8"+
    "\0\u753e\0\u7594\0\u75ea\0\u7640\0\u7696\0\u76ec\0\u7742\0\u7798"+
    "\0\u77ee\0\u7844\0\u789a\0\u78f0\0\u7946\0\u799c\0\u79f2\0\u162c"+
    "\0\u7a48\0\u7a9e\0\u162c\0\u7af4\0\u7b4a\0\u7ba0\0\u7bf6\0\u03b2"+
    "\0\u7c4c\0\u03b2\0\u03b2\0\u7ca2\0\u03b2\0\u7cf8\0\u7d4e\0\u7da4"+
    "\0\u03b2\0\u7dfa\0\u7e50\0\u7ea6\0\u7efc\0\u7f52\0\u03b2\0\u7fa8"+
    "\0\u7ffe\0\u8054\0\u80aa\0\u0b6c\0\u8100\0\u8156\0\u0e1c\0\u81ac"+
    "\0\u0e1c\0\u8202\0\u8258\0\u82ae\0\u0e1c\0\u0e1c\0\u0e1c\0\u8304"+
    "\0\u0e1c\0\u0e1c\0\u835a\0\u83b0\0\u8406\0\u845c\0\u162c\0\u162c"+
    "\0\u84b2\0\u8508\0\u855e\0\u85b4\0\u860a\0\u162c\0\u8660\0\u86b6"+
    "\0\u870c\0\u8762\0\u87b8\0\u880e\0\u162c\0\u52fa\0\u8864\0\u03b2"+
    "\0\u88ba\0\u8910\0\u8966\0\u89bc\0\u03b2\0\u8a12\0\u8a68\0\u8abe"+
    "\0\u03b2\0\u8b14\0\u03b2\0\u0b6c\0\u8b6a\0\u0b6c\0\u8bc0\0\u0e1c"+
    "\0\u8c16\0\u0e1c\0\u8c6c\0\u03b2\0\u8cc2\0\u8d18\0\u8d6e\0\u8dc4"+
    "\0\u8e1a\0\u8e70\0\u162c\0\u8ec6\0\u162c\0\u8f1c\0\u162c\0\u162c"+
    "\0\u8f72\0\u162c\0\u03b2\0\u03b2\0\u8fc8\0\u03b2\0\u901e\0\u9074"+
    "\0\u90ca\0\u9120\0\u9176\0\u91cc\0\u0e1c\0\u9222\0\u9278\0\u92ce"+
    "\0\u9324\0\u937a\0\u93d0\0\u9426\0\u947c\0\u94d2\0\u9528\0\u957e"+
    "\0\u95d4\0\u962a\0\u03b2\0\u9680\0\u96d6\0\u972c\0\u9782\0\u97d8"+
    "\0\u982e\0\u9884\0\u98da\0\u162c\0\u9930\0\u9986\0\u03b2\0\u03b2"+
    "\0\u99dc\0\u03b2\0\u0a14\0\u162c\0\u9a32\0\u9a88\0\u9ade\0\u162c"+
    "\0\u9b34\0\u9b8a\0\u03b2\0\u03b2\0\u9be0\0\u162c\0\u9c36\0\u9c8c"+
    "\0\u9ce2\0\u9d38\0\u162c\0\u9d8e\0\u9de4\0\u9e3a\0\u162c\0\u9e90"+
    "\0\u9ee6\0\u162c\0\u9f3c\0\u9f92\0\u9fe8\0\u162c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[606];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\3\11\1\12\23\10\1\13\75\10\1\14\3\15"+
    "\1\16\15\14\1\17\5\14\1\20\1\14\1\21\3\14"+
    "\1\22\25\14\1\23\4\14\1\22\35\14\3\15\1\16"+
    "\1\24\22\14\1\20\1\25\33\14\1\26\1\14\1\27"+
    "\1\30\1\31\2\14\1\32\1\14\1\33\1\34\4\14"+
    "\1\35\1\36\2\14\1\37\1\40\1\41\2\14\1\42"+
    "\11\14\3\15\1\16\1\43\1\44\1\45\3\14\1\46"+
    "\1\47\3\14\1\50\1\51\1\14\1\52\2\53\2\14"+
    "\1\20\3\14\1\54\1\55\1\56\3\55\1\57\10\55"+
    "\1\60\4\55\1\61\3\55\2\14\1\45\1\62\1\63"+
    "\1\64\2\65\1\66\1\67\1\70\1\65\1\71\1\65"+
    "\1\72\1\73\1\74\1\75\1\76\1\65\1\77\1\100"+
    "\1\101\4\65\1\102\1\65\4\14\1\51\1\14\3\15"+
    "\1\103\1\104\3\14\1\105\1\106\1\46\1\47\1\107"+
    "\1\110\1\111\1\112\1\14\1\113\1\114\2\115\1\116"+
    "\1\117\1\120\1\121\1\122\1\123\1\124\1\125\1\126"+
    "\1\127\1\130\2\125\1\131\1\132\2\125\1\133\1\125"+
    "\1\134\1\135\1\136\1\137\1\125\1\140\2\125\1\141"+
    "\2\125\1\142\1\143\1\14\1\125\1\144\1\145\1\146"+
    "\1\125\1\147\1\150\1\125\1\151\11\125\1\152\1\153"+
    "\6\125\1\154\1\155\1\156\2\14\5\157\1\160\4\157"+
    "\1\14\113\157\126\14\30\10\1\0\76\10\3\11\24\10"+
    "\1\0\101\10\1\161\23\10\1\0\75\10\4\0\1\162"+
    "\250\0\3\15\126\0\1\163\207\0\1\164\141\0\1\165"+
    "\112\0\1\166\140\0\1\167\2\0\1\170\125\0\1\171"+
    "\113\0\1\172\14\0\1\173\107\0\1\174\122\0\1\175"+
    "\142\0\1\176\126\0\1\177\130\0\1\200\110\0\1\201"+
    "\23\0\1\202\105\0\1\203\51\0\3\204\6\0\6\204"+
    "\25\0\6\204\40\0\1\45\10\0\1\45\2\0\3\45"+
    "\6\0\30\45\2\0\33\45\3\0\2\45\7\0\1\45"+
    "\10\0\1\50\1\205\1\0\3\50\6\0\30\45\2\0"+
    "\1\45\32\50\3\0\1\45\1\50\20\0\1\206\1\205"+
    "\1\0\3\206\41\0\32\206\4\0\1\206\10\0\1\207"+
    "\7\0\1\206\1\205\1\0\3\206\41\0\17\206\1\210"+
    "\12\206\4\0\1\206\10\0\1\207\7\0\1\206\1\205"+
    "\1\0\3\53\41\0\17\206\1\210\12\206\4\0\1\206"+
    "\23\0\3\55\6\0\30\55\2\0\22\55\1\211\10\55"+
    "\3\0\2\55\23\0\3\55\6\0\30\55\2\0\33\55"+
    "\3\0\2\55\23\0\3\55\6\0\30\55\2\0\17\55"+
    "\1\212\13\55\3\0\2\55\23\0\3\55\6\0\30\55"+
    "\2\0\5\55\1\213\25\55\3\0\2\55\23\0\3\55"+
    "\6\0\20\55\1\214\7\55\2\0\33\55\3\0\2\55"+
    "\23\0\3\55\6\0\30\55\2\0\5\55\1\215\25\55"+
    "\3\0\2\55\20\0\1\206\1\205\1\0\3\65\6\0"+
    "\30\55\2\0\1\55\20\65\1\216\11\65\3\0\1\55"+
    "\1\65\20\0\1\206\1\205\1\0\3\65\6\0\30\55"+
    "\2\0\1\55\13\65\1\217\16\65\3\0\1\55\1\65"+
    "\20\0\1\206\1\205\1\0\3\65\6\0\30\55\2\0"+
    "\1\55\4\65\1\220\2\65\1\221\6\65\1\222\13\65"+
    "\3\0\1\55\1\65\20\0\1\206\1\205\1\0\3\65"+
    "\6\0\30\55\2\0\1\55\32\65\3\0\1\55\1\65"+
    "\20\0\1\206\1\205\1\0\3\65\6\0\30\55\2\0"+
    "\1\55\24\65\1\223\5\65\3\0\1\55\1\65\20\0"+
    "\1\206\1\205\1\0\3\65\6\0\30\55\2\0\1\55"+
    "\21\65\1\224\10\65\3\0\1\55\1\65\20\0\1\206"+
    "\1\205\1\0\3\65\6\0\30\55\2\0\1\55\23\65"+
    "\1\225\6\65\3\0\1\55\1\65\20\0\1\206\1\205"+
    "\1\0\3\65\6\0\30\55\2\0\1\55\24\65\1\226"+
    "\5\65\3\0\1\55\1\65\20\0\1\206\1\205\1\0"+
    "\3\65\6\0\30\55\2\0\1\55\4\65\1\227\3\65"+
    "\1\230\21\65\3\0\1\55\1\65\20\0\1\206\1\205"+
    "\1\0\3\65\6\0\30\55\2\0\1\55\1\231\31\65"+
    "\3\0\1\55\1\65\20\0\1\206\1\205\1\0\3\65"+
    "\6\0\30\55\2\0\1\55\1\232\23\65\1\233\5\65"+
    "\3\0\1\55\1\65\20\0\1\206\1\205\1\0\3\65"+
    "\6\0\30\55\2\0\1\55\13\65\1\234\16\65\3\0"+
    "\1\55\1\65\20\0\1\206\1\205\1\0\3\65\6\0"+
    "\30\55\2\0\1\55\24\65\1\235\5\65\3\0\1\55"+
    "\1\65\20\0\1\206\1\205\1\0\3\65\6\0\30\55"+
    "\2\0\1\55\1\236\3\65\1\237\3\65\1\240\5\65"+
    "\1\241\13\65\3\0\1\55\1\65\20\0\1\206\1\205"+
    "\1\0\3\65\6\0\30\55\2\0\1\55\1\242\7\65"+
    "\1\243\21\65\3\0\1\55\1\65\20\0\1\206\1\205"+
    "\1\0\3\65\6\0\30\55\2\0\1\55\4\65\1\244"+
    "\25\65\3\0\1\55\1\65\20\0\1\206\1\205\1\0"+
    "\3\65\6\0\30\55\2\0\1\55\4\65\1\245\25\65"+
    "\3\0\1\55\1\65\4\0\1\163\24\0\1\246\105\0"+
    "\1\247\114\0\12\250\1\0\113\250\24\0\2\115\121\0"+
    "\1\251\1\0\3\115\104\0\1\162\24\0\1\252\125\0"+
    "\1\253\125\0\1\254\171\0\1\255\53\0\3\125\6\0"+
    "\13\125\1\256\5\125\1\257\6\125\2\0\33\125\3\0"+
    "\2\125\23\0\3\125\6\0\30\125\2\0\33\125\3\0"+
    "\2\125\23\0\3\125\6\0\1\260\27\125\2\0\1\261"+
    "\32\125\3\0\2\125\23\0\3\125\6\0\4\125\1\262"+
    "\23\125\2\0\33\125\3\0\2\125\23\0\3\125\6\0"+
    "\13\125\1\263\1\125\1\264\10\125\1\265\1\125\2\0"+
    "\33\125\3\0\2\125\23\0\3\125\6\0\23\125\1\266"+
    "\4\125\2\0\33\125\3\0\2\125\23\0\3\125\6\0"+
    "\5\125\1\267\7\125\1\270\12\125\2\0\33\125\3\0"+
    "\2\125\23\0\3\125\6\0\4\125\1\271\23\125\2\0"+
    "\33\125\3\0\2\125\23\0\3\125\6\0\23\125\1\272"+
    "\4\125\2\0\33\125\3\0\2\125\23\0\3\125\6\0"+
    "\15\125\1\273\12\125\2\0\33\125\3\0\2\125\23\0"+
    "\3\125\6\0\20\125\1\274\7\125\2\0\33\125\3\0"+
    "\2\125\23\0\3\125\6\0\4\125\1\275\23\125\2\0"+
    "\33\125\3\0\2\125\23\0\3\125\6\0\7\125\1\276"+
    "\20\125\2\0\33\125\3\0\2\125\23\0\3\125\6\0"+
    "\7\125\1\277\20\125\2\0\33\125\3\0\2\125\23\0"+
    "\3\125\6\0\30\125\2\0\17\125\1\300\13\125\3\0"+
    "\2\125\23\0\3\125\6\0\30\125\2\0\1\261\7\125"+
    "\1\301\22\125\3\0\2\125\23\0\3\125\6\0\30\125"+
    "\2\0\5\125\1\302\25\125\3\0\2\125\23\0\3\125"+
    "\6\0\30\125\2\0\1\125\1\303\31\125\3\0\2\125"+
    "\23\0\3\125\6\0\30\125\2\0\5\125\1\304\25\125"+
    "\3\0\2\125\23\0\3\125\6\0\30\125\2\0\16\125"+
    "\1\305\14\125\3\0\2\125\23\0\3\125\6\0\30\125"+
    "\2\0\24\125\1\306\6\125\3\0\2\125\23\0\3\125"+
    "\6\0\30\125\2\0\22\125\1\307\10\125\3\0\2\125"+
    "\122\0\1\310\3\0\5\157\1\0\4\157\1\0\113\157"+
    "\2\161\1\10\25\161\1\163\75\161\20\0\1\311\105\0"+
    "\2\163\1\0\123\163\35\0\1\312\1\0\1\313\2\0"+
    "\1\314\1\315\1\316\2\0\1\317\2\0\1\320\1\321"+
    "\1\0\1\322\1\323\11\0\1\312\1\0\1\313\2\0"+
    "\1\314\1\315\1\316\2\0\1\317\2\0\1\320\1\321"+
    "\2\0\1\322\1\323\125\0\1\324\104\0\1\325\123\0"+
    "\1\326\140\0\1\327\127\0\1\330\120\0\1\331\121\0"+
    "\1\332\135\0\1\333\113\0\1\334\151\0\1\335\101\0"+
    "\1\336\152\0\1\337\115\0\1\340\111\0\1\341\56\0"+
    "\3\342\6\0\6\342\25\0\6\342\34\0\1\205\14\0"+
    "\6\205\6\0\30\205\2\0\33\205\3\0\2\205\20\0"+
    "\1\206\1\205\1\0\3\206\41\0\27\206\1\343\2\206"+
    "\4\0\1\206\23\0\3\55\6\0\30\55\2\0\11\55"+
    "\1\344\21\55\3\0\2\55\23\0\3\55\6\0\30\55"+
    "\2\0\25\55\1\345\5\55\3\0\2\55\23\0\3\55"+
    "\6\0\30\55\2\0\16\55\1\346\14\55\3\0\2\55"+
    "\23\0\3\55\6\0\16\55\1\347\11\55\2\0\33\55"+
    "\3\0\2\55\23\0\3\55\6\0\30\55\2\0\22\55"+
    "\1\350\10\55\3\0\2\55\20\0\1\206\1\205\1\0"+
    "\3\65\6\0\30\55\2\0\1\55\24\65\1\351\5\65"+
    "\3\0\1\55\1\65\20\0\1\206\1\205\1\0\3\65"+
    "\6\0\30\55\2\0\1\55\1\352\23\65\1\353\5\65"+
    "\3\0\1\55\1\65\20\0\1\206\1\205\1\0\3\65"+
    "\6\0\30\55\2\0\1\55\15\65\1\354\14\65\3\0"+
    "\1\55\1\65\20\0\1\206\1\205\1\0\3\65\6\0"+
    "\30\55\2\0\1\55\4\65\1\355\25\65\3\0\1\55"+
    "\1\65\20\0\1\206\1\205\1\0\3\65\6\0\30\55"+
    "\2\0\1\55\13\65\1\356\16\65\3\0\1\55\1\65"+
    "\20\0\1\206\1\205\1\0\3\65\6\0\30\55\2\0"+
    "\1\55\2\65\1\357\27\65\3\0\1\55\1\65\20\0"+
    "\1\206\1\205\1\0\3\65\6\0\30\55\2\0\1\55"+
    "\1\360\3\65\1\361\25\65\3\0\1\55\1\65\20\0"+
    "\1\206\1\205\1\0\3\65\6\0\30\55\2\0\1\55"+
    "\23\65\1\362\6\65\3\0\1\55\1\65\20\0\1\206"+
    "\1\205\1\0\3\65\6\0\30\55\2\0\1\55\22\65"+
    "\1\363\7\65\3\0\1\55\1\65\20\0\1\206\1\205"+
    "\1\0\3\65\6\0\30\55\2\0\1\55\5\65\1\364"+
    "\24\65\3\0\1\55\1\65\20\0\1\206\1\205\1\0"+
    "\3\65\6\0\30\55\2\0\1\55\14\65\1\365\15\65"+
    "\3\0\1\55\1\65\20\0\1\206\1\205\1\0\3\65"+
    "\6\0\30\55\2\0\1\55\21\65\1\366\10\65\3\0"+
    "\1\55\1\65\20\0\1\206\1\205\1\0\3\65\6\0"+
    "\30\55\2\0\1\55\25\65\1\367\4\65\3\0\1\55"+
    "\1\65\20\0\1\206\1\205\1\0\3\65\6\0\30\55"+
    "\2\0\1\55\14\65\1\370\15\65\3\0\1\55\1\65"+
    "\20\0\1\206\1\205\1\0\3\65\6\0\30\55\2\0"+
    "\1\55\10\65\1\371\21\65\3\0\1\55\1\65\20\0"+
    "\1\206\1\205\1\0\3\65\6\0\30\55\2\0\1\55"+
    "\21\65\1\372\10\65\3\0\1\55\1\65\20\0\1\206"+
    "\1\205\1\0\3\65\6\0\30\55\2\0\1\55\3\65"+
    "\1\373\26\65\3\0\1\55\1\65\20\0\1\206\1\205"+
    "\1\0\3\65\6\0\30\55\2\0\1\55\3\65\1\374"+
    "\26\65\3\0\1\55\1\65\20\0\1\206\1\205\1\0"+
    "\3\65\6\0\30\55\2\0\1\55\6\65\1\375\23\65"+
    "\3\0\1\55\1\65\20\0\1\206\1\205\1\0\3\65"+
    "\6\0\30\55\2\0\1\55\26\65\1\376\3\65\3\0"+
    "\1\55\1\65\20\0\1\206\1\205\1\0\3\65\6\0"+
    "\30\55\2\0\1\55\15\65\1\377\14\65\3\0\1\55"+
    "\1\65\20\0\1\206\1\205\1\0\3\65\6\0\30\55"+
    "\2\0\1\55\13\65\1\u0100\16\65\3\0\1\55\1\65"+
    "\20\0\1\206\1\205\1\0\3\65\6\0\30\55\2\0"+
    "\1\55\1\u0101\26\65\1\u0102\2\65\3\0\1\55\1\65"+
    "\20\0\1\206\1\205\1\0\3\65\6\0\30\55\2\0"+
    "\1\55\13\65\1\u0103\16\65\3\0\1\55\1\65\12\0"+
    "\1\u0104\136\0\3\u0105\202\0\1\u0106\46\0\3\125\6\0"+
    "\4\125\1\u0107\23\125\2\0\33\125\3\0\2\125\23\0"+
    "\3\125\6\0\2\125\1\u0108\25\125\2\0\33\125\3\0"+
    "\2\125\23\0\3\125\6\0\20\125\1\u0109\7\125\2\0"+
    "\33\125\3\0\2\125\23\0\3\125\6\0\21\125\1\u010a"+
    "\6\125\2\0\23\125\1\u010a\7\125\3\0\2\125\23\0"+
    "\3\125\6\0\21\125\1\u010b\6\125\2\0\33\125\3\0"+
    "\2\125\23\0\3\125\6\0\21\125\1\u010c\6\125\2\0"+
    "\33\125\3\0\2\125\23\0\3\125\6\0\3\125\1\u010d"+
    "\24\125\2\0\33\125\3\0\2\125\23\0\3\125\6\0"+
    "\10\125\1\u010e\17\125\2\0\33\125\3\0\2\125\23\0"+
    "\3\125\6\0\15\125\1\u010f\12\125\2\0\33\125\3\0"+
    "\2\125\23\0\3\125\6\0\10\125\1\u0110\10\125\1\u0111"+
    "\6\125\2\0\33\125\3\0\2\125\23\0\3\125\6\0"+
    "\22\125\1\u0112\5\125\2\0\33\125\3\0\2\125\23\0"+
    "\3\125\6\0\14\125\1\u0113\13\125\2\0\33\125\3\0"+
    "\2\125\23\0\3\125\6\0\30\125\2\0\1\u0114\32\125"+
    "\3\0\2\125\23\0\3\125\6\0\16\125\1\u0115\11\125"+
    "\2\0\33\125\3\0\2\125\23\0\3\125\6\0\17\125"+
    "\1\u0116\4\125\1\u0117\3\125\2\0\33\125\3\0\2\125"+
    "\23\0\3\125\6\0\4\125\1\u0118\23\125\2\0\33\125"+
    "\3\0\2\125\23\0\3\125\6\0\10\125\1\u0119\17\125"+
    "\2\0\33\125\3\0\2\125\23\0\3\125\6\0\30\125"+
    "\2\0\17\125\1\u011a\13\125\3\0\2\125\23\0\3\125"+
    "\6\0\30\125\2\0\1\125\1\u011b\31\125\3\0\2\125"+
    "\23\0\3\125\6\0\30\125\2\0\3\125\1\u011c\27\125"+
    "\3\0\2\125\23\0\3\125\6\0\30\125\2\0\14\125"+
    "\1\u011d\16\125\3\0\2\125\23\0\3\125\6\0\30\125"+
    "\2\0\24\125\1\u011e\6\125\3\0\2\125\23\0\3\125"+
    "\6\0\30\125\2\0\24\125\1\u011f\6\125\3\0\2\125"+
    "\23\0\3\125\6\0\30\125\2\0\22\125\1\u0120\10\125"+
    "\3\0\2\125\23\0\3\125\6\0\30\125\2\0\25\125"+
    "\1\u0121\5\125\3\0\2\125\20\0\1\u0122\157\0\1\u0123"+
    "\1\0\1\u0124\2\0\1\u0125\25\0\1\u0123\2\0\1\u0124"+
    "\2\0\1\u0125\56\0\1\u0126\32\0\1\u0126\64\0\1\u0127"+
    "\32\0\1\u0127\60\0\1\u0128\13\0\1\u0129\32\0\1\u0129"+
    "\102\0\1\u012a\1\u012b\31\0\1\u012a\1\u012b\65\0\1\u012c"+
    "\32\0\1\u012c\101\0\1\u012d\32\0\1\u012d\55\0\1\u012e"+
    "\1\0\1\u012f\12\0\1\u0130\15\0\1\u012e\1\0\1\u012f"+
    "\12\0\1\u0130\57\0\1\u0131\3\0\1\u0132\26\0\1\u0131"+
    "\3\0\1\u0132\127\0\1\u0133\135\0\1\u0134\121\0\1\u0135"+
    "\3\0\1\u0136\126\0\1\u0137\110\0\1\u0138\124\0\1\u0139"+
    "\124\0\1\u013a\134\0\1\u013b\134\0\1\u013c\126\0\1\u013d"+
    "\106\0\1\u013e\144\0\1\u013f\36\0\3\u0140\6\0\6\u0140"+
    "\25\0\6\u0140\54\0\3\55\6\0\30\55\2\0\1\55"+
    "\1\u0141\31\55\3\0\2\55\23\0\3\55\6\0\30\55"+
    "\2\0\22\55\1\u0142\10\55\3\0\2\55\23\0\3\55"+
    "\6\0\30\55\2\0\5\55\1\u0143\25\55\3\0\2\55"+
    "\23\0\3\55\6\0\2\55\1\u0144\25\55\2\0\33\55"+
    "\3\0\2\55\23\0\3\55\6\0\30\55\2\0\4\55"+
    "\1\u0145\26\55\3\0\2\55\20\0\1\206\1\205\1\0"+
    "\3\65\6\0\30\55\2\0\1\55\1\u0146\31\65\3\0"+
    "\1\55\1\65\20\0\1\206\1\205\1\0\3\65\6\0"+
    "\30\55\2\0\1\55\2\65\1\u0147\27\65\3\0\1\55"+
    "\1\65\20\0\1\206\1\205\1\0\3\65\6\0\30\55"+
    "\2\0\1\55\4\65\1\u0148\25\65\3\0\1\55\1\65"+
    "\20\0\1\206\1\205\1\0\3\65\6\0\30\55\2\0"+
    "\1\55\23\65\1\u0149\6\65\3\0\1\55\1\65\20\0"+
    "\1\206\1\205\1\0\3\65\6\0\30\55\2\0\1\55"+
    "\2\65\1\u014a\27\65\3\0\1\55\1\65\20\0\1\206"+
    "\1\205\1\0\3\65\6\0\30\55\2\0\1\55\24\65"+
    "\1\u014b\5\65\3\0\1\55\1\65\20\0\1\206\1\205"+
    "\1\0\3\65\6\0\30\55\2\0\1\55\7\65\1\u014c"+
    "\22\65\3\0\1\55\1\65\20\0\1\206\1\205\1\0"+
    "\3\65\6\0\30\55\2\0\1\55\30\65\1\u014d\1\65"+
    "\3\0\1\55\1\65\20\0\1\206\1\205\1\0\3\65"+
    "\6\0\30\55\2\0\1\55\4\65\1\u014e\25\65\3\0"+
    "\1\55\1\65\20\0\1\206\1\205\1\0\3\65\6\0"+
    "\30\55\2\0\1\55\17\65\1\u014f\12\65\3\0\1\55"+
    "\1\65\20\0\1\206\1\205\1\0\3\65\6\0\30\55"+
    "\2\0\1\55\23\65\1\u0150\6\65\3\0\1\55\1\65"+
    "\20\0\1\206\1\205\1\0\3\65\6\0\30\55\2\0"+
    "\1\55\23\65\1\u0151\6\65\3\0\1\55\1\65\20\0"+
    "\1\206\1\205\1\0\3\65\6\0\30\55\2\0\1\55"+
    "\4\65\1\u0152\25\65\3\0\1\55\1\65\20\0\1\206"+
    "\1\205\1\0\3\65\6\0\30\55\2\0\1\55\21\65"+
    "\1\u0153\10\65\3\0\1\55\1\65\20\0\1\206\1\205"+
    "\1\0\3\65\6\0\30\55\2\0\1\55\30\65\1\u0154"+
    "\1\65\3\0\1\55\1\65\20\0\1\206\1\205\1\0"+
    "\3\65\6\0\30\55\2\0\1\55\1\65\1\u0155\30\65"+
    "\3\0\1\55\1\65\20\0\1\206\1\205\1\0\3\65"+
    "\6\0\30\55\2\0\1\55\25\65\1\u0156\4\65\3\0"+
    "\1\55\1\65\20\0\1\206\1\205\1\0\3\65\6\0"+
    "\30\55\2\0\1\55\17\65\1\u0157\12\65\3\0\1\55"+
    "\1\65\20\0\1\206\1\205\1\0\3\65\6\0\30\55"+
    "\2\0\1\55\10\65\1\u0158\21\65\3\0\1\55\1\65"+
    "\20\0\1\206\1\205\1\0\3\65\6\0\30\55\2\0"+
    "\1\55\7\65\1\u0159\22\65\3\0\1\55\1\65\20\0"+
    "\1\206\1\205\1\0\3\65\6\0\30\55\2\0\1\55"+
    "\22\65\1\u015a\7\65\3\0\1\55\1\65\20\0\1\206"+
    "\1\205\1\0\3\65\6\0\30\55\2\0\1\55\25\65"+
    "\1\u015b\4\65\3\0\1\55\1\65\20\0\1\206\1\205"+
    "\1\0\3\65\6\0\30\55\2\0\1\55\13\65\1\u015c"+
    "\16\65\3\0\1\55\1\65\20\0\1\206\1\205\1\0"+
    "\3\65\6\0\30\55\2\0\1\55\23\65\1\u015d\6\65"+
    "\3\0\1\55\1\65\20\0\1\206\1\205\1\0\3\65"+
    "\6\0\30\55\2\0\1\55\13\65\1\u015e\16\65\3\0"+
    "\1\55\1\65\23\0\1\u015f\2\u0105\205\0\1\u0160\43\0"+
    "\3\125\6\0\20\125\1\u0161\7\125\2\0\33\125\3\0"+
    "\2\125\23\0\3\125\6\0\1\u0162\27\125\2\0\33\125"+
    "\3\0\2\125\23\0\3\125\6\0\2\125\1\u0163\25\125"+
    "\2\0\3\125\1\u0163\27\125\3\0\2\125\23\0\3\125"+
    "\6\0\2\125\1\u0164\25\125\2\0\33\125\3\0\2\125"+
    "\23\0\3\125\6\0\4\125\1\u0165\23\125\2\0\33\125"+
    "\3\0\2\125\23\0\3\125\6\0\22\125\1\u0166\5\125"+
    "\2\0\33\125\3\0\2\125\23\0\3\125\6\0\22\125"+
    "\1\u0167\5\125\2\0\33\125\3\0\2\125\23\0\3\125"+
    "\6\0\22\125\1\u0168\5\125\2\0\33\125\3\0\2\125"+
    "\23\0\3\125\6\0\4\125\1\u0169\23\125\2\0\33\125"+
    "\3\0\2\125\23\0\3\125\6\0\10\125\1\u016a\6\125"+
    "\1\u016b\10\125\2\0\33\125\3\0\2\125\23\0\3\125"+
    "\6\0\30\125\2\0\1\u016c\32\125\3\0\2\125\23\0"+
    "\3\125\6\0\13\125\1\u016d\14\125\2\0\33\125\3\0"+
    "\2\125\23\0\3\125\6\0\2\125\1\u016e\25\125\2\0"+
    "\33\125\3\0\2\125\23\0\3\125\6\0\4\125\1\u016f"+
    "\23\125\2\0\33\125\3\0\2\125\23\0\3\125\6\0"+
    "\4\125\1\u0170\23\125\2\0\33\125\3\0\2\125\23\0"+
    "\3\125\6\0\15\125\1\u0171\12\125\2\0\33\125\3\0"+
    "\2\125\23\0\3\125\6\0\13\125\1\u0172\14\125\2\0"+
    "\33\125\3\0\2\125\23\0\3\125\6\0\30\125\2\0"+
    "\14\125\1\u0173\16\125\3\0\2\125\23\0\3\125\6\0"+
    "\30\125\2\0\22\125\1\u0174\10\125\3\0\2\125\23\0"+
    "\3\125\6\0\30\125\2\0\11\125\1\u0175\21\125\3\0"+
    "\2\125\23\0\3\125\6\0\30\125\2\0\23\125\1\u0176"+
    "\7\125\3\0\2\125\23\0\3\125\6\0\4\125\1\u0177"+
    "\23\125\2\0\33\125\3\0\2\125\23\0\3\125\6\0"+
    "\30\125\2\0\5\125\1\u0178\25\125\3\0\2\125\23\0"+
    "\3\125\6\0\30\125\2\0\11\125\1\u0179\21\125\3\0"+
    "\2\125\23\0\3\125\6\0\30\125\2\0\5\125\1\u017a"+
    "\25\125\3\0\2\125\20\u0122\1\u017b\17\u0122\2\0\10\u0122"+
    "\1\0\53\u0122\37\0\1\u017c\32\0\1\u017c\111\0\1\u017d"+
    "\33\0\1\u017d\73\0\1\u017e\33\0\1\u017e\55\0\1\u017f"+
    "\32\0\1\u017f\62\0\1\u0180\32\0\1\u0180\100\0\1\u0181"+
    "\32\0\1\u0181\103\0\1\u0182\32\0\1\u0182\70\0\1\u0183"+
    "\32\0\1\u0183\77\0\1\u0184\33\0\1\u0184\67\0\1\u0185"+
    "\33\0\1\u0185\64\0\1\u0186\32\0\1\u0186\57\0\1\u0187"+
    "\32\0\1\u0187\120\0\1\u0188\33\0\1\u0188\65\0\1\u0189"+
    "\33\0\1\u0189\110\0\1\u018a\141\0\1\u018b\124\0\1\u018c"+
    "\35\0\1\u018d\203\0\1\u018e\126\0\1\u018f\46\0\1\u0190"+
    "\203\0\1\u0191\52\0\3\u0192\6\0\6\u0192\25\0\6\u0192"+
    "\54\0\3\55\6\0\30\55\2\0\14\55\1\u0193\16\55"+
    "\3\0\2\55\23\0\3\55\6\0\30\55\2\0\11\55"+
    "\1\u0194\21\55\3\0\2\55\23\0\3\55\6\0\30\55"+
    "\2\0\26\55\1\u0195\4\55\3\0\2\55\23\0\3\55"+
    "\6\0\4\55\1\u0196\23\55\2\0\33\55\3\0\2\55"+
    "\23\0\3\55\6\0\30\55\2\0\1\55\1\u0197\31\55"+
    "\3\0\2\55\20\0\1\206\1\205\1\0\3\65\6\0"+
    "\30\55\2\0\1\55\12\65\1\u0198\17\65\3\0\1\55"+
    "\1\65\20\0\1\206\1\205\1\0\3\65\6\0\30\55"+
    "\2\0\1\55\4\65\1\u0199\25\65\3\0\1\55\1\65"+
    "\20\0\1\206\1\205\1\0\3\65\6\0\30\55\2\0"+
    "\1\55\12\65\1\u019a\17\65\3\0\1\55\1\65\20\0"+
    "\1\206\1\205\1\0\3\65\6\0\30\55\2\0\1\55"+
    "\14\65\1\u019b\15\65\3\0\1\55\1\65\20\0\1\206"+
    "\1\205\1\0\3\65\6\0\30\55\2\0\1\55\22\65"+
    "\1\u019c\7\65\3\0\1\55\1\65\20\0\1\206\1\205"+
    "\1\0\3\65\6\0\30\55\2\0\1\55\15\65\1\u019d"+
    "\14\65\3\0\1\55\1\65\20\0\1\206\1\205\1\0"+
    "\3\65\1\u019e\5\0\30\55\2\0\1\55\22\65\1\u019f"+
    "\7\65\3\0\1\55\1\65\20\0\1\206\1\205\1\0"+
    "\3\65\6\0\30\55\2\0\1\55\10\65\1\u01a0\21\65"+
    "\3\0\1\55\1\65\20\0\1\206\1\205\1\0\3\65"+
    "\6\0\30\55\2\0\1\55\16\65\1\u01a1\13\65\3\0"+
    "\1\55\1\65\20\0\1\206\1\205\1\0\3\65\6\0"+
    "\30\55\2\0\1\55\4\65\1\u01a2\25\65\3\0\1\55"+
    "\1\65\20\0\1\206\1\205\1\0\3\65\6\0\30\55"+
    "\2\0\1\55\4\65\1\u01a3\25\65\3\0\1\55\1\65"+
    "\20\0\1\206\1\205\1\0\3\65\6\0\30\55\2\0"+
    "\1\55\13\65\1\u01a4\16\65\3\0\1\55\1\65\20\0"+
    "\1\206\1\205\1\0\3\65\6\0\30\55\2\0\1\55"+
    "\16\65\1\u01a5\13\65\3\0\1\55\1\65\20\0\1\206"+
    "\1\205\1\0\3\65\6\0\30\55\2\0\1\55\23\65"+
    "\1\u01a6\6\65\3\0\1\55\1\65\20\0\1\u01a7\1\205"+
    "\1\0\3\65\6\0\30\55\2\0\1\55\32\65\3\0"+
    "\1\55\1\65\20\0\1\206\1\205\1\0\3\65\6\0"+
    "\30\55\2\0\1\55\4\65\1\u01a8\25\65\3\0\1\55"+
    "\1\65\20\0\1\206\1\205\1\0\3\65\6\0\30\55"+
    "\2\0\1\55\16\65\1\u01a9\13\65\3\0\1\55\1\65"+
    "\70\0\1\u01aa\60\0\3\125\6\0\22\125\1\u01ab\5\125"+
    "\2\0\33\125\3\0\2\125\23\0\3\125\6\0\2\125"+
    "\1\u01ac\25\125\2\0\33\125\3\0\2\125\23\0\3\125"+
    "\6\0\20\125\1\u01ad\7\125\2\0\22\125\1\u01ad\10\125"+
    "\3\0\2\125\23\0\3\125\6\0\10\125\1\u01ae\17\125"+
    "\2\0\33\125\3\0\2\125\23\0\3\125\6\0\20\125"+
    "\1\u01af\7\125\2\0\33\125\3\0\2\125\23\0\3\125"+
    "\6\0\14\125\1\u01b0\13\125\2\0\33\125\3\0\2\125"+
    "\23\0\3\125\6\0\1\u01b1\27\125\2\0\33\125\3\0"+
    "\2\125\23\0\3\125\6\0\1\u01b2\27\125\2\0\33\125"+
    "\3\0\2\125\23\0\3\125\6\0\16\125\1\u01b3\11\125"+
    "\2\0\33\125\3\0\2\125\23\0\3\125\6\0\4\125"+
    "\1\u01b4\23\125\2\0\33\125\3\0\2\125\23\0\3\125"+
    "\6\0\1\u01b5\27\125\2\0\33\125\3\0\2\125\23\0"+
    "\3\125\6\0\20\125\1\u01b6\7\125\2\0\33\125\3\0"+
    "\2\125\23\0\3\125\6\0\25\125\1\u01b7\2\125\2\0"+
    "\33\125\3\0\2\125\23\0\3\125\6\0\4\125\1\u01b8"+
    "\23\125\2\0\33\125\3\0\2\125\23\0\3\125\6\0"+
    "\30\125\2\0\5\125\1\u01b9\25\125\3\0\2\125\23\0"+
    "\3\125\6\0\30\125\2\0\15\125\1\u01ba\15\125\3\0"+
    "\2\125\23\0\3\125\6\0\30\125\2\0\5\125\1\u01bb"+
    "\25\125\3\0\2\125\23\0\3\125\6\0\30\125\2\0"+
    "\14\125\1\u01bc\16\125\3\0\2\125\23\0\3\125\6\0"+
    "\30\125\2\0\7\125\1\u01bd\23\125\3\0\2\125\23\0"+
    "\3\125\6\0\30\125\2\0\16\125\1\u01be\14\125\3\0"+
    "\2\125\20\u0122\1\u01bf\17\u0122\2\0\10\u0122\1\0\53\u0122"+
    "\63\0\1\u01c0\33\0\1\u01c0\64\0\1\u01c1\33\0\1\u01c1"+
    "\51\0\1\u01c2\32\0\1\u01c2\73\0\1\u01c3\32\0\1\u01c3"+
    "\112\0\1\u01c4\33\0\1\u01c4\60\0\1\u01c5\32\0\1\u01c5"+
    "\70\0\1\u01c6\32\0\1\u01c6\72\0\1\u01c7\32\0\1\u01c7"+
    "\66\0\1\u01c8\32\0\1\u01c8\102\0\1\u01c9\32\0\1\u01c9"+
    "\100\0\1\u01ca\33\0\1\u01ca\62\0\1\u01cb\32\0\1\u01cb"+
    "\133\0\1\u01cc\111\0\1\u01cd\14\0\1\u01ce\126\0\1\u01cf"+
    "\104\0\1\u01d0\123\0\1\u01d1\61\0\3\u01d2\6\0\6\u01d2"+
    "\25\0\6\u01d2\54\0\3\55\6\0\30\55\2\0\5\55"+
    "\1\u01d3\25\55\3\0\2\55\23\0\3\55\6\0\30\55"+
    "\2\0\1\55\1\u01d4\31\55\3\0\2\55\23\0\3\55"+
    "\6\0\21\55\1\u01d5\6\55\2\0\33\55\3\0\2\55"+
    "\23\0\3\55\6\0\30\55\2\0\16\55\1\u01d6\14\55"+
    "\3\0\2\55\20\0\1\206\1\205\1\0\3\65\6\0"+
    "\30\55\2\0\1\55\21\65\1\u01d7\10\65\3\0\1\55"+
    "\1\65\20\0\1\206\1\205\1\0\3\65\6\0\30\55"+
    "\2\0\1\55\1\65\1\u01d8\30\65\3\0\1\55\1\65"+
    "\20\0\1\206\1\205\1\0\3\65\6\0\30\55\2\0"+
    "\1\55\15\65\1\u01d9\14\65\3\0\1\55\1\65\20\0"+
    "\1\206\1\205\1\0\3\65\6\0\30\55\2\0\1\55"+
    "\10\65\1\u01da\21\65\3\0\1\55\1\65\22\0\1\u01db"+
    "\123\0\1\206\1\205\1\0\3\65\1\u019e\5\0\30\55"+
    "\2\0\1\55\32\65\3\0\1\55\1\65\20\0\1\206"+
    "\1\205\1\0\3\65\6\0\30\55\2\0\1\55\5\65"+
    "\1\u01dc\24\65\3\0\1\55\1\65\20\0\1\206\1\205"+
    "\1\0\3\65\6\0\30\55\2\0\1\55\15\65\1\u01dd"+
    "\14\65\3\0\1\55\1\65\20\0\1\206\1\205\1\0"+
    "\3\65\6\0\30\55\2\0\1\55\21\65\1\u01de\10\65"+
    "\3\0\1\55\1\65\20\0\1\206\1\205\1\0\3\65"+
    "\6\0\30\55\2\0\1\55\4\65\1\u01df\25\65\3\0"+
    "\1\55\1\65\20\0\1\206\1\205\1\0\3\206\41\0"+
    "\22\206\1\u01e0\7\206\4\0\1\206\20\0\1\206\1\205"+
    "\1\0\3\65\6\0\30\55\2\0\1\55\21\65\1\u01e1"+
    "\10\65\3\0\1\55\1\65\20\0\1\206\1\205\1\0"+
    "\3\65\6\0\30\55\2\0\1\55\26\65\1\u01e2\3\65"+
    "\3\0\1\55\1\65\67\0\1\u01e3\61\0\3\125\6\0"+
    "\30\125\2\0\1\u01e4\32\125\3\0\2\125\23\0\3\125"+
    "\6\0\22\125\1\u01e5\5\125\2\0\33\125\3\0\2\125"+
    "\23\0\3\125\6\0\10\125\1\u01e6\17\125\2\0\11\125"+
    "\1\u01e6\21\125\3\0\2\125\23\0\3\125\6\0\13\125"+
    "\1\u01e7\14\125\2\0\33\125\3\0\2\125\23\0\3\125"+
    "\6\0\22\125\1\u01e8\5\125\2\0\33\125\3\0\2\125"+
    "\23\0\3\125\6\0\17\125\1\u01e9\10\125\2\0\33\125"+
    "\3\0\2\125\23\0\3\125\6\0\20\125\1\u01ea\7\125"+
    "\2\0\33\125\3\0\2\125\23\0\3\125\6\0\13\125"+
    "\1\u01eb\14\125\2\0\33\125\3\0\2\125\23\0\3\125"+
    "\6\0\1\u01ec\27\125\2\0\33\125\3\0\2\125\23\0"+
    "\3\125\6\0\21\125\1\u01ed\6\125\2\0\33\125\3\0"+
    "\2\125\23\0\3\125\6\0\22\125\1\u01ee\5\125\2\0"+
    "\33\125\3\0\2\125\23\0\3\125\6\0\21\125\1\u01ef"+
    "\6\125\2\0\33\125\3\0\2\125\23\0\3\125\6\0"+
    "\7\125\1\u01f0\20\125\2\0\33\125\3\0\2\125\23\0"+
    "\3\125\6\0\30\125\2\0\1\125\1\u01f1\31\125\3\0"+
    "\2\125\23\0\3\125\6\0\30\125\2\0\1\125\1\u01f2"+
    "\31\125\3\0\2\125\23\0\3\125\6\0\30\125\2\0"+
    "\5\125\1\u01f3\25\125\3\0\2\125\23\0\3\125\6\0"+
    "\30\125\2\0\5\125\1\u01f4\25\125\3\0\2\125\23\0"+
    "\3\125\6\0\30\125\2\0\7\125\1\u01f5\23\125\3\0"+
    "\2\125\20\u0122\1\u01bf\11\u0122\1\u01f6\5\u0122\2\0\10\u0122"+
    "\1\0\53\u0122\52\0\1\u01f7\32\0\1\u01f7\76\0\1\u01f8"+
    "\33\0\1\u01f8\65\0\1\u01f9\32\0\1\u01f9\73\0\1\u01fa"+
    "\32\0\1\u01fa\55\0\1\u01fb\32\0\1\u01fb\70\0\1\u01fc"+
    "\32\0\1\u01fc\76\0\1\u01fd\32\0\1\u01fd\137\0\1\u01fe"+
    "\107\0\1\u01ff\135\0\1\u0200\127\0\1\u0201\126\0\1\u0202"+
    "\46\0\3\u0203\6\0\6\u0203\25\0\6\u0203\54\0\3\55"+
    "\6\0\30\55\2\0\22\55\1\u0204\10\55\3\0\2\55"+
    "\23\0\3\55\6\0\21\55\1\u0205\6\55\2\0\33\55"+
    "\3\0\2\55\23\0\3\55\6\0\30\55\2\0\1\55"+
    "\1\u0206\31\55\3\0\2\55\20\0\1\206\1\205\1\0"+
    "\3\65\6\0\30\55\2\0\1\55\16\65\1\u0207\13\65"+
    "\3\0\1\55\1\65\20\0\1\206\1\205\1\0\3\65"+
    "\6\0\30\55\2\0\1\55\1\u0208\31\65\3\0\1\55"+
    "\1\65\22\0\1\u0209\123\0\1\206\1\205\1\0\3\65"+
    "\6\0\30\55\2\0\1\55\30\65\1\u020a\1\65\3\0"+
    "\1\55\1\65\20\0\1\206\1\205\1\0\3\206\41\0"+
    "\4\206\1\u020b\25\206\4\0\1\206\102\0\1\u020c\46\0"+
    "\3\125\6\0\10\125\1\u020d\17\125\2\0\33\125\3\0"+
    "\2\125\23\0\3\125\6\0\4\125\1\u020e\23\125\2\0"+
    "\33\125\3\0\2\125\23\0\3\125\6\0\17\125\1\u020f"+
    "\10\125\2\0\20\125\1\u020f\12\125\3\0\2\125\23\0"+
    "\3\125\6\0\1\u0210\27\125\2\0\33\125\3\0\2\125"+
    "\23\0\3\125\6\0\30\125\2\0\1\u0211\32\125\3\0"+
    "\2\125\23\0\3\125\6\0\4\125\1\u0212\23\125\2\0"+
    "\33\125\3\0\2\125\23\0\3\125\6\0\3\125\1\u0213"+
    "\24\125\2\0\33\125\3\0\2\125\23\0\3\125\6\0"+
    "\21\125\1\u0214\6\125\2\0\33\125\3\0\2\125\23\0"+
    "\3\125\6\0\4\125\1\u0215\23\125\2\0\33\125\3\0"+
    "\2\125\23\0\3\125\6\0\10\125\1\u0216\17\125\2\0"+
    "\33\125\3\0\2\125\23\0\3\125\6\0\30\125\2\0"+
    "\16\125\1\u0217\14\125\3\0\2\125\23\0\3\125\6\0"+
    "\30\125\2\0\14\125\1\u0218\16\125\3\0\2\125\23\0"+
    "\3\125\6\0\30\125\2\0\15\125\1\u0219\15\125\3\0"+
    "\2\125\23\0\3\125\6\0\30\125\2\0\22\125\1\u021a"+
    "\10\125\3\0\2\125\51\0\1\u021b\32\0\1\u021b\72\0"+
    "\1\u021c\32\0\1\u021c\77\0\1\u021d\33\0\1\u021d\71\0"+
    "\1\u021e\33\0\1\u021e\67\0\1\u021f\33\0\1\u021f\130\0"+
    "\1\u0220\115\0\1\u0221\142\0\1\u0222\104\0\1\u0223\51\0"+
    "\3\55\6\0\30\55\2\0\1\u0224\32\55\3\0\2\55"+
    "\20\0\1\206\1\205\1\0\3\65\6\0\30\55\2\0"+
    "\1\55\27\65\1\u0225\2\65\3\0\1\55\1\65\20\0"+
    "\2\206\1\0\3\206\41\0\32\206\4\0\1\206\20\0"+
    "\1\206\1\205\1\0\3\206\41\0\21\206\1\u0226\10\206"+
    "\4\0\1\206\23\0\3\125\6\0\15\125\1\u0227\12\125"+
    "\2\0\33\125\3\0\2\125\23\0\3\125\6\0\20\125"+
    "\1\u0228\7\125\2\0\33\125\3\0\2\125\23\0\3\125"+
    "\6\0\22\125\1\u0229\5\125\2\0\24\125\1\u0229\6\125"+
    "\3\0\2\125\23\0\3\125\6\0\20\125\1\u022a\7\125"+
    "\2\0\33\125\3\0\2\125\23\0\3\125\6\0\15\125"+
    "\1\u022b\12\125\2\0\33\125\3\0\2\125\23\0\3\125"+
    "\6\0\1\u022c\27\125\2\0\33\125\3\0\2\125\23\0"+
    "\3\125\6\0\30\125\2\0\1\u0224\32\125\3\0\2\125"+
    "\23\0\3\125\6\0\13\125\1\u022d\14\125\2\0\33\125"+
    "\3\0\2\125\23\0\3\125\6\0\30\125\2\0\5\125"+
    "\1\u022e\25\125\3\0\2\125\44\0\1\u022f\32\0\1\u022f"+
    "\66\0\1\u0230\32\0\1\u0230\136\0\1\u0231\120\0\1\u0232"+
    "\121\0\1\u0233\127\0\1\u0234\53\0\3\u0224\6\0\30\u0224"+
    "\2\0\33\u0224\3\0\2\u0224\20\0\1\206\1\205\1\0"+
    "\3\206\41\0\10\206\1\u0235\21\206\4\0\1\206\23\0"+
    "\3\125\6\0\5\125\1\u0236\22\125\2\0\33\125\3\0"+
    "\2\125\23\0\3\125\6\0\30\125\2\0\1\u0237\32\125"+
    "\3\0\2\125\23\0\3\125\6\0\10\125\1\u0238\17\125"+
    "\2\0\11\125\1\u0238\21\125\3\0\2\125\23\0\3\125"+
    "\6\0\30\125\2\0\1\u0239\32\125\3\0\2\125\23\0"+
    "\3\125\6\0\23\125\1\u023a\4\125\2\0\33\125\3\0"+
    "\2\125\23\0\3\125\6\0\22\125\1\u023b\5\125\2\0"+
    "\33\125\3\0\2\125\23\0\3\125\6\0\4\125\1\u023c"+
    "\23\125\2\0\33\125\3\0\2\125\23\0\3\125\6\0"+
    "\30\125\2\0\16\125\1\u023d\14\125\3\0\2\125\51\0"+
    "\1\u023e\32\0\1\u023e\55\0\1\u023f\32\0\1\u023f\130\0"+
    "\1\u0240\135\0\1\u0241\127\0\1\u0242\41\0\1\206\1\205"+
    "\1\0\3\206\41\0\5\206\1\u0243\24\206\4\0\1\206"+
    "\23\0\3\125\6\0\16\125\1\u0244\11\125\2\0\33\125"+
    "\3\0\2\125\23\0\3\125\6\0\1\u0245\27\125\2\0"+
    "\33\125\3\0\2\125\23\0\3\125\6\0\15\125\1\u0246"+
    "\12\125\2\0\16\125\1\u0246\14\125\3\0\2\125\23\0"+
    "\3\125\6\0\15\125\1\u0247\12\125\2\0\33\125\3\0"+
    "\2\125\23\0\3\125\6\0\14\125\1\u0248\13\125\2\0"+
    "\33\125\3\0\2\125\23\0\3\125\6\0\16\125\1\u0249"+
    "\11\125\2\0\33\125\3\0\2\125\23\0\3\125\6\0"+
    "\30\125\2\0\24\125\1\u024a\6\125\3\0\2\125\42\0"+
    "\1\u024b\32\0\1\u024b\147\0\1\u024c\31\0\3\125\6\0"+
    "\13\125\1\u024d\14\125\2\0\33\125\3\0\2\125\23\0"+
    "\3\125\6\0\6\125\1\u024e\21\125\2\0\7\125\1\u024e"+
    "\23\125\3\0\2\125\23\0\3\125\6\0\23\125\1\u024f"+
    "\4\125\2\0\33\125\3\0\2\125\23\0\3\125\6\0"+
    "\20\125\1\u0250\7\125\2\0\33\125\3\0\2\125\23\0"+
    "\3\125\6\0\1\125\1\u0251\26\125\2\0\33\125\3\0"+
    "\2\125\23\0\3\125\6\0\4\125\1\u0252\23\125\2\0"+
    "\33\125\3\0\2\125\23\0\3\125\6\0\14\125\1\u0253"+
    "\13\125\2\0\33\125\3\0\2\125\23\0\3\125\6\0"+
    "\10\125\1\u0254\17\125\2\0\33\125\3\0\2\125\23\0"+
    "\3\125\6\0\30\125\2\0\31\125\1\u0255\1\125\3\0"+
    "\2\125\23\0\3\125\6\0\1\u0256\27\125\2\0\33\125"+
    "\3\0\2\125\23\0\3\125\6\0\16\125\1\u0257\11\125"+
    "\2\0\33\125\3\0\2\125\23\0\3\125\6\0\10\125"+
    "\1\u0258\17\125\2\0\33\125\3\0\2\125\23\0\3\125"+
    "\6\0\22\125\1\u0259\5\125\2\0\33\125\3\0\2\125"+
    "\23\0\3\125\6\0\30\125\2\0\4\125\1\u025a\26\125"+
    "\3\0\2\125\23\0\3\125\6\0\16\125\1\u025b\11\125"+
    "\2\0\33\125\3\0\2\125\23\0\3\125\6\0\20\125"+
    "\1\u025c\7\125\2\0\33\125\3\0\2\125\23\0\3\125"+
    "\6\0\10\125\1\u025d\17\125\2\0\33\125\3\0\2\125"+
    "\23\0\3\125\6\0\16\125\1\u025e\11\125\2\0\33\125"+
    "\3\0\2\125";

  private static int [] zzUnpackTrans() {
    int [] result = new int[41022];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\4\1\1\11\2\1\1\11\1\1\1\11\1\1"+
    "\4\11\14\1\1\11\2\1\2\11\34\1\1\11\2\1"+
    "\3\11\1\1\2\11\1\1\2\11\22\1\2\11\10\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\0\1\1"+
    "\10\0\1\11\10\0\1\1\1\0\1\11\1\0\35\1"+
    "\2\11\2\0\3\11\1\0\32\1\1\11\10\0\1\11"+
    "\2\0\1\11\11\0\1\11\4\0\41\1\1\11\1\1"+
    "\1\0\33\1\2\0\1\11\3\0\1\11\15\0\1\11"+
    "\2\0\2\11\1\0\1\11\1\0\1\11\1\0\37\1"+
    "\2\0\32\1\3\0\1\11\2\0\1\11\11\0\2\11"+
    "\4\0\1\11\1\0\13\1\1\0\10\1\1\0\2\1"+
    "\1\0\24\1\1\0\1\11\1\0\2\11\1\0\1\11"+
    "\3\0\1\11\5\0\1\11\3\0\10\1\1\0\4\1"+
    "\1\0\2\1\1\0\23\1\1\0\1\11\4\0\1\11"+
    "\3\0\1\11\1\0\1\11\5\1\1\0\1\1\1\0"+
    "\1\11\16\1\2\11\1\0\1\11\5\0\2\1\1\0"+
    "\10\1\4\0\1\11\2\0\10\1\1\0\2\11\1\0"+
    "\1\11\10\1\2\11\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[606];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private List<ErrorAnalisis> errores = new ArrayList();
    private StringBuilder literal = new StringBuilder();

    private Symbol symbol(int type){
        return new Symbol(type, new Token(yyline, yycolumn, yytext()));
    }

    private Symbol symbol(int type, TipoDato tipoDato) {
        return new Symbol(type, new TypeToken(tipoDato, yyline, yycolumn, yytext()));
    }

    private Symbol symbol(int type, TipoDato tipoDato, String text) {
        String textLiteral = text + "\"";
        literal = new StringBuilder();
        return new Symbol(type, new TypeToken(tipoDato, yyline, yycolumn, textLiteral));
    }

    private void addLexicError(){
        String descripcion = "El simbolo no pertenece al lenguaje";
        errores.add(new ErrorAnalisis(yytext(), yyline+1, yycolumn+1, TipoError.LEXICO, descripcion));
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol(EOF, new Token(yyline, yycolumn, "Fin de linea"));
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol(TEXT_TAG);
            }
            // fall through
          case 143: break;
          case 2:
            { /**Ignorar*/
            }
            // fall through
          case 144: break;
          case 3:
            { yybegin(TAG); return symbol(LESS_THAN);
            }
            // fall through
          case 145: break;
          case 4:
            { addLexicError();
            }
            // fall through
          case 146: break;
          case 5:
            { return symbol(SLASH);
            }
            // fall through
          case 147: break;
          case 6:
            { yybegin(YYINITIAL); return symbol(GREATER_THAN);
            }
            // fall through
          case 148: break;
          case 7:
            { yybegin(PARAMETER); return symbol(OPEN_BRACKET);
            }
            // fall through
          case 149: break;
          case 8:
            { yybegin(VALUE); return symbol(QOUTE_MARK);
            }
            // fall through
          case 150: break;
          case 9:
            { return symbol(ASSIGN);
            }
            // fall through
          case 151: break;
          case 10:
            { yybegin(TAG); return symbol(CLOSE_BRACKET);
            }
            // fall through
          case 152: break;
          case 11:
            { yybegin(PARAMETER); return symbol(QOUTE_MARK);
            }
            // fall through
          case 153: break;
          case 12:
            { return symbol(ID_PARAM);
            }
            // fall through
          case 154: break;
          case 13:
            { return symbol(OPEN_ROUND_BRACKET);
            }
            // fall through
          case 155: break;
          case 14:
            { return symbol(CLOSE_ROUND_BRACKET);
            }
            // fall through
          case 156: break;
          case 15:
            { return symbol(ENTERO);
            }
            // fall through
          case 157: break;
          case 16:
            { return symbol(NAME_PARAM);
            }
            // fall through
          case 158: break;
          case 17:
            { return symbol(NOT);
            }
            // fall through
          case 159: break;
          case 18:
            { literal.append("\""); yybegin(LITERALS);
            }
            // fall through
          case 160: break;
          case 19:
            { return symbol(TIMES);
            }
            // fall through
          case 161: break;
          case 20:
            { return symbol(PLUS);
            }
            // fall through
          case 162: break;
          case 21:
            { return symbol(COMMA);
            }
            // fall through
          case 163: break;
          case 22:
            { return symbol(MINUS);
            }
            // fall through
          case 164: break;
          case 23:
            { return symbol(DIVIDE);
            }
            // fall through
          case 165: break;
          case 24:
            { return symbol(ENTERO2, TipoDato.INTEGER);
            }
            // fall through
          case 166: break;
          case 25:
            { return symbol(COLON);
            }
            // fall through
          case 167: break;
          case 26:
            { return symbol(SEMI);
            }
            // fall through
          case 168: break;
          case 27:
            { return symbol(LESS_THAN);
            }
            // fall through
          case 169: break;
          case 28:
            { return symbol(GREATER_THAN);
            }
            // fall through
          case 170: break;
          case 29:
            { return symbol(ID_VAR);
            }
            // fall through
          case 171: break;
          case 30:
            { return symbol(OPEN_BRACKET);
            }
            // fall through
          case 172: break;
          case 31:
            { return symbol(CLOSE_BRACKET);
            }
            // fall through
          case 173: break;
          case 32:
            { return symbol(OPEN_BRACE);
            }
            // fall through
          case 174: break;
          case 33:
            { return symbol(CLOSE_BRACE);
            }
            // fall through
          case 175: break;
          case 34:
            { literal.append(yytext());
            }
            // fall through
          case 176: break;
          case 35:
            { yybegin(SCRIPTING); return symbol(LITERAL, TipoDato.STRING, literal.toString());
            }
            // fall through
          case 177: break;
          case 36:
            { return symbol(ID);
            }
            // fall through
          case 178: break;
          case 37:
            { return symbol(URL);
            }
            // fall through
          case 179: break;
          case 38:
            { return symbol(WH_VAL);
            }
            // fall through
          case 180: break;
          case 39:
            { return symbol(NOT_EQTUAL_TO);
            }
            // fall through
          case 181: break;
          case 40:
            { return symbol(AND);
            }
            // fall through
          case 182: break;
          case 41:
            { return symbol(LESS_THAN_OR_EQUAL_TO);
            }
            // fall through
          case 183: break;
          case 42:
            { return symbol(EQUAL_TO);
            }
            // fall through
          case 184: break;
          case 43:
            { return symbol(GREATER_THAN_OR_EQUAL_TO);
            }
            // fall through
          case 185: break;
          case 44:
            { return symbol(IF);
            }
            // fall through
          case 186: break;
          case 45:
            { return symbol(OR);
            }
            // fall through
          case 187: break;
          case 46:
            { return symbol(C_P);
            }
            // fall through
          case 188: break;
          case 47:
            { return symbol(ALT);
            }
            // fall through
          case 189: break;
          case 48:
            { return symbol(SRC);
            }
            // fall through
          case 190: break;
          case 49:
            { return symbol(SIZE);
            }
            // fall through
          case 191: break;
          case 50:
            { return symbol(RED);
            }
            // fall through
          case 192: break;
          case 51:
            { return symbol(ROW);
            }
            // fall through
          case 193: break;
          case 52:
            { return symbol(CHAR_VAL, TipoDato.CHAR);
            }
            // fall through
          case 194: break;
          case 53:
            { return symbol(DECIMAL_VAL, TipoDato.DECIMAL);
            }
            // fall through
          case 195: break;
          case 54:
            { return symbol(ASC, TipoDato.STRING);
            }
            // fall through
          case 196: break;
          case 55:
            { return symbol(END);
            }
            // fall through
          case 197: break;
          case 56:
            { return symbol(C_BR);
            }
            // fall through
          case 198: break;
          case 57:
            { return symbol(C_H1);
            }
            // fall through
          case 199: break;
          case 58:
            { return symbol(COLS);
            }
            // fall through
          case 200: break;
          case 59:
            { return symbol(HREF);
            }
            // fall through
          case 201: break;
          case 60:
            { return symbol(NAME);
            }
            // fall through
          case 202: break;
          case 61:
            { return symbol(ROWS);
            }
            // fall through
          case 203: break;
          case 62:
            { return symbol(TYPE);
            }
            // fall through
          case 204: break;
          case 63:
            { return symbol(COLOR_VALUE);
            }
            // fall through
          case 205: break;
          case 64:
            { return symbol(AQUA);
            }
            // fall through
          case 206: break;
          case 65:
            { return symbol(BLUE);
            }
            // fall through
          case 207: break;
          case 66:
            { return symbol(GRAY);
            }
            // fall through
          case 208: break;
          case 67:
            { return symbol(LEFT);
            }
            // fall through
          case 209: break;
          case 68:
            { return symbol(LIME);
            }
            // fall through
          case 210: break;
          case 69:
            { return symbol(NAVY);
            }
            // fall through
          case 211: break;
          case 70:
            { return symbol(TEAL);
            }
            // fall through
          case 212: break;
          case 71:
            { return symbol(TEXT);
            }
            // fall through
          case 213: break;
          case 72:
            { return symbol(DESC, TipoDato.STRING);
            }
            // fall through
          case 214: break;
          case 73:
            { return symbol(ELSE);
            }
            // fall through
          case 215: break;
          case 74:
            { return symbol(EXIT);
            }
            // fall through
          case 216: break;
          case 75:
            { return symbol(INIT);
            }
            // fall through
          case 217: break;
          case 76:
            { return symbol(THEN);
            }
            // fall through
          case 218: break;
          case 77:
            { return symbol(CHAR, TipoDato.CHAR);
            }
            // fall through
          case 219: break;
          case 78:
            { return symbol(TRUE, TipoDato.BOOLEAN);
            }
            // fall through
          case 220: break;
          case 79:
            { return symbol(C_DIV);
            }
            // fall through
          case 221: break;
          case 80:
            { return symbol(C_IMG);
            }
            // fall through
          case 222: break;
          case 81:
            { return symbol(CLASS);
            }
            // fall through
          case 223: break;
          case 82:
            { return symbol(COLOR);
            }
            // fall through
          case 224: break;
          case 83:
            { return symbol(WIDTH);
            }
            // fall through
          case 225: break;
          case 84:
            { return symbol(ARIAL);
            }
            // fall through
          case 226: break;
          case 85:
            { return symbol(BLACK);
            }
            // fall through
          case 227: break;
          case 86:
            { return symbol(GREEN);
            }
            // fall through
          case 228: break;
          case 87:
            { return symbol(OLIVE);
            }
            // fall through
          case 229: break;
          case 88:
            { return symbol(RADIO);
            }
            // fall through
          case 230: break;
          case 89:
            { return symbol(RIGHT);
            }
            // fall through
          case 231: break;
          case 90:
            { return symbol(WHILE);
            }
            // fall through
          case 232: break;
          case 91:
            { return symbol(FALSE, TipoDato.BOOLEAN);
            }
            // fall through
          case 233: break;
          case 92:
            { return symbol(C_BODY);
            }
            // fall through
          case 234: break;
          case 93:
            { return symbol(C_GCIC);
            }
            // fall through
          case 235: break;
          case 94:
            { return symbol(C_HEAD);
            }
            // fall through
          case 236: break;
          case 95:
            { return symbol(C_LINK);
            }
            // fall through
          case 237: break;
          case 96:
            { return symbol(C_SPAM);
            }
            // fall through
          case 238: break;
          case 97:
            { return symbol(HEIGHT);
            }
            // fall through
          case 239: break;
          case 98:
            { return symbol(GENEVA);
            }
            // fall through
          case 240: break;
          case 99:
            { return symbol(CENTER);
            }
            // fall through
          case 241: break;
          case 100:
            { return symbol(COLUMN);
            }
            // fall through
          case 242: break;
          case 101:
            { return symbol(MARRON);
            }
            // fall through
          case 243: break;
          case 102:
            { return symbol(NUMBER);
            }
            // fall through
          case 244: break;
          case 103:
            { return symbol(PURPLE);
            }
            // fall through
          case 245: break;
          case 104:
            { return symbol(SILVER);
            }
            // fall through
          case 246: break;
          case 105:
            { return symbol(YELLOW);
            }
            // fall through
          case 247: break;
          case 106:
            { return symbol(HUNTIL);
            }
            // fall through
          case 248: break;
          case 107:
            { return symbol(INSERT);
            }
            // fall through
          case 249: break;
          case 108:
            { return symbol(REPEAT);
            }
            // fall through
          case 250: break;
          case 109:
            { return symbol(STRING, TipoDato.STRING);
            }
            // fall through
          case 251: break;
          case 110:
            { return symbol(C_INPUT);
            }
            // fall through
          case 252: break;
          case 111:
            { return symbol(C_TITLE);
            }
            // fall through
          case 253: break;
          case 112:
            { return symbol(ONCLICK);
            }
            // fall through
          case 254: break;
          case 113:
            { return symbol(COURIER);
            }
            // fall through
          case 255: break;
          case 114:
            { return symbol(VERDANA);
            }
            // fall through
          case 256: break;
          case 115:
            { return symbol(FUCHSIA);
            }
            // fall through
          case 257: break;
          case 116:
            { return symbol(JUSTIFY);
            }
            // fall through
          case 258: break;
          case 117:
            { return symbol(GLOBAL_MODE);
            }
            // fall through
          case 259: break;
          case 118:
            { return symbol(ON_LOAD);
            }
            // fall through
          case 260: break;
          case 119:
            { return symbol(REVERSE, TipoDato.STRING);
            }
            // fall through
          case 261: break;
          case 120:
            { return symbol(BOOLEAN, TipoDato.BOOLEAN);
            }
            // fall through
          case 262: break;
          case 121:
            { return symbol(DECIMAL, TipoDato.DECIMAL);
            }
            // fall through
          case 263: break;
          case 122:
            { return symbol(INTEGER, TipoDato.INTEGER);
            }
            // fall through
          case 264: break;
          case 123:
            { return symbol(C_BUTTON);
            }
            // fall through
          case 265: break;
          case 124:
            { return symbol(C_OPTION);
            }
            // fall through
          case 266: break;
          case 125:
            { return symbol(C_SELECT);
            }
            // fall through
          case 267: break;
          case 126:
            { return symbol(PROCESS_NAME);
            }
            // fall through
          case 268: break;
          case 127:
            { return symbol(CHECKBOX);
            }
            // fall through
          case 269: break;
          case 128:
            { return symbol(FONT_SIZE);
            }
            // fall through
          case 270: break;
          case 129:
            { return symbol(THENWHILE);
            }
            // fall through
          case 271: break;
          case 130:
            { return symbol(C_TEXTAREA);
            }
            // fall through
          case 272: break;
          case 131:
            { return symbol(BACKGROUND);
            }
            // fall through
          case 273: break;
          case 132:
            { return symbol(TEXT_ALIGN);
            }
            // fall through
          case 274: break;
          case 133:
            { return symbol(SANS_SERIF);
            }
            // fall through
          case 275: break;
          case 134:
            { return symbol(ALERT_INFO);
            }
            // fall through
          case 276: break;
          case 135:
            { return symbol(LETPAR_NUM, TipoDato.STRING);
            }
            // fall through
          case 277: break;
          case 136:
            { yybegin(SCRIPTING); return symbol(C_SCRIPTING);
            }
            // fall through
          case 278: break;
          case 137:
            { return symbol(FONT_FAMILY);
            }
            // fall through
          case 279: break;
          case 138:
            { yybegin(TAG); return symbol(C_SCRIPTING);
            }
            // fall through
          case 280: break;
          case 139:
            { return symbol(LETIMPAR_NUM, TipoDato.STRING);
            }
            // fall through
          case 281: break;
          case 140:
            { return symbol(NUM_ALEATORIO, TipoDato.INTEGER);
            }
            // fall through
          case 282: break;
          case 141:
            { return symbol(ELEMENT_BY_ID, TipoDato.STRING);
            }
            // fall through
          case 283: break;
          case 142:
            { return symbol(CARACTER_ALEATORIO, TipoDato.CHAR);
            }
            // fall through
          case 284: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
