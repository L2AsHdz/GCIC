// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.flex

package analizadores.lexico;

import java.util.ArrayList;
import java.util.List;
import model.Token;
import model.errores.ErrorAnalisis;
import model.errores.TipoError;
import static analizadores.sintactico.Sym.*;

import java_cup.runtime.Symbol;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int TAG = 2;
  public static final int PARAMETER = 4;
  public static final int VALUE = 6;
  public static final int OTHER = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u7300\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\1\22\0\1\3\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\0\1\17\1\20\1\21\1\22\1\23\10\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\0\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\44"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\44\1\63\1\0\1\64\1\0\1\65\1\0\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116"+
    "\1\117\1\120\1\121\1\122\7\0\1\1\32\0\1\1"+
    "\11\0\1\44\12\0\1\44\4\0\1\44\5\0\27\44"+
    "\1\0\37\44\1\0\u01ca\44\4\0\14\44\16\0\5\44"+
    "\7\0\1\44\1\0\1\44\21\0\160\123\5\44\1\0"+
    "\2\44\2\0\4\44\1\0\1\44\6\0\1\44\1\0"+
    "\3\44\1\0\1\44\1\0\24\44\1\0\123\44\1\0"+
    "\213\44\1\0\7\123\246\44\1\0\46\44\2\0\1\44"+
    "\6\0\51\44\10\0\55\123\1\0\1\123\1\0\2\123"+
    "\1\0\2\123\1\0\1\123\10\0\33\44\4\0\4\44"+
    "\35\0\13\123\5\0\53\44\25\123\12\124\4\0\2\44"+
    "\1\123\143\44\1\0\1\44\7\123\2\0\6\123\2\44"+
    "\2\123\1\0\4\123\2\44\12\124\3\44\2\0\1\44"+
    "\20\0\1\44\1\123\36\44\33\123\2\0\131\44\13\123"+
    "\1\44\16\0\12\124\41\44\11\123\2\44\4\0\1\44"+
    "\2\0\1\123\2\0\26\44\4\123\1\44\11\123\1\44"+
    "\3\123\1\44\5\123\22\0\31\44\3\123\4\0\13\44"+
    "\65\0\25\44\1\0\10\44\25\0\17\123\1\0\41\123"+
    "\66\44\3\123\1\44\22\123\1\44\7\123\12\44\2\123"+
    "\2\0\12\124\1\0\20\44\3\123\1\0\10\44\2\0"+
    "\2\44\2\0\26\44\1\0\7\44\1\0\1\44\3\0"+
    "\4\44\2\0\1\123\1\44\7\123\2\0\2\123\2\0"+
    "\3\123\1\44\10\0\1\123\4\0\2\44\1\0\3\44"+
    "\2\123\2\0\12\124\2\44\12\0\1\44\1\0\1\123"+
    "\2\0\3\123\1\0\6\44\4\0\2\44\2\0\26\44"+
    "\1\0\7\44\1\0\2\44\1\0\2\44\1\0\2\44"+
    "\2\0\1\123\1\0\5\123\4\0\2\123\2\0\3\123"+
    "\3\0\1\123\7\0\4\44\1\0\1\44\7\0\12\124"+
    "\2\123\3\44\1\123\13\0\3\123\1\0\11\44\1\0"+
    "\3\44\1\0\26\44\1\0\7\44\1\0\2\44\1\0"+
    "\5\44\2\0\1\123\1\44\10\123\1\0\3\123\1\0"+
    "\3\123\2\0\1\44\17\0\2\44\2\123\2\0\12\124"+
    "\11\0\1\44\6\123\1\0\3\123\1\0\10\44\2\0"+
    "\2\44\2\0\26\44\1\0\7\44\1\0\2\44\1\0"+
    "\5\44\2\0\1\123\1\44\7\123\2\0\2\123\2\0"+
    "\3\123\10\0\2\123\4\0\2\44\1\0\3\44\2\123"+
    "\2\0\12\124\1\0\1\44\20\0\1\123\1\44\1\0"+
    "\6\44\3\0\3\44\1\0\4\44\3\0\2\44\1\0"+
    "\1\44\1\0\2\44\3\0\2\44\3\0\3\44\3\0"+
    "\14\44\4\0\5\123\3\0\3\123\1\0\4\123\2\0"+
    "\1\44\6\0\1\123\16\0\12\124\20\0\5\123\10\44"+
    "\1\0\3\44\1\0\27\44\1\0\20\44\3\0\1\44"+
    "\7\123\1\0\3\123\1\0\4\123\7\0\2\123\1\0"+
    "\3\44\5\0\2\44\2\123\2\0\12\124\20\0\1\44"+
    "\3\123\1\0\10\44\1\0\3\44\1\0\27\44\1\0"+
    "\12\44\1\0\5\44\2\0\1\123\1\44\7\123\1\0"+
    "\3\123\1\0\4\123\7\0\2\123\7\0\1\44\1\0"+
    "\2\44\2\123\2\0\12\124\1\0\2\44\15\0\4\123"+
    "\1\0\10\44\1\0\3\44\1\0\51\44\2\123\1\44"+
    "\7\123\1\0\3\123\1\0\4\123\1\44\5\0\3\44"+
    "\1\123\7\0\3\44\2\123\2\0\12\124\12\0\6\44"+
    "\2\0\2\123\1\0\22\44\3\0\30\44\1\0\11\44"+
    "\1\0\1\44\2\0\7\44\3\0\1\123\4\0\6\123"+
    "\1\0\1\123\1\0\10\123\6\0\12\124\2\0\2\123"+
    "\15\0\60\44\1\123\2\44\7\123\5\0\7\44\10\123"+
    "\1\0\12\124\47\0\2\44\1\0\1\44\1\0\5\44"+
    "\1\0\30\44\1\0\1\44\1\0\12\44\1\123\2\44"+
    "\11\123\1\44\2\0\5\44\1\0\1\44\1\0\6\123"+
    "\2\0\12\124\2\0\4\44\40\0\1\44\27\0\2\123"+
    "\6\0\12\124\13\0\1\123\1\0\1\123\1\0\1\123"+
    "\4\0\2\123\10\44\1\0\44\44\4\0\24\123\1\0"+
    "\2\123\5\44\13\123\1\0\44\123\11\0\1\123\71\0"+
    "\53\44\24\123\1\44\12\124\6\0\6\44\4\123\4\44"+
    "\3\123\1\44\3\123\2\44\7\123\3\44\4\123\15\44"+
    "\14\123\1\44\1\123\12\124\4\123\2\0\46\44\1\0"+
    "\1\44\5\0\1\44\2\0\53\44\1\0\115\44\1\0"+
    "\4\44\2\0\7\44\1\0\1\44\1\0\4\44\2\0"+
    "\51\44\1\0\4\44\2\0\41\44\1\0\4\44\2\0"+
    "\7\44\1\0\1\44\1\0\4\44\2\0\17\44\1\0"+
    "\71\44\1\0\4\44\2\0\103\44\2\0\3\123\40\0"+
    "\20\44\20\0\126\44\2\0\6\44\3\0\u016c\44\2\0"+
    "\21\44\1\1\32\44\5\0\113\44\3\0\3\123\10\44"+
    "\7\0\15\44\1\0\4\44\3\123\13\0\22\44\3\123"+
    "\13\0\22\44\2\123\14\0\15\44\1\0\3\44\1\0"+
    "\2\123\14\0\64\44\40\123\3\0\1\44\4\0\1\44"+
    "\1\123\2\0\12\124\41\0\3\123\2\0\12\124\6\0"+
    "\131\44\7\0\5\44\2\123\42\44\1\123\1\44\5\0"+
    "\106\44\12\0\37\44\1\0\14\123\4\0\14\123\12\0"+
    "\12\124\36\44\2\0\5\44\13\0\54\44\4\0\32\44"+
    "\6\0\12\124\46\0\27\44\5\123\4\0\65\44\12\123"+
    "\1\0\35\123\2\0\1\123\12\124\6\0\12\124\15\0"+
    "\1\44\10\0\17\123\101\0\5\123\57\44\21\123\7\44"+
    "\4\0\12\124\21\0\11\123\14\0\3\123\36\44\15\123"+
    "\2\44\12\124\54\44\16\123\14\0\44\44\24\123\10\0"+
    "\12\124\3\0\3\44\12\124\44\44\2\0\11\44\7\0"+
    "\53\44\2\0\3\44\20\0\3\123\1\0\25\123\4\44"+
    "\1\123\6\44\1\123\2\44\3\123\1\44\5\0\300\44"+
    "\72\123\1\0\5\123\26\44\2\0\6\44\2\0\46\44"+
    "\2\0\6\44\2\0\10\44\1\0\1\44\1\0\1\44"+
    "\1\0\1\44\1\0\37\44\2\0\65\44\1\0\7\44"+
    "\1\0\1\44\3\0\3\44\1\0\7\44\3\0\4\44"+
    "\2\0\6\44\4\0\15\44\5\0\3\44\1\0\7\44"+
    "\3\0\13\1\35\0\2\1\5\0\1\1\17\0\2\123"+
    "\23\0\1\123\12\0\1\1\21\0\1\44\15\0\1\44"+
    "\20\0\15\44\63\0\41\123\21\0\1\44\4\0\1\44"+
    "\2\0\12\44\1\0\1\44\3\0\5\44\6\0\1\44"+
    "\1\0\1\44\1\0\1\44\1\0\4\44\1\0\13\44"+
    "\2\0\4\44\5\0\5\44\4\0\1\44\21\0\43\123"+
    "\2\44\4\123\u022d\0\64\123\26\0\57\44\1\0\57\44"+
    "\1\0\205\44\6\0\4\44\3\123\2\44\14\0\46\44"+
    "\1\0\1\44\5\0\1\44\2\0\70\44\7\0\1\44"+
    "\17\0\1\123\27\44\11\0\7\44\1\0\7\44\1\0"+
    "\7\44\1\0\7\44\1\0\7\44\1\0\7\44\1\0"+
    "\7\44\1\0\7\44\1\0\40\123\57\0\1\44\320\0"+
    "\1\1\4\0\2\44\1\123\31\0\17\123\1\0\5\44"+
    "\2\0\3\123\2\44\4\0\126\44\2\0\2\123\2\0"+
    "\3\44\1\0\132\44\1\0\4\44\5\0\53\44\1\0"+
    "\136\44\21\0\33\44\65\0\306\44\112\0\360\44\20\0"+
    "\215\44\103\0\56\44\2\0\15\44\3\0\20\44\12\124"+
    "\2\44\24\0\57\44\4\123\1\0\12\123\1\0\37\44"+
    "\2\123\106\44\14\123\45\0\11\44\2\0\147\44\2\0"+
    "\65\44\2\0\5\44\60\0\13\44\1\123\3\44\1\123"+
    "\4\44\1\123\27\44\5\123\30\0\64\44\14\0\2\123"+
    "\62\44\22\123\12\0\12\124\6\0\22\123\6\44\3\0"+
    "\1\44\1\0\2\44\1\123\12\124\34\44\10\123\2\0"+
    "\27\44\15\123\14\0\35\44\3\0\4\123\57\44\16\123"+
    "\16\0\1\44\12\124\6\0\5\44\1\123\12\44\12\124"+
    "\5\44\1\0\51\44\16\123\11\0\3\44\1\123\10\44"+
    "\2\123\2\0\12\124\6\0\27\44\3\0\1\44\3\123"+
    "\62\44\1\123\1\44\3\123\2\44\2\123\5\44\2\123"+
    "\1\44\1\123\1\44\30\0\3\44\2\0\13\44\5\123"+
    "\2\0\3\44\2\123\12\0\6\44\2\0\6\44\2\0"+
    "\6\44\11\0\7\44\1\0\7\44\1\0\53\44\1\0"+
    "\14\44\10\0\163\44\10\123\1\0\2\123\2\0\12\124"+
    "\6\0\244\44\14\0\27\44\4\0\61\44\4\0\156\44"+
    "\2\0\152\44\46\0\7\44\14\0\5\44\5\0\1\44"+
    "\1\123\12\44\1\0\15\44\1\0\5\44\1\0\1\44"+
    "\1\0\2\44\1\0\2\44\1\0\154\44\41\0\153\44"+
    "\22\0\100\44\2\0\66\44\50\0\14\44\4\0\20\123"+
    "\20\0\20\123\3\0\2\123\30\0\3\123\40\0\5\44"+
    "\1\0\207\44\23\0\12\124\7\0\32\44\4\0\1\123"+
    "\1\0\32\44\13\0\131\44\3\0\6\44\2\0\6\44"+
    "\2\0\6\44\2\0\3\44\43\0\14\44\1\0\32\44"+
    "\1\0\23\44\1\0\2\44\1\0\17\44\2\0\16\44"+
    "\42\0\173\44\105\0\65\123\210\0\1\123\202\0\35\44"+
    "\3\0\61\44\17\0\1\123\37\0\40\44\15\0\24\44"+
    "\1\123\10\44\1\123\5\0\46\44\5\123\5\0\36\44"+
    "\2\0\44\44\4\0\10\44\1\0\5\123\52\0\236\44"+
    "\2\0\12\124\6\0\44\44\4\0\44\44\4\0\50\44"+
    "\10\0\64\44\234\0\67\44\11\0\26\44\12\0\10\44"+
    "\230\0\6\44\2\0\1\44\1\0\54\44\1\0\2\44"+
    "\3\0\1\44\2\0\27\44\12\0\27\44\11\0\37\44"+
    "\101\0\23\44\1\0\2\44\12\0\26\44\12\0\32\44"+
    "\106\0\70\44\6\0\2\44\100\0\1\44\3\123\1\0"+
    "\2\123\5\0\4\123\4\44\1\0\3\44\1\0\35\44"+
    "\2\0\3\123\4\0\1\123\40\0\35\44\3\0\35\44"+
    "\43\0\10\44\1\0\34\44\2\123\31\0\66\44\12\0"+
    "\26\44\12\0\23\44\15\0\22\44\156\0\111\44\67\0"+
    "\63\44\15\0\63\44\15\0\44\44\4\123\10\0\12\124"+
    "\306\0\35\44\12\0\1\44\10\0\26\44\13\123\217\0"+
    "\27\44\11\0\3\123\65\44\17\123\37\0\12\124\17\0"+
    "\4\123\55\44\13\123\25\0\31\44\7\0\12\124\6\0"+
    "\3\123\44\44\16\123\1\0\12\124\4\0\1\44\2\123"+
    "\11\0\43\44\1\123\2\0\1\44\11\0\3\123\60\44"+
    "\16\123\4\44\4\0\4\123\3\0\12\124\1\44\1\0"+
    "\1\44\43\0\22\44\1\0\31\44\14\123\6\0\1\123"+
    "\101\0\7\44\1\0\1\44\1\0\4\44\1\0\17\44"+
    "\1\0\12\44\7\0\57\44\14\123\5\0\12\124\6\0"+
    "\4\123\1\0\10\44\2\0\2\44\2\0\26\44\1\0"+
    "\7\44\1\0\2\44\1\0\5\44\1\0\2\123\1\44"+
    "\7\123\2\0\2\123\2\0\3\123\2\0\1\44\6\0"+
    "\1\123\5\0\5\44\2\123\2\0\7\123\3\0\5\123"+
    "\213\0\65\44\22\123\4\44\5\0\12\124\4\0\1\123"+
    "\1\44\40\0\60\44\24\123\2\44\1\0\1\44\10\0"+
    "\12\124\246\0\57\44\7\123\2\0\11\123\27\0\4\44"+
    "\2\123\42\0\60\44\21\123\3\0\1\44\13\0\12\124"+
    "\46\0\53\44\15\123\1\44\7\0\12\124\66\0\33\44"+
    "\2\0\17\123\4\0\12\124\306\0\54\44\17\123\145\0"+
    "\100\44\12\124\25\0\1\44\240\0\10\44\2\0\47\44"+
    "\7\123\2\0\7\123\1\44\1\0\1\44\1\123\33\0"+
    "\1\44\12\123\50\44\7\123\1\44\4\123\10\0\1\123"+
    "\10\0\1\44\13\123\56\44\20\123\3\0\1\44\42\0"+
    "\71\44\7\0\11\44\1\0\45\44\10\123\1\0\10\123"+
    "\1\44\17\0\12\124\30\0\36\44\2\0\26\123\1\0"+
    "\16\123\111\0\7\44\1\0\2\44\1\0\46\44\6\123"+
    "\3\0\1\123\1\0\2\123\1\0\7\123\1\44\1\123"+
    "\10\0\12\124\6\0\6\44\1\0\2\44\1\0\40\44"+
    "\5\123\1\0\2\123\1\0\5\123\1\44\7\0\12\124"+
    "\u0136\0\23\44\4\123\11\0\232\44\146\0\157\123\21\0"+
    "\304\44\274\0\57\44\321\0\107\44\271\0\71\44\7\0"+
    "\37\44\1\0\12\124\146\0\36\44\2\0\5\123\13\0"+
    "\60\44\7\123\11\0\4\44\14\0\12\124\11\0\25\44"+
    "\5\0\23\44\260\0\100\44\200\0\113\44\4\0\1\123"+
    "\1\44\67\123\7\0\4\123\15\44\100\0\2\44\1\0"+
    "\1\44\34\0\370\44\10\0\363\44\15\0\37\44\61\0"+
    "\3\44\21\0\4\44\10\0\u018c\44\4\0\153\44\5\0"+
    "\15\44\3\0\11\44\7\0\12\44\3\0\2\123\306\0"+
    "\5\123\3\0\6\123\10\0\10\123\2\0\7\123\36\0"+
    "\4\123\224\0\3\123\273\0\125\44\1\0\107\44\1\0"+
    "\2\44\2\0\1\44\2\0\2\44\2\0\4\44\1\0"+
    "\14\44\1\0\1\44\1\0\7\44\1\0\101\44\1\0"+
    "\4\44\2\0\10\44\1\0\7\44\1\0\34\44\1\0"+
    "\4\44\1\0\5\44\1\0\1\44\3\0\7\44\1\0"+
    "\u0154\44\2\0\31\44\1\0\31\44\1\0\37\44\1\0"+
    "\31\44\1\0\37\44\1\0\31\44\1\0\37\44\1\0"+
    "\31\44\1\0\37\44\1\0\31\44\1\0\10\44\2\0"+
    "\62\124\67\123\4\0\62\123\10\0\1\123\16\0\1\123"+
    "\26\0\5\123\1\0\17\123\120\0\7\123\1\0\21\123"+
    "\2\0\7\123\1\0\2\123\1\0\5\123\325\0\55\44"+
    "\3\0\7\123\7\44\2\0\12\124\4\0\1\44\u0171\0"+
    "\54\44\4\123\12\124\6\0\305\44\13\0\7\123\51\0"+
    "\104\44\7\123\1\44\4\0\12\124\246\0\4\44\1\0"+
    "\33\44\1\0\2\44\1\0\1\44\2\0\1\44\1\0"+
    "\12\44\1\0\4\44\1\0\1\44\1\0\1\44\6\0"+
    "\1\44\4\0\1\44\1\0\1\44\1\0\1\44\1\0"+
    "\3\44\1\0\2\44\1\0\1\44\2\0\1\44\1\0"+
    "\1\44\1\0\1\44\1\0\1\44\1\0\1\44\1\0"+
    "\2\44\1\0\1\44\2\0\4\44\1\0\7\44\1\0"+
    "\4\44\1\0\4\44\1\0\1\44\1\0\12\44\1\0"+
    "\21\44\5\0\3\44\1\0\5\44\1\0\21\44\164\0"+
    "\32\123\6\0\32\123\6\0\32\123\166\0\327\44\51\0"+
    "\65\44\13\0\336\44\2\0\u0182\44\16\0\u0131\44\37\0"+
    "\36\44\342\0\360\123\20\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\1\1\3\1\4\1\2\1\4"+
    "\1\5\1\4\1\6\1\4\1\7\1\10\1\11\1\12"+
    "\14\4\1\13\1\4\2\14\1\4\2\15\26\16\1\17"+
    "\1\4\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\4\1\31\1\4\26\32\1\33\1\4"+
    "\1\34\1\2\1\0\1\2\11\0\1\35\10\0\1\36"+
    "\1\0\1\37\1\0\34\16\1\40\1\41\1\42\1\43"+
    "\1\44\1\0\10\32\1\45\20\32\1\46\11\0\1\47"+
    "\2\0\1\50\11\0\1\51\4\0\1\52\27\16\1\53"+
    "\1\16\1\54\5\16\1\0\1\32\1\55\3\32\1\56"+
    "\24\32\3\0\1\57\3\0\1\60\14\0\1\61\2\0"+
    "\1\62\1\63\1\0\1\64\1\0\1\65\1\0\1\66"+
    "\4\16\1\67\1\16\1\70\4\16\1\71\3\16\1\72"+
    "\1\73\1\16\1\74\7\16\1\75\1\76\1\16\1\0"+
    "\2\32\1\77\1\100\1\101\1\32\1\102\10\32\1\103"+
    "\2\32\1\104\5\32\1\105\4\0\1\106\2\0\1\107"+
    "\10\0\1\110\1\111\4\0\1\112\1\0\1\113\3\16"+
    "\1\114\4\16\1\115\1\0\4\16\1\116\1\16\1\117"+
    "\1\120\1\0\2\16\1\0\14\32\1\121\2\32\1\122"+
    "\3\32\2\0\1\123\1\0\1\124\1\125\1\0\1\126"+
    "\2\0\1\127\5\0\1\130\3\0\1\16\1\131\1\16"+
    "\1\132\1\16\1\133\1\16\1\0\1\16\1\134\1\135"+
    "\1\136\1\0\1\137\1\140\1\0\2\32\1\141\1\142"+
    "\5\32\1\143\6\32\1\144\1\2\2\0\1\145\3\0"+
    "\1\146\3\0\1\147\1\0\1\66\1\150\1\151\1\16"+
    "\1\152\1\0\1\153\1\0\1\154\5\32\1\155\1\32"+
    "\1\156\1\32\1\157\1\160\1\32\1\161\1\0\1\162"+
    "\1\163\1\164\5\0\1\165\1\0\5\32\1\166\2\32"+
    "\4\0\1\167\2\0\5\32\1\170\1\32\1\0\1\171"+
    "\1\172\1\0\1\173\1\174\1\175\2\32\1\176\2\32"+
    "\1\177\1\200\5\32\1\201\3\32\1\202\2\32\1\203"+
    "\3\32\1\204";

  private static int [] zzUnpackAction() {
    int [] result = new int[575];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\125\0\252\0\377\0\u0154\0\u01a9\0\u01fe\0\u0253"+
    "\0\u02a8\0\u02fd\0\u0352\0\u03a7\0\u02fd\0\u02a8\0\u02fd\0\u03fc"+
    "\0\u02fd\0\u02fd\0\u02fd\0\u02fd\0\u0451\0\u04a6\0\u04fb\0\u0550"+
    "\0\u05a5\0\u05fa\0\u064f\0\u06a4\0\u06f9\0\u074e\0\u07a3\0\u07f8"+
    "\0\u02fd\0\u084d\0\u08a2\0\u08f7\0\u094c\0\u09a1\0\u09f6\0\u0a4b"+
    "\0\u0aa0\0\u0af5\0\u0b4a\0\u0b9f\0\u0bf4\0\u0c49\0\u0c9e\0\u0cf3"+
    "\0\u0d48\0\u0d9d\0\u0df2\0\u0e47\0\u0e9c\0\u0ef1\0\u0f46\0\u0f9b"+
    "\0\u0ff0\0\u1045\0\u109a\0\u10ef\0\u1144\0\u1199\0\u11ee\0\u02fd"+
    "\0\u02fd\0\u02fd\0\u02fd\0\u02fd\0\u02fd\0\u02fd\0\u02fd\0\u1243"+
    "\0\u1298\0\u12ed\0\u1342\0\u1397\0\u13ec\0\u1441\0\u1496\0\u14eb"+
    "\0\u1540\0\u1595\0\u15ea\0\u163f\0\u1694\0\u16e9\0\u173e\0\u1793"+
    "\0\u17e8\0\u183d\0\u1892\0\u18e7\0\u193c\0\u1991\0\u19e6\0\u1a3b"+
    "\0\u1a90\0\u02fd\0\u1ae5\0\u02fd\0\u1b3a\0\u1b8f\0\u1be4\0\u1c39"+
    "\0\u1c8e\0\u1ce3\0\u1d38\0\u1d8d\0\u1de2\0\u1e37\0\u1e8c\0\u1ee1"+
    "\0\u02fd\0\u1f36\0\u1f8b\0\u1fe0\0\u2035\0\u208a\0\u20df\0\u2134"+
    "\0\u2189\0\u21de\0\u094c\0\u02fd\0\u2233\0\u2288\0\u22dd\0\u2332"+
    "\0\u2387\0\u23dc\0\u2431\0\u2486\0\u24db\0\u2530\0\u2585\0\u25da"+
    "\0\u262f\0\u2684\0\u26d9\0\u272e\0\u2783\0\u27d8\0\u282d\0\u2882"+
    "\0\u28d7\0\u292c\0\u2981\0\u29d6\0\u2a2b\0\u2a80\0\u2ad5\0\u2b2a"+
    "\0\u2b7f\0\u02fd\0\u02fd\0\u02fd\0\u02fd\0\u02fd\0\u2bd4\0\u2c29"+
    "\0\u2c7e\0\u2cd3\0\u2d28\0\u2d7d\0\u2dd2\0\u2e27\0\u2e7c\0\u13ec"+
    "\0\u2ed1\0\u2f26\0\u2f7b\0\u2fd0\0\u3025\0\u307a\0\u30cf\0\u3124"+
    "\0\u3179\0\u31ce\0\u3223\0\u3278\0\u32cd\0\u3322\0\u3377\0\u33cc"+
    "\0\u02fd\0\u3421\0\u3476\0\u34cb\0\u3520\0\u3575\0\u35ca\0\u361f"+
    "\0\u3674\0\u36c9\0\u02fd\0\u371e\0\u3773\0\u02fd\0\u37c8\0\u381d"+
    "\0\u3872\0\u38c7\0\u391c\0\u3971\0\u39c6\0\u3a1b\0\u3a70\0\u02fd"+
    "\0\u3ac5\0\u3b1a\0\u3b6f\0\u3bc4\0\u094c\0\u3c19\0\u3c6e\0\u3cc3"+
    "\0\u3d18\0\u3d6d\0\u3dc2\0\u3e17\0\u3e6c\0\u3ec1\0\u3f16\0\u3f6b"+
    "\0\u3fc0\0\u4015\0\u406a\0\u40bf\0\u4114\0\u4169\0\u41be\0\u4213"+
    "\0\u4268\0\u42bd\0\u4312\0\u4367\0\u0cf3\0\u43bc\0\u0cf3\0\u4411"+
    "\0\u4466\0\u44bb\0\u4510\0\u4565\0\u45ba\0\u460f\0\u13ec\0\u4664"+
    "\0\u46b9\0\u470e\0\u13ec\0\u4763\0\u47b8\0\u480d\0\u4862\0\u48b7"+
    "\0\u490c\0\u4961\0\u49b6\0\u4a0b\0\u4a60\0\u4ab5\0\u4b0a\0\u4b5f"+
    "\0\u4bb4\0\u4c09\0\u4c5e\0\u4cb3\0\u4d08\0\u4d5d\0\u4db2\0\u4e07"+
    "\0\u4e5c\0\u4eb1\0\u02fd\0\u4f06\0\u4f5b\0\u4fb0\0\u02fd\0\u5005"+
    "\0\u505a\0\u50af\0\u5104\0\u5159\0\u51ae\0\u5203\0\u5258\0\u52ad"+
    "\0\u5302\0\u5357\0\u53ac\0\u02fd\0\u5401\0\u5456\0\u02fd\0\u02fd"+
    "\0\u54ab\0\u02fd\0\u5500\0\u02fd\0\u5555\0\u55aa\0\u55ff\0\u5654"+
    "\0\u56a9\0\u56fe\0\u0cf3\0\u5753\0\u0cf3\0\u57a8\0\u57fd\0\u5852"+
    "\0\u58a7\0\u0cf3\0\u58fc\0\u5951\0\u59a6\0\u0cf3\0\u0cf3\0\u59fb"+
    "\0\u0cf3\0\u5a50\0\u5aa5\0\u5afa\0\u5b4f\0\u5ba4\0\u5bf9\0\u5c4e"+
    "\0\u0cf3\0\u0cf3\0\u5ca3\0\u5cf8\0\u5d4d\0\u5da2\0\u13ec\0\u13ec"+
    "\0\u13ec\0\u5df7\0\u13ec\0\u5e4c\0\u5ea1\0\u5ef6\0\u5f4b\0\u5fa0"+
    "\0\u5ff5\0\u604a\0\u609f\0\u60f4\0\u6149\0\u619e\0\u13ec\0\u61f3"+
    "\0\u6248\0\u629d\0\u62f2\0\u6347\0\u13ec\0\u639c\0\u63f1\0\u6446"+
    "\0\u649b\0\u02fd\0\u64f0\0\u6545\0\u02fd\0\u659a\0\u65ef\0\u6644"+
    "\0\u6699\0\u66ee\0\u6743\0\u6798\0\u67ed\0\u02fd\0\u02fd\0\u6842"+
    "\0\u6897\0\u68ec\0\u6941\0\u02fd\0\u6996\0\u0aa0\0\u69eb\0\u6a40"+
    "\0\u6a95\0\u0cf3\0\u6aea\0\u6b3f\0\u6b94\0\u6be9\0\u0cf3\0\u6c3e"+
    "\0\u6c93\0\u6ce8\0\u6d3d\0\u6d92\0\u0cf3\0\u6de7\0\u0cf3\0\u0cf3"+
    "\0\u6e3c\0\u6e91\0\u6ee6\0\u6f3b\0\u6f90\0\u6fe5\0\u703a\0\u708f"+
    "\0\u70e4\0\u7139\0\u718e\0\u71e3\0\u7238\0\u728d\0\u72e2\0\u7337"+
    "\0\u13ec\0\u738c\0\u73e1\0\u13ec\0\u7436\0\u748b\0\u74e0\0\u7535"+
    "\0\u758a\0\u02fd\0\u75df\0\u02fd\0\u02fd\0\u7634\0\u02fd\0\u7689"+
    "\0\u76de\0\u02fd\0\u7733\0\u7788\0\u77dd\0\u7832\0\u7887\0\u02fd"+
    "\0\u78dc\0\u7931\0\u7986\0\u79db\0\u0aa0\0\u7a30\0\u0cf3\0\u7a85"+
    "\0\u0cf3\0\u7ada\0\u7b2f\0\u7b84\0\u0cf3\0\u0cf3\0\u0cf3\0\u7bd9"+
    "\0\u0cf3\0\u0cf3\0\u7c2e\0\u7c83\0\u7cd8\0\u13ec\0\u13ec\0\u7d2d"+
    "\0\u7d82\0\u7dd7\0\u7e2c\0\u7e81\0\u13ec\0\u7ed6\0\u7f2b\0\u7f80"+
    "\0\u7fd5\0\u802a\0\u807f\0\u13ec\0\u4e07\0\u80d4\0\u8129\0\u02fd"+
    "\0\u817e\0\u81d3\0\u8228\0\u02fd\0\u827d\0\u82d2\0\u8327\0\u02fd"+
    "\0\u837c\0\u02fd\0\u0aa0\0\u0aa0\0\u83d1\0\u0cf3\0\u8426\0\u0cf3"+
    "\0\u847b\0\u02fd\0\u84d0\0\u8525\0\u857a\0\u85cf\0\u8624\0\u13ec"+
    "\0\u8679\0\u13ec\0\u86ce\0\u13ec\0\u13ec\0\u8723\0\u13ec\0\u8778"+
    "\0\u02fd\0\u02fd\0\u02fd\0\u87cd\0\u8822\0\u8877\0\u88cc\0\u8921"+
    "\0\u0cf3\0\u8976\0\u89cb\0\u8a20\0\u8a75\0\u8aca\0\u8b1f\0\u8b74"+
    "\0\u8bc9\0\u8c1e\0\u8c73\0\u8cc8\0\u8d1d\0\u8d72\0\u02fd\0\u8dc7"+
    "\0\u8e1c\0\u8e71\0\u8ec6\0\u8f1b\0\u8f70\0\u8fc5\0\u13ec\0\u901a"+
    "\0\u906f\0\u02fd\0\u02fd\0\u90c4\0\u02fd\0\u094c\0\u13ec\0\u9119"+
    "\0\u916e\0\u13ec\0\u91c3\0\u9218\0\u02fd\0\u02fd\0\u926d\0\u92c2"+
    "\0\u9317\0\u936c\0\u93c1\0\u13ec\0\u9416\0\u946b\0\u94c0\0\u13ec"+
    "\0\u9515\0\u956a\0\u13ec\0\u95bf\0\u9614\0\u9669\0\u13ec";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[575];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\3\7\1\10\22\6\1\11\75\6\1\12\3\13"+
    "\1\14\14\12\1\15\5\12\1\16\1\12\1\17\3\12"+
    "\1\20\25\12\1\21\4\12\1\20\35\12\3\13\1\14"+
    "\1\22\21\12\1\16\1\23\33\12\1\24\1\12\1\25"+
    "\1\26\1\27\2\12\1\30\1\12\1\31\1\32\4\12"+
    "\1\33\1\34\2\12\1\35\1\36\1\37\2\12\1\40"+
    "\11\12\3\13\1\14\1\41\1\42\1\43\7\12\1\44"+
    "\1\45\1\12\1\46\2\47\2\12\1\16\3\12\1\50"+
    "\1\51\1\52\3\51\1\53\15\51\1\54\3\51\2\12"+
    "\1\43\1\55\1\56\1\57\2\60\1\61\1\62\1\63"+
    "\1\60\1\64\1\60\1\65\1\66\1\67\1\70\1\71"+
    "\1\60\1\72\1\73\1\74\4\60\1\75\1\60\4\12"+
    "\1\45\4\12\1\76\4\12\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\12\1\15\3\12\1\106\1\107"+
    "\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117"+
    "\1\120\2\115\1\121\1\122\2\115\1\123\1\115\1\124"+
    "\1\125\1\126\1\127\1\115\1\130\2\115\1\131\2\115"+
    "\3\12\1\115\1\132\1\133\1\134\1\115\1\135\1\136"+
    "\1\115\1\137\11\115\1\140\1\141\6\115\1\142\1\143"+
    "\1\144\2\12\27\6\1\0\76\6\3\7\23\6\1\0"+
    "\101\6\1\145\22\6\1\0\75\6\4\0\1\146\246\0"+
    "\3\13\125\0\1\147\137\0\1\150\45\0\1\151\140\0"+
    "\1\152\111\0\1\153\137\0\1\154\2\0\1\155\124\0"+
    "\1\156\112\0\1\157\14\0\1\160\106\0\1\161\121\0"+
    "\1\162\141\0\1\163\125\0\1\164\127\0\1\165\107\0"+
    "\1\166\23\0\1\167\104\0\1\170\50\0\3\171\6\0"+
    "\6\171\25\0\6\171\40\0\1\43\7\0\1\43\2\0"+
    "\3\43\6\0\30\43\2\0\33\43\3\0\2\43\7\0"+
    "\1\43\7\0\1\44\1\172\1\0\3\44\6\0\30\43"+
    "\2\0\1\43\32\44\3\0\1\43\1\44\17\0\1\173"+
    "\1\172\1\0\3\173\41\0\32\173\4\0\1\173\10\0"+
    "\1\174\6\0\1\173\1\172\1\0\3\173\41\0\17\173"+
    "\1\175\12\173\4\0\1\173\10\0\1\174\6\0\1\173"+
    "\1\172\1\0\3\47\41\0\17\173\1\175\12\173\4\0"+
    "\1\173\22\0\3\51\6\0\30\51\2\0\22\51\1\176"+
    "\10\51\3\0\2\51\22\0\3\51\6\0\30\51\2\0"+
    "\33\51\3\0\2\51\22\0\3\51\6\0\30\51\2\0"+
    "\17\51\1\177\13\51\3\0\2\51\22\0\3\51\6\0"+
    "\30\51\2\0\5\51\1\200\25\51\3\0\2\51\22\0"+
    "\3\51\6\0\30\51\2\0\5\51\1\201\25\51\3\0"+
    "\2\51\17\0\1\173\1\172\1\0\3\60\6\0\30\51"+
    "\2\0\1\51\20\60\1\202\11\60\3\0\1\51\1\60"+
    "\17\0\1\173\1\172\1\0\3\60\6\0\30\51\2\0"+
    "\1\51\13\60\1\203\16\60\3\0\1\51\1\60\17\0"+
    "\1\173\1\172\1\0\3\60\6\0\30\51\2\0\1\51"+
    "\4\60\1\204\2\60\1\205\6\60\1\206\13\60\3\0"+
    "\1\51\1\60\17\0\1\173\1\172\1\0\3\60\6\0"+
    "\30\51\2\0\1\51\32\60\3\0\1\51\1\60\17\0"+
    "\1\173\1\172\1\0\3\60\6\0\30\51\2\0\1\51"+
    "\24\60\1\207\5\60\3\0\1\51\1\60\17\0\1\173"+
    "\1\172\1\0\3\60\6\0\30\51\2\0\1\51\21\60"+
    "\1\210\10\60\3\0\1\51\1\60\17\0\1\173\1\172"+
    "\1\0\3\60\6\0\30\51\2\0\1\51\23\60\1\211"+
    "\6\60\3\0\1\51\1\60\17\0\1\173\1\172\1\0"+
    "\3\60\6\0\30\51\2\0\1\51\24\60\1\212\5\60"+
    "\3\0\1\51\1\60\17\0\1\173\1\172\1\0\3\60"+
    "\6\0\30\51\2\0\1\51\4\60\1\213\3\60\1\214"+
    "\21\60\3\0\1\51\1\60\17\0\1\173\1\172\1\0"+
    "\3\60\6\0\30\51\2\0\1\51\1\215\31\60\3\0"+
    "\1\51\1\60\17\0\1\173\1\172\1\0\3\60\6\0"+
    "\30\51\2\0\1\51\1\216\23\60\1\217\5\60\3\0"+
    "\1\51\1\60\17\0\1\173\1\172\1\0\3\60\6\0"+
    "\30\51\2\0\1\51\13\60\1\220\16\60\3\0\1\51"+
    "\1\60\17\0\1\173\1\172\1\0\3\60\6\0\30\51"+
    "\2\0\1\51\24\60\1\221\5\60\3\0\1\51\1\60"+
    "\17\0\1\173\1\172\1\0\3\60\6\0\30\51\2\0"+
    "\1\51\1\222\3\60\1\223\3\60\1\224\5\60\1\225"+
    "\13\60\3\0\1\51\1\60\17\0\1\173\1\172\1\0"+
    "\3\60\6\0\30\51\2\0\1\51\1\226\7\60\1\227"+
    "\21\60\3\0\1\51\1\60\17\0\1\173\1\172\1\0"+
    "\3\60\6\0\30\51\2\0\1\51\4\60\1\230\25\60"+
    "\3\0\1\51\1\60\17\0\1\173\1\172\1\0\3\60"+
    "\6\0\30\51\2\0\1\51\4\60\1\231\25\60\3\0"+
    "\1\51\1\60\30\0\1\232\105\0\1\233\143\0\1\234"+
    "\124\0\1\235\124\0\1\236\170\0\1\237\52\0\3\115"+
    "\6\0\13\115\1\240\5\115\1\241\6\115\2\0\33\115"+
    "\3\0\2\115\22\0\3\115\6\0\30\115\2\0\33\115"+
    "\3\0\2\115\22\0\3\115\6\0\1\242\27\115\2\0"+
    "\33\115\3\0\2\115\22\0\3\115\6\0\4\115\1\243"+
    "\23\115\2\0\33\115\3\0\2\115\22\0\3\115\6\0"+
    "\13\115\1\244\1\115\1\245\10\115\1\246\1\115\2\0"+
    "\33\115\3\0\2\115\22\0\3\115\6\0\23\115\1\247"+
    "\4\115\2\0\33\115\3\0\2\115\22\0\3\115\6\0"+
    "\5\115\1\250\7\115\1\251\12\115\2\0\33\115\3\0"+
    "\2\115\22\0\3\115\6\0\4\115\1\252\23\115\2\0"+
    "\33\115\3\0\2\115\22\0\3\115\6\0\23\115\1\253"+
    "\4\115\2\0\33\115\3\0\2\115\22\0\3\115\6\0"+
    "\15\115\1\254\12\115\2\0\33\115\3\0\2\115\22\0"+
    "\3\115\6\0\20\115\1\255\7\115\2\0\33\115\3\0"+
    "\2\115\22\0\3\115\6\0\4\115\1\256\23\115\2\0"+
    "\33\115\3\0\2\115\22\0\3\115\6\0\7\115\1\257"+
    "\20\115\2\0\33\115\3\0\2\115\22\0\3\115\6\0"+
    "\7\115\1\260\20\115\2\0\33\115\3\0\2\115\22\0"+
    "\3\115\6\0\30\115\2\0\17\115\1\261\13\115\3\0"+
    "\2\115\22\0\3\115\6\0\30\115\2\0\10\115\1\262"+
    "\22\115\3\0\2\115\22\0\3\115\6\0\30\115\2\0"+
    "\5\115\1\263\25\115\3\0\2\115\22\0\3\115\6\0"+
    "\30\115\2\0\1\115\1\264\31\115\3\0\2\115\22\0"+
    "\3\115\6\0\30\115\2\0\5\115\1\265\25\115\3\0"+
    "\2\115\22\0\3\115\6\0\30\115\2\0\16\115\1\266"+
    "\14\115\3\0\2\115\22\0\3\115\6\0\30\115\2\0"+
    "\24\115\1\267\6\115\3\0\2\115\22\0\3\115\6\0"+
    "\30\115\2\0\22\115\1\270\10\115\3\0\2\115\121\0"+
    "\1\271\3\0\2\145\1\6\24\145\1\147\75\145\17\0"+
    "\1\272\105\0\2\147\1\0\122\147\54\0\1\273\33\0"+
    "\1\273\50\0\1\274\1\0\1\275\2\0\1\276\1\277"+
    "\1\300\2\0\1\301\2\0\1\302\1\303\1\0\1\304"+
    "\1\305\11\0\1\274\1\0\1\275\2\0\1\276\1\277"+
    "\1\300\2\0\1\301\2\0\1\302\1\303\2\0\1\304"+
    "\1\305\124\0\1\306\103\0\1\307\122\0\1\310\137\0"+
    "\1\311\126\0\1\312\117\0\1\313\120\0\1\314\134\0"+
    "\1\315\112\0\1\316\150\0\1\317\100\0\1\320\151\0"+
    "\1\321\114\0\1\322\110\0\1\323\55\0\3\324\6\0"+
    "\6\324\25\0\6\324\34\0\1\172\13\0\6\172\6\0"+
    "\30\172\2\0\33\172\3\0\2\172\17\0\1\173\1\172"+
    "\1\0\3\173\41\0\27\173\1\325\2\173\4\0\1\173"+
    "\22\0\3\51\6\0\30\51\2\0\11\51\1\326\21\51"+
    "\3\0\2\51\22\0\3\51\6\0\30\51\2\0\25\51"+
    "\1\327\5\51\3\0\2\51\22\0\3\51\6\0\30\51"+
    "\2\0\16\51\1\330\14\51\3\0\2\51\22\0\3\51"+
    "\6\0\30\51\2\0\22\51\1\331\10\51\3\0\2\51"+
    "\17\0\1\173\1\172\1\0\3\60\6\0\30\51\2\0"+
    "\1\51\24\60\1\332\5\60\3\0\1\51\1\60\17\0"+
    "\1\173\1\172\1\0\3\60\6\0\30\51\2\0\1\51"+
    "\1\333\23\60\1\334\5\60\3\0\1\51\1\60\17\0"+
    "\1\173\1\172\1\0\3\60\6\0\30\51\2\0\1\51"+
    "\15\60\1\335\14\60\3\0\1\51\1\60\17\0\1\173"+
    "\1\172\1\0\3\60\6\0\30\51\2\0\1\51\4\60"+
    "\1\336\25\60\3\0\1\51\1\60\17\0\1\173\1\172"+
    "\1\0\3\60\6\0\30\51\2\0\1\51\13\60\1\337"+
    "\16\60\3\0\1\51\1\60\17\0\1\173\1\172\1\0"+
    "\3\60\6\0\30\51\2\0\1\51\2\60\1\340\27\60"+
    "\3\0\1\51\1\60\17\0\1\173\1\172\1\0\3\60"+
    "\6\0\30\51\2\0\1\51\1\341\3\60\1\342\25\60"+
    "\3\0\1\51\1\60\17\0\1\173\1\172\1\0\3\60"+
    "\6\0\30\51\2\0\1\51\23\60\1\343\6\60\3\0"+
    "\1\51\1\60\17\0\1\173\1\172\1\0\3\60\6\0"+
    "\30\51\2\0\1\51\22\60\1\344\7\60\3\0\1\51"+
    "\1\60\17\0\1\173\1\172\1\0\3\60\6\0\30\51"+
    "\2\0\1\51\5\60\1\345\24\60\3\0\1\51\1\60"+
    "\17\0\1\173\1\172\1\0\3\60\6\0\30\51\2\0"+
    "\1\51\14\60\1\346\15\60\3\0\1\51\1\60\17\0"+
    "\1\173\1\172\1\0\3\60\6\0\30\51\2\0\1\51"+
    "\21\60\1\347\10\60\3\0\1\51\1\60\17\0\1\173"+
    "\1\172\1\0\3\60\6\0\30\51\2\0\1\51\25\60"+
    "\1\350\4\60\3\0\1\51\1\60\17\0\1\173\1\172"+
    "\1\0\3\60\6\0\30\51\2\0\1\51\14\60\1\351"+
    "\15\60\3\0\1\51\1\60\17\0\1\173\1\172\1\0"+
    "\3\60\6\0\30\51\2\0\1\51\10\60\1\352\21\60"+
    "\3\0\1\51\1\60\17\0\1\173\1\172\1\0\3\60"+
    "\6\0\30\51\2\0\1\51\21\60\1\353\10\60\3\0"+
    "\1\51\1\60\17\0\1\173\1\172\1\0\3\60\6\0"+
    "\30\51\2\0\1\51\3\60\1\354\26\60\3\0\1\51"+
    "\1\60\17\0\1\173\1\172\1\0\3\60\6\0\30\51"+
    "\2\0\1\51\3\60\1\355\26\60\3\0\1\51\1\60"+
    "\17\0\1\173\1\172\1\0\3\60\6\0\30\51\2\0"+
    "\1\51\6\60\1\356\23\60\3\0\1\51\1\60\17\0"+
    "\1\173\1\172\1\0\3\60\6\0\30\51\2\0\1\51"+
    "\26\60\1\357\3\60\3\0\1\51\1\60\17\0\1\173"+
    "\1\172\1\0\3\60\6\0\30\51\2\0\1\51\15\60"+
    "\1\360\14\60\3\0\1\51\1\60\17\0\1\173\1\172"+
    "\1\0\3\60\6\0\30\51\2\0\1\51\13\60\1\361"+
    "\16\60\3\0\1\51\1\60\17\0\1\173\1\172\1\0"+
    "\3\60\6\0\30\51\2\0\1\51\1\362\26\60\1\363"+
    "\2\60\3\0\1\51\1\60\17\0\1\173\1\172\1\0"+
    "\3\60\6\0\30\51\2\0\1\51\13\60\1\364\16\60"+
    "\3\0\1\51\1\60\101\0\1\365\45\0\3\115\6\0"+
    "\4\115\1\366\23\115\2\0\33\115\3\0\2\115\22\0"+
    "\3\115\6\0\2\115\1\367\25\115\2\0\33\115\3\0"+
    "\2\115\22\0\3\115\6\0\20\115\1\370\7\115\2\0"+
    "\33\115\3\0\2\115\22\0\3\115\6\0\21\115\1\371"+
    "\6\115\2\0\33\115\3\0\2\115\22\0\3\115\6\0"+
    "\21\115\1\372\6\115\2\0\33\115\3\0\2\115\22\0"+
    "\3\115\6\0\3\115\1\373\24\115\2\0\33\115\3\0"+
    "\2\115\22\0\3\115\6\0\10\115\1\374\17\115\2\0"+
    "\33\115\3\0\2\115\22\0\3\115\6\0\15\115\1\375"+
    "\12\115\2\0\33\115\3\0\2\115\22\0\3\115\6\0"+
    "\10\115\1\376\10\115\1\377\6\115\2\0\33\115\3\0"+
    "\2\115\22\0\3\115\6\0\22\115\1\u0100\5\115\2\0"+
    "\33\115\3\0\2\115\22\0\3\115\6\0\14\115\1\u0101"+
    "\13\115\2\0\33\115\3\0\2\115\22\0\3\115\6\0"+
    "\30\115\2\0\1\u0102\32\115\3\0\2\115\22\0\3\115"+
    "\6\0\16\115\1\u0103\11\115\2\0\33\115\3\0\2\115"+
    "\22\0\3\115\6\0\17\115\1\u0104\4\115\1\u0105\3\115"+
    "\2\0\33\115\3\0\2\115\22\0\3\115\6\0\4\115"+
    "\1\u0106\23\115\2\0\33\115\3\0\2\115\22\0\3\115"+
    "\6\0\10\115\1\u0107\17\115\2\0\33\115\3\0\2\115"+
    "\22\0\3\115\6\0\30\115\2\0\17\115\1\u0108\13\115"+
    "\3\0\2\115\22\0\3\115\6\0\30\115\2\0\1\115"+
    "\1\u0109\31\115\3\0\2\115\22\0\3\115\6\0\30\115"+
    "\2\0\3\115\1\u010a\27\115\3\0\2\115\22\0\3\115"+
    "\6\0\30\115\2\0\14\115\1\u010b\16\115\3\0\2\115"+
    "\22\0\3\115\6\0\30\115\2\0\24\115\1\u010c\6\115"+
    "\3\0\2\115\22\0\3\115\6\0\30\115\2\0\24\115"+
    "\1\u010d\6\115\3\0\2\115\22\0\3\115\6\0\30\115"+
    "\2\0\22\115\1\u010e\10\115\3\0\2\115\22\0\3\115"+
    "\6\0\30\115\2\0\25\115\1\u010f\5\115\3\0\2\115"+
    "\17\0\1\u0110\142\0\1\u0111\32\0\1\u0111\105\0\1\u0112"+
    "\1\0\1\u0113\2\0\1\u0114\25\0\1\u0112\2\0\1\u0113"+
    "\2\0\1\u0114\55\0\1\u0115\32\0\1\u0115\63\0\1\u0116"+
    "\32\0\1\u0116\57\0\1\u0117\13\0\1\u0118\32\0\1\u0118"+
    "\101\0\1\u0119\1\u011a\31\0\1\u0119\1\u011a\64\0\1\u011b"+
    "\32\0\1\u011b\100\0\1\u011c\32\0\1\u011c\56\0\1\u011d"+
    "\12\0\1\u011e\17\0\1\u011d\12\0\1\u011e\56\0\1\u011f"+
    "\3\0\1\u0120\26\0\1\u011f\3\0\1\u0120\126\0\1\u0121"+
    "\134\0\1\u0122\120\0\1\u0123\3\0\1\u0124\125\0\1\u0125"+
    "\107\0\1\u0126\123\0\1\u0127\123\0\1\u0128\133\0\1\u0129"+
    "\133\0\1\u012a\125\0\1\u012b\105\0\1\u012c\143\0\1\u012d"+
    "\35\0\3\u012e\6\0\6\u012e\25\0\6\u012e\53\0\3\51"+
    "\6\0\30\51\2\0\1\51\1\u012f\31\51\3\0\2\51"+
    "\22\0\3\51\6\0\30\51\2\0\22\51\1\u0130\10\51"+
    "\3\0\2\51\22\0\3\51\6\0\30\51\2\0\5\51"+
    "\1\u0131\25\51\3\0\2\51\22\0\3\51\6\0\30\51"+
    "\2\0\4\51\1\u0132\26\51\3\0\2\51\17\0\1\173"+
    "\1\172\1\0\3\60\6\0\30\51\2\0\1\51\1\u0133"+
    "\31\60\3\0\1\51\1\60\17\0\1\173\1\172\1\0"+
    "\3\60\6\0\30\51\2\0\1\51\2\60\1\u0134\27\60"+
    "\3\0\1\51\1\60\17\0\1\173\1\172\1\0\3\60"+
    "\6\0\30\51\2\0\1\51\4\60\1\u0135\25\60\3\0"+
    "\1\51\1\60\17\0\1\173\1\172\1\0\3\60\6\0"+
    "\30\51\2\0\1\51\23\60\1\u0136\6\60\3\0\1\51"+
    "\1\60\17\0\1\173\1\172\1\0\3\60\6\0\30\51"+
    "\2\0\1\51\2\60\1\u0137\27\60\3\0\1\51\1\60"+
    "\17\0\1\173\1\172\1\0\3\60\6\0\30\51\2\0"+
    "\1\51\24\60\1\u0138\5\60\3\0\1\51\1\60\17\0"+
    "\1\173\1\172\1\0\3\60\6\0\30\51\2\0\1\51"+
    "\7\60\1\u0139\22\60\3\0\1\51\1\60\17\0\1\173"+
    "\1\172\1\0\3\60\6\0\30\51\2\0\1\51\30\60"+
    "\1\u013a\1\60\3\0\1\51\1\60\17\0\1\173\1\172"+
    "\1\0\3\60\6\0\30\51\2\0\1\51\4\60\1\u013b"+
    "\25\60\3\0\1\51\1\60\17\0\1\173\1\172\1\0"+
    "\3\60\6\0\30\51\2\0\1\51\17\60\1\u013c\12\60"+
    "\3\0\1\51\1\60\17\0\1\173\1\172\1\0\3\60"+
    "\6\0\30\51\2\0\1\51\23\60\1\u013d\6\60\3\0"+
    "\1\51\1\60\17\0\1\173\1\172\1\0\3\60\6\0"+
    "\30\51\2\0\1\51\23\60\1\u013e\6\60\3\0\1\51"+
    "\1\60\17\0\1\173\1\172\1\0\3\60\6\0\30\51"+
    "\2\0\1\51\4\60\1\u013f\25\60\3\0\1\51\1\60"+
    "\17\0\1\173\1\172\1\0\3\60\6\0\30\51\2\0"+
    "\1\51\21\60\1\u0140\10\60\3\0\1\51\1\60\17\0"+
    "\1\173\1\172\1\0\3\60\6\0\30\51\2\0\1\51"+
    "\30\60\1\u0141\1\60\3\0\1\51\1\60\17\0\1\173"+
    "\1\172\1\0\3\60\6\0\30\51\2\0\1\51\1\60"+
    "\1\u0142\30\60\3\0\1\51\1\60\17\0\1\173\1\172"+
    "\1\0\3\60\6\0\30\51\2\0\1\51\25\60\1\u0143"+
    "\4\60\3\0\1\51\1\60\17\0\1\173\1\172\1\0"+
    "\3\60\6\0\30\51\2\0\1\51\17\60\1\u0144\12\60"+
    "\3\0\1\51\1\60\17\0\1\173\1\172\1\0\3\60"+
    "\6\0\30\51\2\0\1\51\10\60\1\u0145\21\60\3\0"+
    "\1\51\1\60\17\0\1\173\1\172\1\0\3\60\6\0"+
    "\30\51\2\0\1\51\7\60\1\u0146\22\60\3\0\1\51"+
    "\1\60\17\0\1\173\1\172\1\0\3\60\6\0\30\51"+
    "\2\0\1\51\22\60\1\u0147\7\60\3\0\1\51\1\60"+
    "\17\0\1\173\1\172\1\0\3\60\6\0\30\51\2\0"+
    "\1\51\25\60\1\u0148\4\60\3\0\1\51\1\60\17\0"+
    "\1\173\1\172\1\0\3\60\6\0\30\51\2\0\1\51"+
    "\13\60\1\u0149\16\60\3\0\1\51\1\60\17\0\1\173"+
    "\1\172\1\0\3\60\6\0\30\51\2\0\1\51\23\60"+
    "\1\u014a\6\60\3\0\1\51\1\60\17\0\1\173\1\172"+
    "\1\0\3\60\6\0\30\51\2\0\1\51\13\60\1\u014b"+
    "\16\60\3\0\1\51\1\60\104\0\1\u014c\42\0\3\115"+
    "\6\0\20\115\1\u014d\7\115\2\0\33\115\3\0\2\115"+
    "\22\0\3\115\6\0\1\u014e\27\115\2\0\33\115\3\0"+
    "\2\115\22\0\3\115\6\0\2\115\1\u014f\25\115\2\0"+
    "\33\115\3\0\2\115\22\0\3\115\6\0\4\115\1\u0150"+
    "\23\115\2\0\33\115\3\0\2\115\22\0\3\115\6\0"+
    "\22\115\1\u0151\5\115\2\0\33\115\3\0\2\115\22\0"+
    "\3\115\6\0\22\115\1\u0152\5\115\2\0\33\115\3\0"+
    "\2\115\22\0\3\115\6\0\22\115\1\u0153\5\115\2\0"+
    "\33\115\3\0\2\115\22\0\3\115\6\0\4\115\1\u0154"+
    "\23\115\2\0\33\115\3\0\2\115\22\0\3\115\6\0"+
    "\10\115\1\u0155\6\115\1\u0156\10\115\2\0\33\115\3\0"+
    "\2\115\22\0\3\115\6\0\30\115\2\0\1\u0157\32\115"+
    "\3\0\2\115\22\0\3\115\6\0\13\115\1\u0158\14\115"+
    "\2\0\33\115\3\0\2\115\22\0\3\115\6\0\2\115"+
    "\1\u0159\25\115\2\0\33\115\3\0\2\115\22\0\3\115"+
    "\6\0\4\115\1\u015a\23\115\2\0\33\115\3\0\2\115"+
    "\22\0\3\115\6\0\4\115\1\u015b\23\115\2\0\33\115"+
    "\3\0\2\115\22\0\3\115\6\0\15\115\1\u015c\12\115"+
    "\2\0\33\115\3\0\2\115\22\0\3\115\6\0\13\115"+
    "\1\u015d\14\115\2\0\33\115\3\0\2\115\22\0\3\115"+
    "\6\0\30\115\2\0\14\115\1\u015e\16\115\3\0\2\115"+
    "\22\0\3\115\6\0\30\115\2\0\22\115\1\u015f\10\115"+
    "\3\0\2\115\22\0\3\115\6\0\30\115\2\0\11\115"+
    "\1\u0160\21\115\3\0\2\115\22\0\3\115\6\0\30\115"+
    "\2\0\23\115\1\u0161\7\115\3\0\2\115\22\0\3\115"+
    "\6\0\4\115\1\u0162\23\115\2\0\33\115\3\0\2\115"+
    "\22\0\3\115\6\0\30\115\2\0\5\115\1\u0163\25\115"+
    "\3\0\2\115\22\0\3\115\6\0\30\115\2\0\11\115"+
    "\1\u0164\21\115\3\0\2\115\22\0\3\115\6\0\30\115"+
    "\2\0\5\115\1\u0165\25\115\3\0\2\115\17\u0110\1\u0166"+
    "\17\u0110\2\0\10\u0110\1\0\53\u0110\53\0\1\u0167\33\0"+
    "\1\u0167\53\0\1\u0168\32\0\1\u0168\110\0\1\u0169\33\0"+
    "\1\u0169\72\0\1\u016a\33\0\1\u016a\54\0\1\u016b\32\0"+
    "\1\u016b\61\0\1\u016c\32\0\1\u016c\77\0\1\u016d\32\0"+
    "\1\u016d\102\0\1\u016e\32\0\1\u016e\67\0\1\u016f\32\0"+
    "\1\u016f\76\0\1\u0170\33\0\1\u0170\61\0\1\u0171\32\0"+
    "\1\u0171\56\0\1\u0172\32\0\1\u0172\117\0\1\u0173\33\0"+
    "\1\u0173\64\0\1\u0174\33\0\1\u0174\107\0\1\u0175\140\0"+
    "\1\u0176\123\0\1\u0177\34\0\1\u0178\202\0\1\u0179\125\0"+
    "\1\u017a\45\0\1\u017b\202\0\1\u017c\51\0\3\u017d\6\0"+
    "\6\u017d\25\0\6\u017d\53\0\3\51\6\0\30\51\2\0"+
    "\14\51\1\u017e\16\51\3\0\2\51\22\0\3\51\6\0"+
    "\30\51\2\0\11\51\1\u017f\21\51\3\0\2\51\22\0"+
    "\3\51\6\0\30\51\2\0\26\51\1\u0180\4\51\3\0"+
    "\2\51\22\0\3\51\6\0\30\51\2\0\1\51\1\u0181"+
    "\31\51\3\0\2\51\17\0\1\173\1\172\1\0\3\60"+
    "\6\0\30\51\2\0\1\51\12\60\1\u0182\17\60\3\0"+
    "\1\51\1\60\17\0\1\173\1\172\1\0\3\60\6\0"+
    "\30\51\2\0\1\51\4\60\1\u0183\25\60\3\0\1\51"+
    "\1\60\17\0\1\173\1\172\1\0\3\60\6\0\30\51"+
    "\2\0\1\51\12\60\1\u0184\17\60\3\0\1\51\1\60"+
    "\17\0\1\173\1\172\1\0\3\60\6\0\30\51\2\0"+
    "\1\51\14\60\1\u0185\15\60\3\0\1\51\1\60\17\0"+
    "\1\173\1\172\1\0\3\60\6\0\30\51\2\0\1\51"+
    "\22\60\1\u0186\7\60\3\0\1\51\1\60\17\0\1\173"+
    "\1\172\1\0\3\60\6\0\30\51\2\0\1\51\15\60"+
    "\1\u0187\14\60\3\0\1\51\1\60\17\0\1\173\1\172"+
    "\1\0\3\60\1\u0188\5\0\30\51\2\0\1\51\22\60"+
    "\1\u0189\7\60\3\0\1\51\1\60\17\0\1\173\1\172"+
    "\1\0\3\60\6\0\30\51\2\0\1\51\10\60\1\u018a"+
    "\21\60\3\0\1\51\1\60\17\0\1\173\1\172\1\0"+
    "\3\60\6\0\30\51\2\0\1\51\16\60\1\u018b\13\60"+
    "\3\0\1\51\1\60\17\0\1\173\1\172\1\0\3\60"+
    "\6\0\30\51\2\0\1\51\4\60\1\u018c\25\60\3\0"+
    "\1\51\1\60\17\0\1\173\1\172\1\0\3\60\6\0"+
    "\30\51\2\0\1\51\4\60\1\u018d\25\60\3\0\1\51"+
    "\1\60\17\0\1\173\1\172\1\0\3\60\6\0\30\51"+
    "\2\0\1\51\13\60\1\u018e\16\60\3\0\1\51\1\60"+
    "\17\0\1\173\1\172\1\0\3\60\6\0\30\51\2\0"+
    "\1\51\16\60\1\u018f\13\60\3\0\1\51\1\60\17\0"+
    "\1\173\1\172\1\0\3\60\6\0\30\51\2\0\1\51"+
    "\23\60\1\u0190\6\60\3\0\1\51\1\60\17\0\1\u0191"+
    "\1\172\1\0\3\60\6\0\30\51\2\0\1\51\32\60"+
    "\3\0\1\51\1\60\17\0\1\173\1\172\1\0\3\60"+
    "\6\0\30\51\2\0\1\51\4\60\1\u0192\25\60\3\0"+
    "\1\51\1\60\17\0\1\173\1\172\1\0\3\60\6\0"+
    "\30\51\2\0\1\51\16\60\1\u0193\13\60\3\0\1\51"+
    "\1\60\67\0\1\u0194\57\0\3\115\6\0\22\115\1\u0195"+
    "\5\115\2\0\33\115\3\0\2\115\22\0\3\115\6\0"+
    "\2\115\1\u0196\25\115\2\0\33\115\3\0\2\115\22\0"+
    "\3\115\6\0\10\115\1\u0197\17\115\2\0\33\115\3\0"+
    "\2\115\22\0\3\115\6\0\20\115\1\u0198\7\115\2\0"+
    "\33\115\3\0\2\115\22\0\3\115\6\0\14\115\1\u0199"+
    "\13\115\2\0\33\115\3\0\2\115\22\0\3\115\6\0"+
    "\1\u019a\27\115\2\0\33\115\3\0\2\115\22\0\3\115"+
    "\6\0\1\u019b\27\115\2\0\33\115\3\0\2\115\22\0"+
    "\3\115\6\0\16\115\1\u019c\11\115\2\0\33\115\3\0"+
    "\2\115\22\0\3\115\6\0\4\115\1\u019d\23\115\2\0"+
    "\33\115\3\0\2\115\22\0\3\115\6\0\1\u019e\27\115"+
    "\2\0\33\115\3\0\2\115\22\0\3\115\6\0\20\115"+
    "\1\u019f\7\115\2\0\33\115\3\0\2\115\22\0\3\115"+
    "\6\0\25\115\1\u01a0\2\115\2\0\33\115\3\0\2\115"+
    "\22\0\3\115\6\0\4\115\1\u01a1\23\115\2\0\33\115"+
    "\3\0\2\115\22\0\3\115\6\0\30\115\2\0\5\115"+
    "\1\u01a2\25\115\3\0\2\115\22\0\3\115\6\0\30\115"+
    "\2\0\15\115\1\u01a3\15\115\3\0\2\115\22\0\3\115"+
    "\6\0\30\115\2\0\5\115\1\u01a4\25\115\3\0\2\115"+
    "\22\0\3\115\6\0\30\115\2\0\14\115\1\u01a5\16\115"+
    "\3\0\2\115\22\0\3\115\6\0\30\115\2\0\7\115"+
    "\1\u01a6\23\115\3\0\2\115\22\0\3\115\6\0\30\115"+
    "\2\0\16\115\1\u01a7\14\115\3\0\2\115\17\u0110\1\u01a8"+
    "\17\u0110\2\0\10\u0110\1\0\53\u0110\43\0\1\u01a9\32\0"+
    "\1\u01a9\110\0\1\u01aa\33\0\1\u01aa\63\0\1\u01ab\33\0"+
    "\1\u01ab\50\0\1\u01ac\32\0\1\u01ac\72\0\1\u01ad\32\0"+
    "\1\u01ad\111\0\1\u01ae\33\0\1\u01ae\57\0\1\u01af\32\0"+
    "\1\u01af\67\0\1\u01b0\32\0\1\u01b0\65\0\1\u01b1\32\0"+
    "\1\u01b1\101\0\1\u01b2\32\0\1\u01b2\77\0\1\u01b3\33\0"+
    "\1\u01b3\61\0\1\u01b4\32\0\1\u01b4\132\0\1\u01b5\110\0"+
    "\1\u01b6\14\0\1\u01b7\125\0\1\u01b8\103\0\1\u01b9\122\0"+
    "\1\u01ba\60\0\3\u01bb\6\0\6\u01bb\25\0\6\u01bb\53\0"+
    "\3\51\6\0\30\51\2\0\5\51\1\u01bc\25\51\3\0"+
    "\2\51\22\0\3\51\6\0\30\51\2\0\1\51\1\u01bd"+
    "\31\51\3\0\2\51\22\0\3\51\6\0\30\51\2\0"+
    "\16\51\1\u01be\14\51\3\0\2\51\17\0\1\173\1\172"+
    "\1\0\3\60\6\0\30\51\2\0\1\51\21\60\1\u01bf"+
    "\10\60\3\0\1\51\1\60\17\0\1\173\1\172\1\0"+
    "\3\60\6\0\30\51\2\0\1\51\1\60\1\u01c0\30\60"+
    "\3\0\1\51\1\60\17\0\1\173\1\172\1\0\3\60"+
    "\6\0\30\51\2\0\1\51\15\60\1\u01c1\14\60\3\0"+
    "\1\51\1\60\17\0\1\173\1\172\1\0\3\60\6\0"+
    "\30\51\2\0\1\51\10\60\1\u01c2\21\60\3\0\1\51"+
    "\1\60\21\0\1\u01c3\122\0\1\173\1\172\1\0\3\60"+
    "\1\u0188\5\0\30\51\2\0\1\51\32\60\3\0\1\51"+
    "\1\60\17\0\1\173\1\172\1\0\3\60\6\0\30\51"+
    "\2\0\1\51\5\60\1\u01c4\24\60\3\0\1\51\1\60"+
    "\17\0\1\173\1\172\1\0\3\60\6\0\30\51\2\0"+
    "\1\51\15\60\1\u01c5\14\60\3\0\1\51\1\60\17\0"+
    "\1\173\1\172\1\0\3\60\6\0\30\51\2\0\1\51"+
    "\21\60\1\u01c6\10\60\3\0\1\51\1\60\17\0\1\173"+
    "\1\172\1\0\3\60\6\0\30\51\2\0\1\51\4\60"+
    "\1\u01c7\25\60\3\0\1\51\1\60\17\0\1\173\1\172"+
    "\1\0\3\173\41\0\22\173\1\u01c8\7\173\4\0\1\173"+
    "\17\0\1\173\1\172\1\0\3\60\6\0\30\51\2\0"+
    "\1\51\21\60\1\u01c9\10\60\3\0\1\51\1\60\17\0"+
    "\1\173\1\172\1\0\3\60\6\0\30\51\2\0\1\51"+
    "\26\60\1\u01ca\3\60\3\0\1\51\1\60\66\0\1\u01cb"+
    "\60\0\3\115\6\0\30\115\2\0\1\u01cc\32\115\3\0"+
    "\2\115\22\0\3\115\6\0\22\115\1\u01cd\5\115\2\0"+
    "\33\115\3\0\2\115\22\0\3\115\6\0\13\115\1\u01ce"+
    "\14\115\2\0\33\115\3\0\2\115\22\0\3\115\6\0"+
    "\22\115\1\u01cf\5\115\2\0\33\115\3\0\2\115\22\0"+
    "\3\115\6\0\17\115\1\u01d0\10\115\2\0\33\115\3\0"+
    "\2\115\22\0\3\115\6\0\20\115\1\u01d1\7\115\2\0"+
    "\33\115\3\0\2\115\22\0\3\115\6\0\13\115\1\u01d2"+
    "\14\115\2\0\33\115\3\0\2\115\22\0\3\115\6\0"+
    "\1\u01d3\27\115\2\0\33\115\3\0\2\115\22\0\3\115"+
    "\6\0\21\115\1\u01d4\6\115\2\0\33\115\3\0\2\115"+
    "\22\0\3\115\6\0\22\115\1\u01d5\5\115\2\0\33\115"+
    "\3\0\2\115\22\0\3\115\6\0\21\115\1\u01d6\6\115"+
    "\2\0\33\115\3\0\2\115\22\0\3\115\6\0\7\115"+
    "\1\u01d7\20\115\2\0\33\115\3\0\2\115\22\0\3\115"+
    "\6\0\30\115\2\0\1\115\1\u01d8\31\115\3\0\2\115"+
    "\22\0\3\115\6\0\30\115\2\0\1\115\1\u01d9\31\115"+
    "\3\0\2\115\22\0\3\115\6\0\30\115\2\0\5\115"+
    "\1\u01da\25\115\3\0\2\115\22\0\3\115\6\0\30\115"+
    "\2\0\5\115\1\u01db\25\115\3\0\2\115\22\0\3\115"+
    "\6\0\30\115\2\0\7\115\1\u01dc\23\115\3\0\2\115"+
    "\17\u0110\1\u01a8\11\u0110\1\u01dd\5\u0110\2\0\10\u0110\1\0"+
    "\53\u0110\52\0\1\u01de\32\0\1\u01de\70\0\1\u01df\32\0"+
    "\1\u01df\75\0\1\u01e0\33\0\1\u01e0\64\0\1\u01e1\32\0"+
    "\1\u01e1\55\0\1\u01e2\32\0\1\u01e2\67\0\1\u01e3\32\0"+
    "\1\u01e3\75\0\1\u01e4\32\0\1\u01e4\136\0\1\u01e5\106\0"+
    "\1\u01e6\134\0\1\u01e7\126\0\1\u01e8\125\0\1\u01e9\45\0"+
    "\3\u01ea\6\0\6\u01ea\25\0\6\u01ea\53\0\3\51\6\0"+
    "\30\51\2\0\22\51\1\u01eb\10\51\3\0\2\51\22\0"+
    "\3\51\6\0\30\51\2\0\1\51\1\u01ec\31\51\3\0"+
    "\2\51\17\0\1\173\1\172\1\0\3\60\6\0\30\51"+
    "\2\0\1\51\16\60\1\u01ed\13\60\3\0\1\51\1\60"+
    "\17\0\1\173\1\172\1\0\3\60\6\0\30\51\2\0"+
    "\1\51\1\u01ee\31\60\3\0\1\51\1\60\21\0\1\u01ef"+
    "\122\0\1\173\1\172\1\0\3\60\6\0\30\51\2\0"+
    "\1\51\30\60\1\u01f0\1\60\3\0\1\51\1\60\17\0"+
    "\1\173\1\172\1\0\3\173\41\0\4\173\1\u01f1\25\173"+
    "\4\0\1\173\101\0\1\u01f2\45\0\3\115\6\0\10\115"+
    "\1\u01f3\17\115\2\0\33\115\3\0\2\115\22\0\3\115"+
    "\6\0\4\115\1\u01f4\23\115\2\0\33\115\3\0\2\115"+
    "\22\0\3\115\6\0\1\u01f5\27\115\2\0\33\115\3\0"+
    "\2\115\22\0\3\115\6\0\30\115\2\0\1\u01f6\32\115"+
    "\3\0\2\115\22\0\3\115\6\0\4\115\1\u01f7\23\115"+
    "\2\0\33\115\3\0\2\115\22\0\3\115\6\0\3\115"+
    "\1\u01f8\24\115\2\0\33\115\3\0\2\115\22\0\3\115"+
    "\6\0\21\115\1\u01f9\6\115\2\0\33\115\3\0\2\115"+
    "\22\0\3\115\6\0\4\115\1\u01fa\23\115\2\0\33\115"+
    "\3\0\2\115\22\0\3\115\6\0\10\115\1\u01fb\17\115"+
    "\2\0\33\115\3\0\2\115\22\0\3\115\6\0\30\115"+
    "\2\0\16\115\1\u01fc\14\115\3\0\2\115\22\0\3\115"+
    "\6\0\30\115\2\0\14\115\1\u01fd\16\115\3\0\2\115"+
    "\22\0\3\115\6\0\30\115\2\0\15\115\1\u01fe\15\115"+
    "\3\0\2\115\22\0\3\115\6\0\30\115\2\0\22\115"+
    "\1\u01ff\10\115\3\0\2\115\55\0\1\u0200\33\0\1\u0200"+
    "\63\0\1\u0201\32\0\1\u0201\71\0\1\u0202\32\0\1\u0202"+
    "\76\0\1\u0203\33\0\1\u0203\66\0\1\u0204\33\0\1\u0204"+
    "\127\0\1\u0205\114\0\1\u0206\141\0\1\u0207\103\0\1\u0208"+
    "\45\0\1\173\1\172\1\0\3\60\6\0\30\51\2\0"+
    "\1\51\27\60\1\u0209\2\60\3\0\1\51\1\60\17\0"+
    "\2\173\1\0\3\173\41\0\32\173\4\0\1\173\17\0"+
    "\1\173\1\172\1\0\3\173\41\0\21\173\1\u020a\10\173"+
    "\4\0\1\173\22\0\3\115\6\0\15\115\1\u020b\12\115"+
    "\2\0\33\115\3\0\2\115\22\0\3\115\6\0\20\115"+
    "\1\u020c\7\115\2\0\33\115\3\0\2\115\22\0\3\115"+
    "\6\0\20\115\1\u020d\7\115\2\0\33\115\3\0\2\115"+
    "\22\0\3\115\6\0\15\115\1\u020e\12\115\2\0\33\115"+
    "\3\0\2\115\22\0\3\115\6\0\1\u020f\27\115\2\0"+
    "\33\115\3\0\2\115\22\0\3\115\6\0\30\115\2\0"+
    "\1\u0210\32\115\3\0\2\115\22\0\3\115\6\0\13\115"+
    "\1\u0211\14\115\2\0\33\115\3\0\2\115\22\0\3\115"+
    "\6\0\30\115\2\0\5\115\1\u0212\25\115\3\0\2\115"+
    "\43\0\1\u0213\32\0\1\u0213\65\0\1\u0214\32\0\1\u0214"+
    "\135\0\1\u0215\117\0\1\u0216\120\0\1\u0217\126\0\1\u0218"+
    "\47\0\1\173\1\172\1\0\3\173\41\0\10\173\1\u0219"+
    "\21\173\4\0\1\173\22\0\3\115\6\0\5\115\1\u021a"+
    "\22\115\2\0\33\115\3\0\2\115\22\0\3\115\6\0"+
    "\30\115\2\0\1\u021b\32\115\3\0\2\115\22\0\3\115"+
    "\6\0\30\115\2\0\1\u021c\32\115\3\0\2\115\22\0"+
    "\3\115\6\0\23\115\1\u021d\4\115\2\0\33\115\3\0"+
    "\2\115\22\0\3\115\6\0\22\115\1\u021e\5\115\2\0"+
    "\33\115\3\0\2\115\22\0\3\u0210\6\0\30\u0210\2\0"+
    "\33\u0210\3\0\2\u0210\22\0\3\115\6\0\4\115\1\u021f"+
    "\23\115\2\0\33\115\3\0\2\115\22\0\3\115\6\0"+
    "\30\115\2\0\16\115\1\u0220\14\115\3\0\2\115\50\0"+
    "\1\u0221\32\0\1\u0221\54\0\1\u0222\32\0\1\u0222\127\0"+
    "\1\u0223\134\0\1\u0224\126\0\1\u0225\40\0\1\173\1\172"+
    "\1\0\3\173\41\0\5\173\1\u0226\24\173\4\0\1\173"+
    "\22\0\3\115\6\0\16\115\1\u0227\11\115\2\0\33\115"+
    "\3\0\2\115\22\0\3\115\6\0\1\u0228\27\115\2\0"+
    "\33\115\3\0\2\115\22\0\3\115\6\0\15\115\1\u0229"+
    "\12\115\2\0\33\115\3\0\2\115\22\0\3\115\6\0"+
    "\14\115\1\u022a\13\115\2\0\33\115\3\0\2\115\22\0"+
    "\3\115\6\0\16\115\1\u022b\11\115\2\0\33\115\3\0"+
    "\2\115\22\0\3\115\6\0\30\115\2\0\24\115\1\u022c"+
    "\6\115\3\0\2\115\41\0\1\u022d\32\0\1\u022d\146\0"+
    "\1\u022e\30\0\3\115\6\0\13\115\1\u022f\14\115\2\0"+
    "\33\115\3\0\2\115\22\0\3\115\6\0\23\115\1\u0230"+
    "\4\115\2\0\33\115\3\0\2\115\22\0\3\115\6\0"+
    "\20\115\1\u0231\7\115\2\0\33\115\3\0\2\115\22\0"+
    "\3\115\6\0\1\115\1\u0232\26\115\2\0\33\115\3\0"+
    "\2\115\22\0\3\115\6\0\4\115\1\u0233\23\115\2\0"+
    "\33\115\3\0\2\115\22\0\3\115\6\0\14\115\1\u0234"+
    "\13\115\2\0\33\115\3\0\2\115\22\0\3\115\6\0"+
    "\10\115\1\u0235\17\115\2\0\33\115\3\0\2\115\22\0"+
    "\3\115\6\0\30\115\2\0\31\115\1\u0236\1\115\3\0"+
    "\2\115\22\0\3\115\6\0\1\u0237\27\115\2\0\33\115"+
    "\3\0\2\115\22\0\3\115\6\0\16\115\1\u0238\11\115"+
    "\2\0\33\115\3\0\2\115\22\0\3\115\6\0\10\115"+
    "\1\u0239\17\115\2\0\33\115\3\0\2\115\22\0\3\115"+
    "\6\0\22\115\1\u023a\5\115\2\0\33\115\3\0\2\115"+
    "\22\0\3\115\6\0\30\115\2\0\4\115\1\u023b\26\115"+
    "\3\0\2\115\22\0\3\115\6\0\16\115\1\u023c\11\115"+
    "\2\0\33\115\3\0\2\115\22\0\3\115\6\0\20\115"+
    "\1\u023d\7\115\2\0\33\115\3\0\2\115\22\0\3\115"+
    "\6\0\10\115\1\u023e\17\115\2\0\33\115\3\0\2\115"+
    "\22\0\3\115\6\0\16\115\1\u023f\11\115\2\0\33\115"+
    "\3\0\2\115";

  private static int [] zzUnpackTrans() {
    int [] result = new int[38590];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\4\1\1\11\2\1\1\11\1\1\1\11\1\1"+
    "\4\11\14\1\1\11\36\1\10\11\32\1\1\11\1\1"+
    "\1\11\1\1\1\0\1\1\11\0\1\11\10\0\1\1"+
    "\1\0\1\11\1\0\34\1\5\11\1\0\31\1\1\11"+
    "\11\0\1\11\2\0\1\11\11\0\1\11\4\0\40\1"+
    "\1\0\32\1\3\0\1\11\3\0\1\11\14\0\1\11"+
    "\2\0\2\11\1\0\1\11\1\0\1\11\1\0\36\1"+
    "\1\0\31\1\4\0\1\11\2\0\1\11\10\0\2\11"+
    "\4\0\1\11\1\0\12\1\1\0\10\1\1\0\2\1"+
    "\1\0\23\1\2\0\1\11\1\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\3\0\7\1\1\0\4\1"+
    "\1\0\2\1\1\0\22\1\2\0\1\11\3\0\1\11"+
    "\3\0\1\11\1\0\1\11\4\1\1\0\1\1\1\0"+
    "\1\11\15\1\1\0\3\11\5\0\1\1\1\0\10\1"+
    "\4\0\1\11\2\0\7\1\1\0\2\11\1\0\1\11"+
    "\7\1\2\11\21\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[575];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private List<ErrorAnalisis> errores = new ArrayList();

    private Symbol symbol(int type){
        return new Symbol(type, new Token(yyline, yycolumn, yytext()));
    }

    private void addLexicError(){
        String descripcion = "El simbolo no pertenece al lenguaje";
        errores.add(new ErrorAnalisis(yytext(), yyline+1, yycolumn+1, TipoError.LEXICO, descripcion));
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol(EOF, new Token(yyline, yycolumn, "Fin de linea"));
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol(TEXT_TAG);
            }
            // fall through
          case 133: break;
          case 2:
            { /**Ignorar*/
            }
            // fall through
          case 134: break;
          case 3:
            { yybegin(TAG); return symbol(LESS_THAN);
            }
            // fall through
          case 135: break;
          case 4:
            { addLexicError();
            }
            // fall through
          case 136: break;
          case 5:
            { return symbol(SLASH);
            }
            // fall through
          case 137: break;
          case 6:
            { yybegin(YYINITIAL); return symbol(GREATER_THAN);
            }
            // fall through
          case 138: break;
          case 7:
            { yybegin(PARAMETER); return symbol(OPEN_BRACKET);
            }
            // fall through
          case 139: break;
          case 8:
            { yybegin(VALUE); return symbol(QOUTE_MARK);
            }
            // fall through
          case 140: break;
          case 9:
            { return symbol(ASSIGN);
            }
            // fall through
          case 141: break;
          case 10:
            { yybegin(TAG); return symbol(CLOSE_BRACKET);
            }
            // fall through
          case 142: break;
          case 11:
            { yybegin(PARAMETER); return symbol(QOUTE_MARK);
            }
            // fall through
          case 143: break;
          case 12:
            { return symbol(ID_PARAM);
            }
            // fall through
          case 144: break;
          case 13:
            { return symbol(ENTERO);
            }
            // fall through
          case 145: break;
          case 14:
            { return symbol(NAME_PARAM);
            }
            // fall through
          case 146: break;
          case 15:
            { return symbol(NOT);
            }
            // fall through
          case 147: break;
          case 16:
            { return symbol(SINGLE_QUOTES);
            }
            // fall through
          case 148: break;
          case 17:
            { return symbol(OPEN_ROUND_BRACKET);
            }
            // fall through
          case 149: break;
          case 18:
            { return symbol(CLOSE_ROUND_BRACKET);
            }
            // fall through
          case 150: break;
          case 19:
            { return symbol(TIMES);
            }
            // fall through
          case 151: break;
          case 20:
            { return symbol(PLUS);
            }
            // fall through
          case 152: break;
          case 21:
            { return symbol(MINUS);
            }
            // fall through
          case 153: break;
          case 22:
            { return symbol(COLON);
            }
            // fall through
          case 154: break;
          case 23:
            { return symbol(SEMI);
            }
            // fall through
          case 155: break;
          case 24:
            { return symbol(LESS_THAN);
            }
            // fall through
          case 156: break;
          case 25:
            { return symbol(GREATER_THAN);
            }
            // fall through
          case 157: break;
          case 26:
            { return symbol(ID_VAR);
            }
            // fall through
          case 158: break;
          case 27:
            { return symbol(OPEN_BRACE);
            }
            // fall through
          case 159: break;
          case 28:
            { return symbol(CLOSE_BRACE);
            }
            // fall through
          case 160: break;
          case 29:
            { return symbol(ID);
            }
            // fall through
          case 161: break;
          case 30:
            { return symbol(URL);
            }
            // fall through
          case 162: break;
          case 31:
            { return symbol(WH_VAL);
            }
            // fall through
          case 163: break;
          case 32:
            { return symbol(NOT_EQTUAL_TO);
            }
            // fall through
          case 164: break;
          case 33:
            { return symbol(AND);
            }
            // fall through
          case 165: break;
          case 34:
            { return symbol(LESS_THAN_OR_EQUAL_TO);
            }
            // fall through
          case 166: break;
          case 35:
            { return symbol(EQUAL_TO);
            }
            // fall through
          case 167: break;
          case 36:
            { return symbol(GREATER_THAN_OR_EQUAL_TO);
            }
            // fall through
          case 168: break;
          case 37:
            { return symbol(IF);
            }
            // fall through
          case 169: break;
          case 38:
            { return symbol(OR);
            }
            // fall through
          case 170: break;
          case 39:
            { return symbol(C_P);
            }
            // fall through
          case 171: break;
          case 40:
            { return symbol(ALT);
            }
            // fall through
          case 172: break;
          case 41:
            { return symbol(SRC);
            }
            // fall through
          case 173: break;
          case 42:
            { return symbol(SIZE);
            }
            // fall through
          case 174: break;
          case 43:
            { return symbol(RED);
            }
            // fall through
          case 175: break;
          case 44:
            { return symbol(ROW);
            }
            // fall through
          case 176: break;
          case 45:
            { return symbol(ASC);
            }
            // fall through
          case 177: break;
          case 46:
            { return symbol(END);
            }
            // fall through
          case 178: break;
          case 47:
            { return symbol(C_BR);
            }
            // fall through
          case 179: break;
          case 48:
            { return symbol(C_H1);
            }
            // fall through
          case 180: break;
          case 49:
            { return symbol(COLS);
            }
            // fall through
          case 181: break;
          case 50:
            { return symbol(HREF);
            }
            // fall through
          case 182: break;
          case 51:
            { return symbol(NAME);
            }
            // fall through
          case 183: break;
          case 52:
            { return symbol(ROWS);
            }
            // fall through
          case 184: break;
          case 53:
            { return symbol(TYPE);
            }
            // fall through
          case 185: break;
          case 54:
            { return symbol(COLOR_VALUE);
            }
            // fall through
          case 186: break;
          case 55:
            { return symbol(AQUA);
            }
            // fall through
          case 187: break;
          case 56:
            { return symbol(BLUE);
            }
            // fall through
          case 188: break;
          case 57:
            { return symbol(GRAY);
            }
            // fall through
          case 189: break;
          case 58:
            { return symbol(LEFT);
            }
            // fall through
          case 190: break;
          case 59:
            { return symbol(LIME);
            }
            // fall through
          case 191: break;
          case 60:
            { return symbol(NAVY);
            }
            // fall through
          case 192: break;
          case 61:
            { return symbol(TEAL);
            }
            // fall through
          case 193: break;
          case 62:
            { return symbol(TEXT);
            }
            // fall through
          case 194: break;
          case 63:
            { return symbol(DESC);
            }
            // fall through
          case 195: break;
          case 64:
            { return symbol(ELSE);
            }
            // fall through
          case 196: break;
          case 65:
            { return symbol(EXIT);
            }
            // fall through
          case 197: break;
          case 66:
            { return symbol(INIT);
            }
            // fall through
          case 198: break;
          case 67:
            { return symbol(THEN);
            }
            // fall through
          case 199: break;
          case 68:
            { return symbol(CHAR);
            }
            // fall through
          case 200: break;
          case 69:
            { return symbol(TRUE);
            }
            // fall through
          case 201: break;
          case 70:
            { return symbol(C_DIV);
            }
            // fall through
          case 202: break;
          case 71:
            { return symbol(C_IMG);
            }
            // fall through
          case 203: break;
          case 72:
            { return symbol(CLASS);
            }
            // fall through
          case 204: break;
          case 73:
            { return symbol(COLOR);
            }
            // fall through
          case 205: break;
          case 74:
            { return symbol(WIDTH);
            }
            // fall through
          case 206: break;
          case 75:
            { return symbol(ARIAL);
            }
            // fall through
          case 207: break;
          case 76:
            { return symbol(BLACK);
            }
            // fall through
          case 208: break;
          case 77:
            { return symbol(GREEN);
            }
            // fall through
          case 209: break;
          case 78:
            { return symbol(OLIVE);
            }
            // fall through
          case 210: break;
          case 79:
            { return symbol(RADIO);
            }
            // fall through
          case 211: break;
          case 80:
            { return symbol(RIGHT);
            }
            // fall through
          case 212: break;
          case 81:
            { return symbol(WHILE);
            }
            // fall through
          case 213: break;
          case 82:
            { return symbol(FALSE);
            }
            // fall through
          case 214: break;
          case 83:
            { return symbol(C_BODY);
            }
            // fall through
          case 215: break;
          case 84:
            { return symbol(C_GCIC);
            }
            // fall through
          case 216: break;
          case 85:
            { return symbol(C_HEAD);
            }
            // fall through
          case 217: break;
          case 86:
            { return symbol(C_LINK);
            }
            // fall through
          case 218: break;
          case 87:
            { return symbol(C_SPAM);
            }
            // fall through
          case 219: break;
          case 88:
            { return symbol(HEIGHT);
            }
            // fall through
          case 220: break;
          case 89:
            { return symbol(GENEVA);
            }
            // fall through
          case 221: break;
          case 90:
            { return symbol(CENTER);
            }
            // fall through
          case 222: break;
          case 91:
            { return symbol(COLUMN);
            }
            // fall through
          case 223: break;
          case 92:
            { return symbol(MARRON);
            }
            // fall through
          case 224: break;
          case 93:
            { return symbol(NUMBER);
            }
            // fall through
          case 225: break;
          case 94:
            { return symbol(PURPLE);
            }
            // fall through
          case 226: break;
          case 95:
            { return symbol(SILVER);
            }
            // fall through
          case 227: break;
          case 96:
            { return symbol(YELLOW);
            }
            // fall through
          case 228: break;
          case 97:
            { return symbol(HUNTIL);
            }
            // fall through
          case 229: break;
          case 98:
            { return symbol(INSERT);
            }
            // fall through
          case 230: break;
          case 99:
            { return symbol(REPEAT);
            }
            // fall through
          case 231: break;
          case 100:
            { return symbol(STRING);
            }
            // fall through
          case 232: break;
          case 101:
            { return symbol(C_INPUT);
            }
            // fall through
          case 233: break;
          case 102:
            { return symbol(C_TITLE);
            }
            // fall through
          case 234: break;
          case 103:
            { return symbol(ONCLICK);
            }
            // fall through
          case 235: break;
          case 104:
            { return symbol(COURIER);
            }
            // fall through
          case 236: break;
          case 105:
            { return symbol(VERDANA);
            }
            // fall through
          case 237: break;
          case 106:
            { return symbol(FUCHSIA);
            }
            // fall through
          case 238: break;
          case 107:
            { return symbol(JUSTIFY);
            }
            // fall through
          case 239: break;
          case 108:
            { return symbol(GLOBAL_MODE);
            }
            // fall through
          case 240: break;
          case 109:
            { return symbol(ON_LOAD);
            }
            // fall through
          case 241: break;
          case 110:
            { return symbol(REVERSE);
            }
            // fall through
          case 242: break;
          case 111:
            { return symbol(BOOLEAN);
            }
            // fall through
          case 243: break;
          case 112:
            { return symbol(DECIMAL);
            }
            // fall through
          case 244: break;
          case 113:
            { return symbol(INTEGER);
            }
            // fall through
          case 245: break;
          case 114:
            { return symbol(C_BUTTON);
            }
            // fall through
          case 246: break;
          case 115:
            { return symbol(C_OPTION);
            }
            // fall through
          case 247: break;
          case 116:
            { return symbol(C_SELECT);
            }
            // fall through
          case 248: break;
          case 117:
            { return symbol(CHECKBOX);
            }
            // fall through
          case 249: break;
          case 118:
            { return symbol(PROCESS_NAME);
            }
            // fall through
          case 250: break;
          case 119:
            { return symbol(FONT_SIZE);
            }
            // fall through
          case 251: break;
          case 120:
            { return symbol(THENWHILE);
            }
            // fall through
          case 252: break;
          case 121:
            { return symbol(C_TEXTAREA);
            }
            // fall through
          case 253: break;
          case 122:
            { return symbol(BACKGROUND);
            }
            // fall through
          case 254: break;
          case 123:
            { return symbol(TEXT_ALIGN);
            }
            // fall through
          case 255: break;
          case 124:
            { return symbol(SANS_SERIF);
            }
            // fall through
          case 256: break;
          case 125:
            { return symbol(ALERT_INFO);
            }
            // fall through
          case 257: break;
          case 126:
            { return symbol(LETPAR_NUM);
            }
            // fall through
          case 258: break;
          case 127:
            { return symbol(C_SCRIPTING);
            }
            // fall through
          case 259: break;
          case 128:
            { return symbol(FONT_FAMILY);
            }
            // fall through
          case 260: break;
          case 129:
            { return symbol(LETIMPAR_NUM);
            }
            // fall through
          case 261: break;
          case 130:
            { return symbol(NUM_ALEATORIO);
            }
            // fall through
          case 262: break;
          case 131:
            { return symbol(ELEMENT_BY_ID);
            }
            // fall through
          case 263: break;
          case 132:
            { return symbol(CARACTER_ALEATORIO);
            }
            // fall through
          case 264: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
