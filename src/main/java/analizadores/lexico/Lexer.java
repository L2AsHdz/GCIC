// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.flex

package analizadores.lexico;

import java.util.ArrayList;
import java.util.List;
import model.Token;
import model.errores.ErrorAnalisis;
import model.errores.TipoError;
import static analizadores.sintactico.Sym.*;

import java_cup.runtime.Symbol;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int TAG = 2;
  public static final int PARAMETER = 4;
  public static final int VALUE = 6;
  public static final int SCRIPTING = 8;
  public static final int OTHER = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u7300\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\1\22\0\1\3\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\0\1\17\1\20\1\21\1\22\1\23\10\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\0\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\44"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\44\1\63\1\0\1\64\1\0\1\65\1\0\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116"+
    "\1\117\1\120\1\121\1\122\7\0\1\1\32\0\1\1"+
    "\11\0\1\44\12\0\1\44\4\0\1\44\5\0\27\44"+
    "\1\0\37\44\1\0\u01ca\44\4\0\14\44\16\0\5\44"+
    "\7\0\1\44\1\0\1\44\21\0\160\123\5\44\1\0"+
    "\2\44\2\0\4\44\1\0\1\44\6\0\1\44\1\0"+
    "\3\44\1\0\1\44\1\0\24\44\1\0\123\44\1\0"+
    "\213\44\1\0\7\123\246\44\1\0\46\44\2\0\1\44"+
    "\6\0\51\44\10\0\55\123\1\0\1\123\1\0\2\123"+
    "\1\0\2\123\1\0\1\123\10\0\33\44\4\0\4\44"+
    "\35\0\13\123\5\0\53\44\25\123\12\124\4\0\2\44"+
    "\1\123\143\44\1\0\1\44\7\123\2\0\6\123\2\44"+
    "\2\123\1\0\4\123\2\44\12\124\3\44\2\0\1\44"+
    "\20\0\1\44\1\123\36\44\33\123\2\0\131\44\13\123"+
    "\1\44\16\0\12\124\41\44\11\123\2\44\4\0\1\44"+
    "\2\0\1\123\2\0\26\44\4\123\1\44\11\123\1\44"+
    "\3\123\1\44\5\123\22\0\31\44\3\123\4\0\13\44"+
    "\65\0\25\44\1\0\10\44\25\0\17\123\1\0\41\123"+
    "\66\44\3\123\1\44\22\123\1\44\7\123\12\44\2\123"+
    "\2\0\12\124\1\0\20\44\3\123\1\0\10\44\2\0"+
    "\2\44\2\0\26\44\1\0\7\44\1\0\1\44\3\0"+
    "\4\44\2\0\1\123\1\44\7\123\2\0\2\123\2\0"+
    "\3\123\1\44\10\0\1\123\4\0\2\44\1\0\3\44"+
    "\2\123\2\0\12\124\2\44\12\0\1\44\1\0\1\123"+
    "\2\0\3\123\1\0\6\44\4\0\2\44\2\0\26\44"+
    "\1\0\7\44\1\0\2\44\1\0\2\44\1\0\2\44"+
    "\2\0\1\123\1\0\5\123\4\0\2\123\2\0\3\123"+
    "\3\0\1\123\7\0\4\44\1\0\1\44\7\0\12\124"+
    "\2\123\3\44\1\123\13\0\3\123\1\0\11\44\1\0"+
    "\3\44\1\0\26\44\1\0\7\44\1\0\2\44\1\0"+
    "\5\44\2\0\1\123\1\44\10\123\1\0\3\123\1\0"+
    "\3\123\2\0\1\44\17\0\2\44\2\123\2\0\12\124"+
    "\11\0\1\44\6\123\1\0\3\123\1\0\10\44\2\0"+
    "\2\44\2\0\26\44\1\0\7\44\1\0\2\44\1\0"+
    "\5\44\2\0\1\123\1\44\7\123\2\0\2\123\2\0"+
    "\3\123\10\0\2\123\4\0\2\44\1\0\3\44\2\123"+
    "\2\0\12\124\1\0\1\44\20\0\1\123\1\44\1\0"+
    "\6\44\3\0\3\44\1\0\4\44\3\0\2\44\1\0"+
    "\1\44\1\0\2\44\3\0\2\44\3\0\3\44\3\0"+
    "\14\44\4\0\5\123\3\0\3\123\1\0\4\123\2\0"+
    "\1\44\6\0\1\123\16\0\12\124\20\0\5\123\10\44"+
    "\1\0\3\44\1\0\27\44\1\0\20\44\3\0\1\44"+
    "\7\123\1\0\3\123\1\0\4\123\7\0\2\123\1\0"+
    "\3\44\5\0\2\44\2\123\2\0\12\124\20\0\1\44"+
    "\3\123\1\0\10\44\1\0\3\44\1\0\27\44\1\0"+
    "\12\44\1\0\5\44\2\0\1\123\1\44\7\123\1\0"+
    "\3\123\1\0\4\123\7\0\2\123\7\0\1\44\1\0"+
    "\2\44\2\123\2\0\12\124\1\0\2\44\15\0\4\123"+
    "\1\0\10\44\1\0\3\44\1\0\51\44\2\123\1\44"+
    "\7\123\1\0\3\123\1\0\4\123\1\44\5\0\3\44"+
    "\1\123\7\0\3\44\2\123\2\0\12\124\12\0\6\44"+
    "\2\0\2\123\1\0\22\44\3\0\30\44\1\0\11\44"+
    "\1\0\1\44\2\0\7\44\3\0\1\123\4\0\6\123"+
    "\1\0\1\123\1\0\10\123\6\0\12\124\2\0\2\123"+
    "\15\0\60\44\1\123\2\44\7\123\5\0\7\44\10\123"+
    "\1\0\12\124\47\0\2\44\1\0\1\44\1\0\5\44"+
    "\1\0\30\44\1\0\1\44\1\0\12\44\1\123\2\44"+
    "\11\123\1\44\2\0\5\44\1\0\1\44\1\0\6\123"+
    "\2\0\12\124\2\0\4\44\40\0\1\44\27\0\2\123"+
    "\6\0\12\124\13\0\1\123\1\0\1\123\1\0\1\123"+
    "\4\0\2\123\10\44\1\0\44\44\4\0\24\123\1\0"+
    "\2\123\5\44\13\123\1\0\44\123\11\0\1\123\71\0"+
    "\53\44\24\123\1\44\12\124\6\0\6\44\4\123\4\44"+
    "\3\123\1\44\3\123\2\44\7\123\3\44\4\123\15\44"+
    "\14\123\1\44\1\123\12\124\4\123\2\0\46\44\1\0"+
    "\1\44\5\0\1\44\2\0\53\44\1\0\115\44\1\0"+
    "\4\44\2\0\7\44\1\0\1\44\1\0\4\44\2\0"+
    "\51\44\1\0\4\44\2\0\41\44\1\0\4\44\2\0"+
    "\7\44\1\0\1\44\1\0\4\44\2\0\17\44\1\0"+
    "\71\44\1\0\4\44\2\0\103\44\2\0\3\123\40\0"+
    "\20\44\20\0\126\44\2\0\6\44\3\0\u016c\44\2\0"+
    "\21\44\1\1\32\44\5\0\113\44\3\0\3\123\10\44"+
    "\7\0\15\44\1\0\4\44\3\123\13\0\22\44\3\123"+
    "\13\0\22\44\2\123\14\0\15\44\1\0\3\44\1\0"+
    "\2\123\14\0\64\44\40\123\3\0\1\44\4\0\1\44"+
    "\1\123\2\0\12\124\41\0\3\123\2\0\12\124\6\0"+
    "\131\44\7\0\5\44\2\123\42\44\1\123\1\44\5\0"+
    "\106\44\12\0\37\44\1\0\14\123\4\0\14\123\12\0"+
    "\12\124\36\44\2\0\5\44\13\0\54\44\4\0\32\44"+
    "\6\0\12\124\46\0\27\44\5\123\4\0\65\44\12\123"+
    "\1\0\35\123\2\0\1\123\12\124\6\0\12\124\15\0"+
    "\1\44\10\0\17\123\101\0\5\123\57\44\21\123\7\44"+
    "\4\0\12\124\21\0\11\123\14\0\3\123\36\44\15\123"+
    "\2\44\12\124\54\44\16\123\14\0\44\44\24\123\10\0"+
    "\12\124\3\0\3\44\12\124\44\44\2\0\11\44\7\0"+
    "\53\44\2\0\3\44\20\0\3\123\1\0\25\123\4\44"+
    "\1\123\6\44\1\123\2\44\3\123\1\44\5\0\300\44"+
    "\72\123\1\0\5\123\26\44\2\0\6\44\2\0\46\44"+
    "\2\0\6\44\2\0\10\44\1\0\1\44\1\0\1\44"+
    "\1\0\1\44\1\0\37\44\2\0\65\44\1\0\7\44"+
    "\1\0\1\44\3\0\3\44\1\0\7\44\3\0\4\44"+
    "\2\0\6\44\4\0\15\44\5\0\3\44\1\0\7\44"+
    "\3\0\13\1\35\0\2\1\5\0\1\1\17\0\2\123"+
    "\23\0\1\123\12\0\1\1\21\0\1\44\15\0\1\44"+
    "\20\0\15\44\63\0\41\123\21\0\1\44\4\0\1\44"+
    "\2\0\12\44\1\0\1\44\3\0\5\44\6\0\1\44"+
    "\1\0\1\44\1\0\1\44\1\0\4\44\1\0\13\44"+
    "\2\0\4\44\5\0\5\44\4\0\1\44\21\0\43\123"+
    "\2\44\4\123\u022d\0\64\123\26\0\57\44\1\0\57\44"+
    "\1\0\205\44\6\0\4\44\3\123\2\44\14\0\46\44"+
    "\1\0\1\44\5\0\1\44\2\0\70\44\7\0\1\44"+
    "\17\0\1\123\27\44\11\0\7\44\1\0\7\44\1\0"+
    "\7\44\1\0\7\44\1\0\7\44\1\0\7\44\1\0"+
    "\7\44\1\0\7\44\1\0\40\123\57\0\1\44\320\0"+
    "\1\1\4\0\2\44\1\123\31\0\17\123\1\0\5\44"+
    "\2\0\3\123\2\44\4\0\126\44\2\0\2\123\2\0"+
    "\3\44\1\0\132\44\1\0\4\44\5\0\53\44\1\0"+
    "\136\44\21\0\33\44\65\0\306\44\112\0\360\44\20\0"+
    "\215\44\103\0\56\44\2\0\15\44\3\0\20\44\12\124"+
    "\2\44\24\0\57\44\4\123\1\0\12\123\1\0\37\44"+
    "\2\123\106\44\14\123\45\0\11\44\2\0\147\44\2\0"+
    "\65\44\2\0\5\44\60\0\13\44\1\123\3\44\1\123"+
    "\4\44\1\123\27\44\5\123\30\0\64\44\14\0\2\123"+
    "\62\44\22\123\12\0\12\124\6\0\22\123\6\44\3\0"+
    "\1\44\1\0\2\44\1\123\12\124\34\44\10\123\2\0"+
    "\27\44\15\123\14\0\35\44\3\0\4\123\57\44\16\123"+
    "\16\0\1\44\12\124\6\0\5\44\1\123\12\44\12\124"+
    "\5\44\1\0\51\44\16\123\11\0\3\44\1\123\10\44"+
    "\2\123\2\0\12\124\6\0\27\44\3\0\1\44\3\123"+
    "\62\44\1\123\1\44\3\123\2\44\2\123\5\44\2\123"+
    "\1\44\1\123\1\44\30\0\3\44\2\0\13\44\5\123"+
    "\2\0\3\44\2\123\12\0\6\44\2\0\6\44\2\0"+
    "\6\44\11\0\7\44\1\0\7\44\1\0\53\44\1\0"+
    "\14\44\10\0\163\44\10\123\1\0\2\123\2\0\12\124"+
    "\6\0\244\44\14\0\27\44\4\0\61\44\4\0\156\44"+
    "\2\0\152\44\46\0\7\44\14\0\5\44\5\0\1\44"+
    "\1\123\12\44\1\0\15\44\1\0\5\44\1\0\1\44"+
    "\1\0\2\44\1\0\2\44\1\0\154\44\41\0\153\44"+
    "\22\0\100\44\2\0\66\44\50\0\14\44\4\0\20\123"+
    "\20\0\20\123\3\0\2\123\30\0\3\123\40\0\5\44"+
    "\1\0\207\44\23\0\12\124\7\0\32\44\4\0\1\123"+
    "\1\0\32\44\13\0\131\44\3\0\6\44\2\0\6\44"+
    "\2\0\6\44\2\0\3\44\43\0\14\44\1\0\32\44"+
    "\1\0\23\44\1\0\2\44\1\0\17\44\2\0\16\44"+
    "\42\0\173\44\105\0\65\123\210\0\1\123\202\0\35\44"+
    "\3\0\61\44\17\0\1\123\37\0\40\44\15\0\24\44"+
    "\1\123\10\44\1\123\5\0\46\44\5\123\5\0\36\44"+
    "\2\0\44\44\4\0\10\44\1\0\5\123\52\0\236\44"+
    "\2\0\12\124\6\0\44\44\4\0\44\44\4\0\50\44"+
    "\10\0\64\44\234\0\67\44\11\0\26\44\12\0\10\44"+
    "\230\0\6\44\2\0\1\44\1\0\54\44\1\0\2\44"+
    "\3\0\1\44\2\0\27\44\12\0\27\44\11\0\37\44"+
    "\101\0\23\44\1\0\2\44\12\0\26\44\12\0\32\44"+
    "\106\0\70\44\6\0\2\44\100\0\1\44\3\123\1\0"+
    "\2\123\5\0\4\123\4\44\1\0\3\44\1\0\35\44"+
    "\2\0\3\123\4\0\1\123\40\0\35\44\3\0\35\44"+
    "\43\0\10\44\1\0\34\44\2\123\31\0\66\44\12\0"+
    "\26\44\12\0\23\44\15\0\22\44\156\0\111\44\67\0"+
    "\63\44\15\0\63\44\15\0\44\44\4\123\10\0\12\124"+
    "\306\0\35\44\12\0\1\44\10\0\26\44\13\123\217\0"+
    "\27\44\11\0\3\123\65\44\17\123\37\0\12\124\17\0"+
    "\4\123\55\44\13\123\25\0\31\44\7\0\12\124\6\0"+
    "\3\123\44\44\16\123\1\0\12\124\4\0\1\44\2\123"+
    "\11\0\43\44\1\123\2\0\1\44\11\0\3\123\60\44"+
    "\16\123\4\44\4\0\4\123\3\0\12\124\1\44\1\0"+
    "\1\44\43\0\22\44\1\0\31\44\14\123\6\0\1\123"+
    "\101\0\7\44\1\0\1\44\1\0\4\44\1\0\17\44"+
    "\1\0\12\44\7\0\57\44\14\123\5\0\12\124\6\0"+
    "\4\123\1\0\10\44\2\0\2\44\2\0\26\44\1\0"+
    "\7\44\1\0\2\44\1\0\5\44\1\0\2\123\1\44"+
    "\7\123\2\0\2\123\2\0\3\123\2\0\1\44\6\0"+
    "\1\123\5\0\5\44\2\123\2\0\7\123\3\0\5\123"+
    "\213\0\65\44\22\123\4\44\5\0\12\124\4\0\1\123"+
    "\1\44\40\0\60\44\24\123\2\44\1\0\1\44\10\0"+
    "\12\124\246\0\57\44\7\123\2\0\11\123\27\0\4\44"+
    "\2\123\42\0\60\44\21\123\3\0\1\44\13\0\12\124"+
    "\46\0\53\44\15\123\1\44\7\0\12\124\66\0\33\44"+
    "\2\0\17\123\4\0\12\124\306\0\54\44\17\123\145\0"+
    "\100\44\12\124\25\0\1\44\240\0\10\44\2\0\47\44"+
    "\7\123\2\0\7\123\1\44\1\0\1\44\1\123\33\0"+
    "\1\44\12\123\50\44\7\123\1\44\4\123\10\0\1\123"+
    "\10\0\1\44\13\123\56\44\20\123\3\0\1\44\42\0"+
    "\71\44\7\0\11\44\1\0\45\44\10\123\1\0\10\123"+
    "\1\44\17\0\12\124\30\0\36\44\2\0\26\123\1\0"+
    "\16\123\111\0\7\44\1\0\2\44\1\0\46\44\6\123"+
    "\3\0\1\123\1\0\2\123\1\0\7\123\1\44\1\123"+
    "\10\0\12\124\6\0\6\44\1\0\2\44\1\0\40\44"+
    "\5\123\1\0\2\123\1\0\5\123\1\44\7\0\12\124"+
    "\u0136\0\23\44\4\123\11\0\232\44\146\0\157\123\21\0"+
    "\304\44\274\0\57\44\321\0\107\44\271\0\71\44\7\0"+
    "\37\44\1\0\12\124\146\0\36\44\2\0\5\123\13\0"+
    "\60\44\7\123\11\0\4\44\14\0\12\124\11\0\25\44"+
    "\5\0\23\44\260\0\100\44\200\0\113\44\4\0\1\123"+
    "\1\44\67\123\7\0\4\123\15\44\100\0\2\44\1\0"+
    "\1\44\34\0\370\44\10\0\363\44\15\0\37\44\61\0"+
    "\3\44\21\0\4\44\10\0\u018c\44\4\0\153\44\5\0"+
    "\15\44\3\0\11\44\7\0\12\44\3\0\2\123\306\0"+
    "\5\123\3\0\6\123\10\0\10\123\2\0\7\123\36\0"+
    "\4\123\224\0\3\123\273\0\125\44\1\0\107\44\1\0"+
    "\2\44\2\0\1\44\2\0\2\44\2\0\4\44\1\0"+
    "\14\44\1\0\1\44\1\0\7\44\1\0\101\44\1\0"+
    "\4\44\2\0\10\44\1\0\7\44\1\0\34\44\1\0"+
    "\4\44\1\0\5\44\1\0\1\44\3\0\7\44\1\0"+
    "\u0154\44\2\0\31\44\1\0\31\44\1\0\37\44\1\0"+
    "\31\44\1\0\37\44\1\0\31\44\1\0\37\44\1\0"+
    "\31\44\1\0\37\44\1\0\31\44\1\0\10\44\2\0"+
    "\62\124\67\123\4\0\62\123\10\0\1\123\16\0\1\123"+
    "\26\0\5\123\1\0\17\123\120\0\7\123\1\0\21\123"+
    "\2\0\7\123\1\0\2\123\1\0\5\123\325\0\55\44"+
    "\3\0\7\123\7\44\2\0\12\124\4\0\1\44\u0171\0"+
    "\54\44\4\123\12\124\6\0\305\44\13\0\7\123\51\0"+
    "\104\44\7\123\1\44\4\0\12\124\246\0\4\44\1\0"+
    "\33\44\1\0\2\44\1\0\1\44\2\0\1\44\1\0"+
    "\12\44\1\0\4\44\1\0\1\44\1\0\1\44\6\0"+
    "\1\44\4\0\1\44\1\0\1\44\1\0\1\44\1\0"+
    "\3\44\1\0\2\44\1\0\1\44\2\0\1\44\1\0"+
    "\1\44\1\0\1\44\1\0\1\44\1\0\1\44\1\0"+
    "\2\44\1\0\1\44\2\0\4\44\1\0\7\44\1\0"+
    "\4\44\1\0\4\44\1\0\1\44\1\0\12\44\1\0"+
    "\21\44\5\0\3\44\1\0\5\44\1\0\21\44\164\0"+
    "\32\123\6\0\32\123\6\0\32\123\166\0\327\44\51\0"+
    "\65\44\13\0\336\44\2\0\u0182\44\16\0\u0131\44\37\0"+
    "\36\44\342\0\360\123\20\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\1\1\3\1\4\1\2\1\4"+
    "\1\5\1\4\1\6\1\4\1\7\1\10\1\11\1\12"+
    "\14\4\1\13\1\4\2\14\1\4\2\15\26\16\1\17"+
    "\1\20\1\21\1\22\1\4\16\23\1\24\1\25\10\23"+
    "\1\26\1\4\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\21\1\4\1\22\1\35\1\4\1\36\1\2\1\0"+
    "\1\2\10\0\1\37\10\0\1\40\1\0\1\41\1\0"+
    "\34\16\1\0\11\23\1\42\20\23\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\10\0\1\51\2\0\1\52\11\0"+
    "\1\53\4\0\1\54\27\16\1\55\1\16\1\56\5\16"+
    "\1\0\1\23\1\57\4\23\1\60\24\23\2\0\1\61"+
    "\3\0\1\62\15\0\1\63\2\0\1\64\1\65\1\0"+
    "\1\66\1\0\1\67\1\0\1\70\4\16\1\71\1\16"+
    "\1\72\4\16\1\73\3\16\1\74\1\75\1\16\1\76"+
    "\7\16\1\77\1\100\1\16\1\0\3\23\1\101\1\102"+
    "\1\103\1\23\1\104\10\23\1\105\2\23\1\106\5\23"+
    "\1\107\3\0\1\110\2\0\1\111\11\0\1\112\1\113"+
    "\4\0\1\114\1\0\1\115\3\16\1\116\4\16\1\117"+
    "\1\0\4\16\1\120\1\16\1\121\1\122\1\0\2\16"+
    "\1\0\15\23\1\123\2\23\1\124\3\23\1\0\1\125"+
    "\1\0\1\126\1\127\1\0\1\130\3\0\1\131\5\0"+
    "\1\132\3\0\1\16\1\133\1\16\1\134\1\16\1\135"+
    "\1\16\1\0\1\16\1\136\1\137\1\140\1\0\1\141"+
    "\1\142\1\0\3\23\1\143\1\144\5\23\1\145\6\23"+
    "\1\146\1\2\1\0\1\147\4\0\1\150\3\0\1\151"+
    "\1\0\1\70\1\152\1\153\1\16\1\154\1\0\1\155"+
    "\1\0\1\156\6\23\1\157\1\23\1\160\1\23\1\161"+
    "\1\162\1\23\1\163\1\164\1\165\1\0\1\166\5\0"+
    "\1\167\1\0\6\23\1\170\2\23\4\0\1\171\2\0"+
    "\6\23\1\172\1\23\1\0\1\173\1\174\1\0\1\175"+
    "\1\176\1\177\3\23\1\200\2\23\1\201\1\202\1\23"+
    "\1\203\4\23\1\204\3\23\1\205\2\23\1\206\3\23"+
    "\1\207";

  private static int [] zzUnpackAction() {
    int [] result = new int[588];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\125\0\252\0\377\0\u0154\0\u01a9\0\u01fe\0\u0253"+
    "\0\u02a8\0\u02fd\0\u0352\0\u03a7\0\u03fc\0\u0352\0\u02fd\0\u0352"+
    "\0\u0451\0\u0352\0\u0352\0\u0352\0\u0352\0\u04a6\0\u04fb\0\u0550"+
    "\0\u05a5\0\u05fa\0\u064f\0\u06a4\0\u06f9\0\u074e\0\u07a3\0\u07f8"+
    "\0\u084d\0\u0352\0\u08a2\0\u08f7\0\u094c\0\u09a1\0\u09f6\0\u0a4b"+
    "\0\u0aa0\0\u0af5\0\u0b4a\0\u0b9f\0\u0bf4\0\u0c49\0\u0c9e\0\u0cf3"+
    "\0\u0d48\0\u0d9d\0\u0df2\0\u0e47\0\u0e9c\0\u0ef1\0\u0f46\0\u0f9b"+
    "\0\u0ff0\0\u1045\0\u109a\0\u10ef\0\u1144\0\u1199\0\u0352\0\u0352"+
    "\0\u02fd\0\u0352\0\u11ee\0\u1243\0\u1298\0\u12ed\0\u1342\0\u1397"+
    "\0\u13ec\0\u1441\0\u1496\0\u14eb\0\u1540\0\u1595\0\u15ea\0\u163f"+
    "\0\u1694\0\u0352\0\u0352\0\u16e9\0\u173e\0\u1793\0\u17e8\0\u183d"+
    "\0\u1892\0\u18e7\0\u193c\0\u1991\0\u19e6\0\u0352\0\u0352\0\u0352"+
    "\0\u0352\0\u0352\0\u0352\0\u1a3b\0\u1a90\0\u1ae5\0\u0352\0\u1b3a"+
    "\0\u0352\0\u1b8f\0\u1be4\0\u1c39\0\u1c8e\0\u1ce3\0\u1d38\0\u1d8d"+
    "\0\u1de2\0\u1e37\0\u1e8c\0\u1ee1\0\u0352\0\u1f36\0\u1f8b\0\u1fe0"+
    "\0\u2035\0\u208a\0\u20df\0\u2134\0\u2189\0\u21de\0\u09a1\0\u0352"+
    "\0\u2233\0\u2288\0\u22dd\0\u2332\0\u2387\0\u23dc\0\u2431\0\u2486"+
    "\0\u24db\0\u2530\0\u2585\0\u25da\0\u262f\0\u2684\0\u26d9\0\u272e"+
    "\0\u2783\0\u27d8\0\u282d\0\u2882\0\u28d7\0\u292c\0\u2981\0\u29d6"+
    "\0\u2a2b\0\u2a80\0\u2ad5\0\u2b2a\0\u2b7f\0\u2bd4\0\u2c29\0\u2c7e"+
    "\0\u2cd3\0\u2d28\0\u2d7d\0\u2dd2\0\u2e27\0\u2e7c\0\u2ed1\0\u1298"+
    "\0\u2f26\0\u2f7b\0\u2fd0\0\u3025\0\u307a\0\u30cf\0\u3124\0\u3179"+
    "\0\u31ce\0\u3223\0\u3278\0\u32cd\0\u3322\0\u3377\0\u33cc\0\u3421"+
    "\0\u0352\0\u0352\0\u0352\0\u0352\0\u0352\0\u0352\0\u3476\0\u34cb"+
    "\0\u3520\0\u3575\0\u35ca\0\u361f\0\u3674\0\u36c9\0\u0352\0\u371e"+
    "\0\u3773\0\u0352\0\u37c8\0\u381d\0\u3872\0\u38c7\0\u391c\0\u3971"+
    "\0\u39c6\0\u3a1b\0\u3a70\0\u0352\0\u3ac5\0\u3b1a\0\u3b6f\0\u3bc4"+
    "\0\u09a1\0\u3c19\0\u3c6e\0\u3cc3\0\u3d18\0\u3d6d\0\u3dc2\0\u3e17"+
    "\0\u3e6c\0\u3ec1\0\u3f16\0\u3f6b\0\u3fc0\0\u4015\0\u406a\0\u40bf"+
    "\0\u4114\0\u4169\0\u41be\0\u4213\0\u4268\0\u42bd\0\u4312\0\u4367"+
    "\0\u0d48\0\u43bc\0\u0d48\0\u4411\0\u4466\0\u44bb\0\u4510\0\u4565"+
    "\0\u45ba\0\u460f\0\u1298\0\u4664\0\u46b9\0\u470e\0\u4763\0\u1298"+
    "\0\u47b8\0\u480d\0\u4862\0\u48b7\0\u490c\0\u4961\0\u49b6\0\u4a0b"+
    "\0\u4a60\0\u4ab5\0\u4b0a\0\u4b5f\0\u4bb4\0\u4c09\0\u4c5e\0\u4cb3"+
    "\0\u4d08\0\u4d5d\0\u4db2\0\u4e07\0\u4e5c\0\u4eb1\0\u0352\0\u4f06"+
    "\0\u4f5b\0\u4fb0\0\u0352\0\u5005\0\u505a\0\u50af\0\u5104\0\u5159"+
    "\0\u51ae\0\u5203\0\u5258\0\u52ad\0\u5302\0\u5357\0\u53ac\0\u5401"+
    "\0\u0352\0\u5456\0\u54ab\0\u0352\0\u0352\0\u5500\0\u0352\0\u5555"+
    "\0\u0352\0\u55aa\0\u55ff\0\u5654\0\u56a9\0\u56fe\0\u5753\0\u0d48"+
    "\0\u57a8\0\u0d48\0\u57fd\0\u5852\0\u58a7\0\u58fc\0\u0d48\0\u5951"+
    "\0\u59a6\0\u59fb\0\u0d48\0\u0d48\0\u5a50\0\u0d48\0\u5aa5\0\u5afa"+
    "\0\u5b4f\0\u5ba4\0\u5bf9\0\u5c4e\0\u5ca3\0\u0d48\0\u0d48\0\u5cf8"+
    "\0\u5d4d\0\u5da2\0\u5df7\0\u5e4c\0\u1298\0\u1298\0\u1298\0\u5ea1"+
    "\0\u1298\0\u5ef6\0\u5f4b\0\u5fa0\0\u5ff5\0\u604a\0\u609f\0\u60f4"+
    "\0\u6149\0\u619e\0\u61f3\0\u6248\0\u1298\0\u629d\0\u62f2\0\u6347"+
    "\0\u639c\0\u63f1\0\u1298\0\u6446\0\u649b\0\u64f0\0\u0352\0\u6545"+
    "\0\u659a\0\u0352\0\u65ef\0\u6644\0\u6699\0\u66ee\0\u6743\0\u6798"+
    "\0\u67ed\0\u6842\0\u6897\0\u0352\0\u0352\0\u68ec\0\u6941\0\u6996"+
    "\0\u69eb\0\u0352\0\u6a40\0\u0af5\0\u6a95\0\u6aea\0\u6b3f\0\u0d48"+
    "\0\u6b94\0\u6be9\0\u6c3e\0\u6c93\0\u0d48\0\u6ce8\0\u6d3d\0\u6d92"+
    "\0\u6de7\0\u6e3c\0\u0d48\0\u6e91\0\u0d48\0\u0d48\0\u6ee6\0\u6f3b"+
    "\0\u6f90\0\u6fe5\0\u703a\0\u708f\0\u70e4\0\u7139\0\u718e\0\u71e3"+
    "\0\u7238\0\u728d\0\u72e2\0\u7337\0\u738c\0\u73e1\0\u7436\0\u1298"+
    "\0\u748b\0\u74e0\0\u1298\0\u7535\0\u758a\0\u75df\0\u7634\0\u0352"+
    "\0\u7689\0\u0352\0\u0352\0\u76de\0\u0352\0\u7733\0\u7788\0\u77dd"+
    "\0\u0352\0\u7832\0\u7887\0\u78dc\0\u7931\0\u7986\0\u0352\0\u79db"+
    "\0\u7a30\0\u7a85\0\u7ada\0\u0af5\0\u7b2f\0\u0d48\0\u7b84\0\u0d48"+
    "\0\u7bd9\0\u7c2e\0\u7c83\0\u0d48\0\u0d48\0\u0d48\0\u7cd8\0\u0d48"+
    "\0\u0d48\0\u7d2d\0\u7d82\0\u7dd7\0\u7e2c\0\u1298\0\u1298\0\u7e81"+
    "\0\u7ed6\0\u7f2b\0\u7f80\0\u7fd5\0\u1298\0\u802a\0\u807f\0\u80d4"+
    "\0\u8129\0\u817e\0\u81d3\0\u1298\0\u4e5c\0\u8228\0\u0352\0\u827d"+
    "\0\u82d2\0\u8327\0\u837c\0\u0352\0\u83d1\0\u8426\0\u847b\0\u0352"+
    "\0\u84d0\0\u0352\0\u0af5\0\u0af5\0\u8525\0\u0d48\0\u857a\0\u0d48"+
    "\0\u85cf\0\u0352\0\u8624\0\u8679\0\u86ce\0\u8723\0\u8778\0\u87cd"+
    "\0\u1298\0\u8822\0\u1298\0\u8877\0\u1298\0\u1298\0\u88cc\0\u1298"+
    "\0\u0352\0\u0352\0\u8921\0\u0352\0\u8976\0\u89cb\0\u8a20\0\u8a75"+
    "\0\u8aca\0\u0d48\0\u8b1f\0\u8b74\0\u8bc9\0\u8c1e\0\u8c73\0\u8cc8"+
    "\0\u8d1d\0\u8d72\0\u8dc7\0\u8e1c\0\u8e71\0\u8ec6\0\u8f1b\0\u8f70"+
    "\0\u0352\0\u8fc5\0\u901a\0\u906f\0\u90c4\0\u9119\0\u916e\0\u91c3"+
    "\0\u9218\0\u1298\0\u926d\0\u92c2\0\u0352\0\u0352\0\u9317\0\u0352"+
    "\0\u09a1\0\u1298\0\u936c\0\u93c1\0\u9416\0\u1298\0\u946b\0\u94c0"+
    "\0\u0352\0\u0352\0\u9515\0\u1298\0\u956a\0\u95bf\0\u9614\0\u9669"+
    "\0\u1298\0\u96be\0\u9713\0\u9768\0\u1298\0\u97bd\0\u9812\0\u1298"+
    "\0\u9867\0\u98bc\0\u9911\0\u1298";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[588];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\3\10\1\11\22\7\1\12\75\7\1\13\3\14"+
    "\1\15\14\13\1\16\5\13\1\17\1\13\1\20\3\13"+
    "\1\21\25\13\1\22\4\13\1\21\35\13\3\14\1\15"+
    "\1\23\21\13\1\17\1\24\33\13\1\25\1\13\1\26"+
    "\1\27\1\30\2\13\1\31\1\13\1\32\1\33\4\13"+
    "\1\34\1\35\2\13\1\36\1\37\1\40\2\13\1\41"+
    "\11\13\3\14\1\15\1\42\1\43\1\44\7\13\1\45"+
    "\1\46\1\13\1\47\2\50\2\13\1\17\3\13\1\51"+
    "\1\52\1\53\3\52\1\54\15\52\1\55\3\52\2\13"+
    "\1\44\1\56\1\57\1\60\2\61\1\62\1\63\1\64"+
    "\1\61\1\65\1\61\1\66\1\67\1\70\1\71\1\72"+
    "\1\61\1\73\1\74\1\75\4\61\1\76\1\61\4\13"+
    "\1\46\1\13\3\14\1\15\6\13\1\77\1\100\4\13"+
    "\1\16\5\13\1\101\1\13\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\2\105\1\111\1\112\2\105\1\113"+
    "\1\105\1\114\1\115\1\116\1\117\1\105\1\120\2\105"+
    "\1\121\2\105\1\122\1\123\1\13\1\105\1\124\1\125"+
    "\1\126\1\105\1\127\1\130\1\105\1\131\11\105\1\132"+
    "\1\133\6\105\11\13\1\134\4\13\1\135\1\136\1\77"+
    "\1\100\1\137\1\140\1\141\1\13\1\16\3\13\1\142"+
    "\1\143\1\144\1\145\1\146\66\13\1\147\1\150\1\151"+
    "\2\13\27\7\1\0\76\7\3\10\23\7\1\0\101\7"+
    "\1\152\22\7\1\0\75\7\4\0\1\153\246\0\3\14"+
    "\125\0\1\154\205\0\1\155\140\0\1\156\111\0\1\157"+
    "\137\0\1\160\2\0\1\161\124\0\1\162\112\0\1\163"+
    "\14\0\1\164\106\0\1\165\121\0\1\166\141\0\1\167"+
    "\125\0\1\170\127\0\1\171\107\0\1\172\23\0\1\173"+
    "\104\0\1\174\50\0\3\175\6\0\6\175\25\0\6\175"+
    "\40\0\1\44\7\0\1\44\2\0\3\44\6\0\30\44"+
    "\2\0\33\44\3\0\2\44\7\0\1\44\7\0\1\45"+
    "\1\176\1\0\3\45\6\0\30\44\2\0\1\44\32\45"+
    "\3\0\1\44\1\45\17\0\1\177\1\176\1\0\3\177"+
    "\41\0\32\177\4\0\1\177\10\0\1\200\6\0\1\177"+
    "\1\176\1\0\3\177\41\0\17\177\1\201\12\177\4\0"+
    "\1\177\10\0\1\200\6\0\1\177\1\176\1\0\3\50"+
    "\41\0\17\177\1\201\12\177\4\0\1\177\22\0\3\52"+
    "\6\0\30\52\2\0\22\52\1\202\10\52\3\0\2\52"+
    "\22\0\3\52\6\0\30\52\2\0\33\52\3\0\2\52"+
    "\22\0\3\52\6\0\30\52\2\0\17\52\1\203\13\52"+
    "\3\0\2\52\22\0\3\52\6\0\30\52\2\0\5\52"+
    "\1\204\25\52\3\0\2\52\22\0\3\52\6\0\30\52"+
    "\2\0\5\52\1\205\25\52\3\0\2\52\17\0\1\177"+
    "\1\176\1\0\3\61\6\0\30\52\2\0\1\52\20\61"+
    "\1\206\11\61\3\0\1\52\1\61\17\0\1\177\1\176"+
    "\1\0\3\61\6\0\30\52\2\0\1\52\13\61\1\207"+
    "\16\61\3\0\1\52\1\61\17\0\1\177\1\176\1\0"+
    "\3\61\6\0\30\52\2\0\1\52\4\61\1\210\2\61"+
    "\1\211\6\61\1\212\13\61\3\0\1\52\1\61\17\0"+
    "\1\177\1\176\1\0\3\61\6\0\30\52\2\0\1\52"+
    "\32\61\3\0\1\52\1\61\17\0\1\177\1\176\1\0"+
    "\3\61\6\0\30\52\2\0\1\52\24\61\1\213\5\61"+
    "\3\0\1\52\1\61\17\0\1\177\1\176\1\0\3\61"+
    "\6\0\30\52\2\0\1\52\21\61\1\214\10\61\3\0"+
    "\1\52\1\61\17\0\1\177\1\176\1\0\3\61\6\0"+
    "\30\52\2\0\1\52\23\61\1\215\6\61\3\0\1\52"+
    "\1\61\17\0\1\177\1\176\1\0\3\61\6\0\30\52"+
    "\2\0\1\52\24\61\1\216\5\61\3\0\1\52\1\61"+
    "\17\0\1\177\1\176\1\0\3\61\6\0\30\52\2\0"+
    "\1\52\4\61\1\217\3\61\1\220\21\61\3\0\1\52"+
    "\1\61\17\0\1\177\1\176\1\0\3\61\6\0\30\52"+
    "\2\0\1\52\1\221\31\61\3\0\1\52\1\61\17\0"+
    "\1\177\1\176\1\0\3\61\6\0\30\52\2\0\1\52"+
    "\1\222\23\61\1\223\5\61\3\0\1\52\1\61\17\0"+
    "\1\177\1\176\1\0\3\61\6\0\30\52\2\0\1\52"+
    "\13\61\1\224\16\61\3\0\1\52\1\61\17\0\1\177"+
    "\1\176\1\0\3\61\6\0\30\52\2\0\1\52\24\61"+
    "\1\225\5\61\3\0\1\52\1\61\17\0\1\177\1\176"+
    "\1\0\3\61\6\0\30\52\2\0\1\52\1\226\3\61"+
    "\1\227\3\61\1\230\5\61\1\231\13\61\3\0\1\52"+
    "\1\61\17\0\1\177\1\176\1\0\3\61\6\0\30\52"+
    "\2\0\1\52\1\232\7\61\1\233\21\61\3\0\1\52"+
    "\1\61\17\0\1\177\1\176\1\0\3\61\6\0\30\52"+
    "\2\0\1\52\4\61\1\234\25\61\3\0\1\52\1\61"+
    "\17\0\1\177\1\176\1\0\3\61\6\0\30\52\2\0"+
    "\1\52\4\61\1\235\25\61\3\0\1\52\1\61\74\0"+
    "\1\236\52\0\3\105\6\0\13\105\1\237\5\105\1\240"+
    "\6\105\2\0\33\105\3\0\2\105\22\0\3\105\6\0"+
    "\30\105\2\0\33\105\3\0\2\105\22\0\3\105\6\0"+
    "\1\241\27\105\2\0\1\242\32\105\3\0\2\105\22\0"+
    "\3\105\6\0\4\105\1\243\23\105\2\0\33\105\3\0"+
    "\2\105\22\0\3\105\6\0\13\105\1\244\1\105\1\245"+
    "\10\105\1\246\1\105\2\0\33\105\3\0\2\105\22\0"+
    "\3\105\6\0\23\105\1\247\4\105\2\0\33\105\3\0"+
    "\2\105\22\0\3\105\6\0\5\105\1\250\7\105\1\251"+
    "\12\105\2\0\33\105\3\0\2\105\22\0\3\105\6\0"+
    "\4\105\1\252\23\105\2\0\33\105\3\0\2\105\22\0"+
    "\3\105\6\0\23\105\1\253\4\105\2\0\33\105\3\0"+
    "\2\105\22\0\3\105\6\0\15\105\1\254\12\105\2\0"+
    "\33\105\3\0\2\105\22\0\3\105\6\0\20\105\1\255"+
    "\7\105\2\0\33\105\3\0\2\105\22\0\3\105\6\0"+
    "\4\105\1\256\23\105\2\0\33\105\3\0\2\105\22\0"+
    "\3\105\6\0\7\105\1\257\20\105\2\0\33\105\3\0"+
    "\2\105\22\0\3\105\6\0\7\105\1\260\20\105\2\0"+
    "\33\105\3\0\2\105\22\0\3\105\6\0\30\105\2\0"+
    "\17\105\1\261\13\105\3\0\2\105\22\0\3\105\6\0"+
    "\30\105\2\0\1\242\7\105\1\262\22\105\3\0\2\105"+
    "\22\0\3\105\6\0\30\105\2\0\5\105\1\263\25\105"+
    "\3\0\2\105\22\0\3\105\6\0\30\105\2\0\1\105"+
    "\1\264\31\105\3\0\2\105\22\0\3\105\6\0\30\105"+
    "\2\0\5\105\1\265\25\105\3\0\2\105\22\0\3\105"+
    "\6\0\30\105\2\0\16\105\1\266\14\105\3\0\2\105"+
    "\22\0\3\105\6\0\30\105\2\0\24\105\1\267\6\105"+
    "\3\0\2\105\22\0\3\105\6\0\30\105\2\0\22\105"+
    "\1\270\10\105\3\0\2\105\30\0\1\271\105\0\1\272"+
    "\143\0\1\273\124\0\1\274\124\0\1\275\215\0\1\276"+
    "\3\0\2\152\1\7\24\152\1\154\75\152\17\0\1\277"+
    "\105\0\2\154\1\0\122\154\34\0\1\300\1\0\1\301"+
    "\2\0\1\302\1\303\1\304\2\0\1\305\2\0\1\306"+
    "\1\307\1\0\1\310\1\311\11\0\1\300\1\0\1\301"+
    "\2\0\1\302\1\303\1\304\2\0\1\305\2\0\1\306"+
    "\1\307\2\0\1\310\1\311\124\0\1\312\103\0\1\313"+
    "\122\0\1\314\137\0\1\315\126\0\1\316\117\0\1\317"+
    "\120\0\1\320\134\0\1\321\112\0\1\322\150\0\1\323"+
    "\100\0\1\324\151\0\1\325\114\0\1\326\110\0\1\327"+
    "\55\0\3\330\6\0\6\330\25\0\6\330\34\0\1\176"+
    "\13\0\6\176\6\0\30\176\2\0\33\176\3\0\2\176"+
    "\17\0\1\177\1\176\1\0\3\177\41\0\27\177\1\331"+
    "\2\177\4\0\1\177\22\0\3\52\6\0\30\52\2\0"+
    "\11\52\1\332\21\52\3\0\2\52\22\0\3\52\6\0"+
    "\30\52\2\0\25\52\1\333\5\52\3\0\2\52\22\0"+
    "\3\52\6\0\30\52\2\0\16\52\1\334\14\52\3\0"+
    "\2\52\22\0\3\52\6\0\30\52\2\0\22\52\1\335"+
    "\10\52\3\0\2\52\17\0\1\177\1\176\1\0\3\61"+
    "\6\0\30\52\2\0\1\52\24\61\1\336\5\61\3\0"+
    "\1\52\1\61\17\0\1\177\1\176\1\0\3\61\6\0"+
    "\30\52\2\0\1\52\1\337\23\61\1\340\5\61\3\0"+
    "\1\52\1\61\17\0\1\177\1\176\1\0\3\61\6\0"+
    "\30\52\2\0\1\52\15\61\1\341\14\61\3\0\1\52"+
    "\1\61\17\0\1\177\1\176\1\0\3\61\6\0\30\52"+
    "\2\0\1\52\4\61\1\342\25\61\3\0\1\52\1\61"+
    "\17\0\1\177\1\176\1\0\3\61\6\0\30\52\2\0"+
    "\1\52\13\61\1\343\16\61\3\0\1\52\1\61\17\0"+
    "\1\177\1\176\1\0\3\61\6\0\30\52\2\0\1\52"+
    "\2\61\1\344\27\61\3\0\1\52\1\61\17\0\1\177"+
    "\1\176\1\0\3\61\6\0\30\52\2\0\1\52\1\345"+
    "\3\61\1\346\25\61\3\0\1\52\1\61\17\0\1\177"+
    "\1\176\1\0\3\61\6\0\30\52\2\0\1\52\23\61"+
    "\1\347\6\61\3\0\1\52\1\61\17\0\1\177\1\176"+
    "\1\0\3\61\6\0\30\52\2\0\1\52\22\61\1\350"+
    "\7\61\3\0\1\52\1\61\17\0\1\177\1\176\1\0"+
    "\3\61\6\0\30\52\2\0\1\52\5\61\1\351\24\61"+
    "\3\0\1\52\1\61\17\0\1\177\1\176\1\0\3\61"+
    "\6\0\30\52\2\0\1\52\14\61\1\352\15\61\3\0"+
    "\1\52\1\61\17\0\1\177\1\176\1\0\3\61\6\0"+
    "\30\52\2\0\1\52\21\61\1\353\10\61\3\0\1\52"+
    "\1\61\17\0\1\177\1\176\1\0\3\61\6\0\30\52"+
    "\2\0\1\52\25\61\1\354\4\61\3\0\1\52\1\61"+
    "\17\0\1\177\1\176\1\0\3\61\6\0\30\52\2\0"+
    "\1\52\14\61\1\355\15\61\3\0\1\52\1\61\17\0"+
    "\1\177\1\176\1\0\3\61\6\0\30\52\2\0\1\52"+
    "\10\61\1\356\21\61\3\0\1\52\1\61\17\0\1\177"+
    "\1\176\1\0\3\61\6\0\30\52\2\0\1\52\21\61"+
    "\1\357\10\61\3\0\1\52\1\61\17\0\1\177\1\176"+
    "\1\0\3\61\6\0\30\52\2\0\1\52\3\61\1\360"+
    "\26\61\3\0\1\52\1\61\17\0\1\177\1\176\1\0"+
    "\3\61\6\0\30\52\2\0\1\52\3\61\1\361\26\61"+
    "\3\0\1\52\1\61\17\0\1\177\1\176\1\0\3\61"+
    "\6\0\30\52\2\0\1\52\6\61\1\362\23\61\3\0"+
    "\1\52\1\61\17\0\1\177\1\176\1\0\3\61\6\0"+
    "\30\52\2\0\1\52\26\61\1\363\3\61\3\0\1\52"+
    "\1\61\17\0\1\177\1\176\1\0\3\61\6\0\30\52"+
    "\2\0\1\52\15\61\1\364\14\61\3\0\1\52\1\61"+
    "\17\0\1\177\1\176\1\0\3\61\6\0\30\52\2\0"+
    "\1\52\13\61\1\365\16\61\3\0\1\52\1\61\17\0"+
    "\1\177\1\176\1\0\3\61\6\0\30\52\2\0\1\52"+
    "\1\366\26\61\1\367\2\61\3\0\1\52\1\61\17\0"+
    "\1\177\1\176\1\0\3\61\6\0\30\52\2\0\1\52"+
    "\13\61\1\370\16\61\3\0\1\52\1\61\101\0\1\371"+
    "\45\0\3\105\6\0\4\105\1\372\23\105\2\0\33\105"+
    "\3\0\2\105\22\0\3\105\6\0\2\105\1\373\25\105"+
    "\2\0\33\105\3\0\2\105\22\0\3\105\6\0\20\105"+
    "\1\374\7\105\2\0\33\105\3\0\2\105\22\0\3\105"+
    "\6\0\21\105\1\375\6\105\2\0\23\105\1\375\7\105"+
    "\3\0\2\105\22\0\3\105\6\0\21\105\1\376\6\105"+
    "\2\0\33\105\3\0\2\105\22\0\3\105\6\0\21\105"+
    "\1\377\6\105\2\0\33\105\3\0\2\105\22\0\3\105"+
    "\6\0\3\105\1\u0100\24\105\2\0\33\105\3\0\2\105"+
    "\22\0\3\105\6\0\10\105\1\u0101\17\105\2\0\33\105"+
    "\3\0\2\105\22\0\3\105\6\0\15\105\1\u0102\12\105"+
    "\2\0\33\105\3\0\2\105\22\0\3\105\6\0\10\105"+
    "\1\u0103\10\105\1\u0104\6\105\2\0\33\105\3\0\2\105"+
    "\22\0\3\105\6\0\22\105\1\u0105\5\105\2\0\33\105"+
    "\3\0\2\105\22\0\3\105\6\0\14\105\1\u0106\13\105"+
    "\2\0\33\105\3\0\2\105\22\0\3\105\6\0\30\105"+
    "\2\0\1\u0107\32\105\3\0\2\105\22\0\3\105\6\0"+
    "\16\105\1\u0108\11\105\2\0\33\105\3\0\2\105\22\0"+
    "\3\105\6\0\17\105\1\u0109\4\105\1\u010a\3\105\2\0"+
    "\33\105\3\0\2\105\22\0\3\105\6\0\4\105\1\u010b"+
    "\23\105\2\0\33\105\3\0\2\105\22\0\3\105\6\0"+
    "\10\105\1\u010c\17\105\2\0\33\105\3\0\2\105\22\0"+
    "\3\105\6\0\30\105\2\0\17\105\1\u010d\13\105\3\0"+
    "\2\105\22\0\3\105\6\0\30\105\2\0\1\105\1\u010e"+
    "\31\105\3\0\2\105\22\0\3\105\6\0\30\105\2\0"+
    "\3\105\1\u010f\27\105\3\0\2\105\22\0\3\105\6\0"+
    "\30\105\2\0\14\105\1\u0110\16\105\3\0\2\105\22\0"+
    "\3\105\6\0\30\105\2\0\24\105\1\u0111\6\105\3\0"+
    "\2\105\22\0\3\105\6\0\30\105\2\0\24\105\1\u0112"+
    "\6\105\3\0\2\105\22\0\3\105\6\0\30\105\2\0"+
    "\22\105\1\u0113\10\105\3\0\2\105\22\0\3\105\6\0"+
    "\30\105\2\0\25\105\1\u0114\5\105\3\0\2\105\17\0"+
    "\1\u0115\156\0\1\u0116\1\0\1\u0117\2\0\1\u0118\25\0"+
    "\1\u0116\2\0\1\u0117\2\0\1\u0118\55\0\1\u0119\32\0"+
    "\1\u0119\63\0\1\u011a\32\0\1\u011a\57\0\1\u011b\13\0"+
    "\1\u011c\32\0\1\u011c\101\0\1\u011d\1\u011e\31\0\1\u011d"+
    "\1\u011e\64\0\1\u011f\32\0\1\u011f\100\0\1\u0120\32\0"+
    "\1\u0120\54\0\1\u0121\1\0\1\u0122\12\0\1\u0123\15\0"+
    "\1\u0121\1\0\1\u0122\12\0\1\u0123\56\0\1\u0124\3\0"+
    "\1\u0125\26\0\1\u0124\3\0\1\u0125\126\0\1\u0126\134\0"+
    "\1\u0127\120\0\1\u0128\3\0\1\u0129\125\0\1\u012a\107\0"+
    "\1\u012b\123\0\1\u012c\123\0\1\u012d\133\0\1\u012e\133\0"+
    "\1\u012f\125\0\1\u0130\105\0\1\u0131\143\0\1\u0132\35\0"+
    "\3\u0133\6\0\6\u0133\25\0\6\u0133\53\0\3\52\6\0"+
    "\30\52\2\0\1\52\1\u0134\31\52\3\0\2\52\22\0"+
    "\3\52\6\0\30\52\2\0\22\52\1\u0135\10\52\3\0"+
    "\2\52\22\0\3\52\6\0\30\52\2\0\5\52\1\u0136"+
    "\25\52\3\0\2\52\22\0\3\52\6\0\30\52\2\0"+
    "\4\52\1\u0137\26\52\3\0\2\52\17\0\1\177\1\176"+
    "\1\0\3\61\6\0\30\52\2\0\1\52\1\u0138\31\61"+
    "\3\0\1\52\1\61\17\0\1\177\1\176\1\0\3\61"+
    "\6\0\30\52\2\0\1\52\2\61\1\u0139\27\61\3\0"+
    "\1\52\1\61\17\0\1\177\1\176\1\0\3\61\6\0"+
    "\30\52\2\0\1\52\4\61\1\u013a\25\61\3\0\1\52"+
    "\1\61\17\0\1\177\1\176\1\0\3\61\6\0\30\52"+
    "\2\0\1\52\23\61\1\u013b\6\61\3\0\1\52\1\61"+
    "\17\0\1\177\1\176\1\0\3\61\6\0\30\52\2\0"+
    "\1\52\2\61\1\u013c\27\61\3\0\1\52\1\61\17\0"+
    "\1\177\1\176\1\0\3\61\6\0\30\52\2\0\1\52"+
    "\24\61\1\u013d\5\61\3\0\1\52\1\61\17\0\1\177"+
    "\1\176\1\0\3\61\6\0\30\52\2\0\1\52\7\61"+
    "\1\u013e\22\61\3\0\1\52\1\61\17\0\1\177\1\176"+
    "\1\0\3\61\6\0\30\52\2\0\1\52\30\61\1\u013f"+
    "\1\61\3\0\1\52\1\61\17\0\1\177\1\176\1\0"+
    "\3\61\6\0\30\52\2\0\1\52\4\61\1\u0140\25\61"+
    "\3\0\1\52\1\61\17\0\1\177\1\176\1\0\3\61"+
    "\6\0\30\52\2\0\1\52\17\61\1\u0141\12\61\3\0"+
    "\1\52\1\61\17\0\1\177\1\176\1\0\3\61\6\0"+
    "\30\52\2\0\1\52\23\61\1\u0142\6\61\3\0\1\52"+
    "\1\61\17\0\1\177\1\176\1\0\3\61\6\0\30\52"+
    "\2\0\1\52\23\61\1\u0143\6\61\3\0\1\52\1\61"+
    "\17\0\1\177\1\176\1\0\3\61\6\0\30\52\2\0"+
    "\1\52\4\61\1\u0144\25\61\3\0\1\52\1\61\17\0"+
    "\1\177\1\176\1\0\3\61\6\0\30\52\2\0\1\52"+
    "\21\61\1\u0145\10\61\3\0\1\52\1\61\17\0\1\177"+
    "\1\176\1\0\3\61\6\0\30\52\2\0\1\52\30\61"+
    "\1\u0146\1\61\3\0\1\52\1\61\17\0\1\177\1\176"+
    "\1\0\3\61\6\0\30\52\2\0\1\52\1\61\1\u0147"+
    "\30\61\3\0\1\52\1\61\17\0\1\177\1\176\1\0"+
    "\3\61\6\0\30\52\2\0\1\52\25\61\1\u0148\4\61"+
    "\3\0\1\52\1\61\17\0\1\177\1\176\1\0\3\61"+
    "\6\0\30\52\2\0\1\52\17\61\1\u0149\12\61\3\0"+
    "\1\52\1\61\17\0\1\177\1\176\1\0\3\61\6\0"+
    "\30\52\2\0\1\52\10\61\1\u014a\21\61\3\0\1\52"+
    "\1\61\17\0\1\177\1\176\1\0\3\61\6\0\30\52"+
    "\2\0\1\52\7\61\1\u014b\22\61\3\0\1\52\1\61"+
    "\17\0\1\177\1\176\1\0\3\61\6\0\30\52\2\0"+
    "\1\52\22\61\1\u014c\7\61\3\0\1\52\1\61\17\0"+
    "\1\177\1\176\1\0\3\61\6\0\30\52\2\0\1\52"+
    "\25\61\1\u014d\4\61\3\0\1\52\1\61\17\0\1\177"+
    "\1\176\1\0\3\61\6\0\30\52\2\0\1\52\13\61"+
    "\1\u014e\16\61\3\0\1\52\1\61\17\0\1\177\1\176"+
    "\1\0\3\61\6\0\30\52\2\0\1\52\23\61\1\u014f"+
    "\6\61\3\0\1\52\1\61\17\0\1\177\1\176\1\0"+
    "\3\61\6\0\30\52\2\0\1\52\13\61\1\u0150\16\61"+
    "\3\0\1\52\1\61\104\0\1\u0151\42\0\3\105\6\0"+
    "\20\105\1\u0152\7\105\2\0\33\105\3\0\2\105\22\0"+
    "\3\105\6\0\1\u0153\27\105\2\0\33\105\3\0\2\105"+
    "\22\0\3\105\6\0\2\105\1\u0154\25\105\2\0\3\105"+
    "\1\u0154\27\105\3\0\2\105\22\0\3\105\6\0\2\105"+
    "\1\u0155\25\105\2\0\33\105\3\0\2\105\22\0\3\105"+
    "\6\0\4\105\1\u0156\23\105\2\0\33\105\3\0\2\105"+
    "\22\0\3\105\6\0\22\105\1\u0157\5\105\2\0\33\105"+
    "\3\0\2\105\22\0\3\105\6\0\22\105\1\u0158\5\105"+
    "\2\0\33\105\3\0\2\105\22\0\3\105\6\0\22\105"+
    "\1\u0159\5\105\2\0\33\105\3\0\2\105\22\0\3\105"+
    "\6\0\4\105\1\u015a\23\105\2\0\33\105\3\0\2\105"+
    "\22\0\3\105\6\0\10\105\1\u015b\6\105\1\u015c\10\105"+
    "\2\0\33\105\3\0\2\105\22\0\3\105\6\0\30\105"+
    "\2\0\1\u015d\32\105\3\0\2\105\22\0\3\105\6\0"+
    "\13\105\1\u015e\14\105\2\0\33\105\3\0\2\105\22\0"+
    "\3\105\6\0\2\105\1\u015f\25\105\2\0\33\105\3\0"+
    "\2\105\22\0\3\105\6\0\4\105\1\u0160\23\105\2\0"+
    "\33\105\3\0\2\105\22\0\3\105\6\0\4\105\1\u0161"+
    "\23\105\2\0\33\105\3\0\2\105\22\0\3\105\6\0"+
    "\15\105\1\u0162\12\105\2\0\33\105\3\0\2\105\22\0"+
    "\3\105\6\0\13\105\1\u0163\14\105\2\0\33\105\3\0"+
    "\2\105\22\0\3\105\6\0\30\105\2\0\14\105\1\u0164"+
    "\16\105\3\0\2\105\22\0\3\105\6\0\30\105\2\0"+
    "\22\105\1\u0165\10\105\3\0\2\105\22\0\3\105\6\0"+
    "\30\105\2\0\11\105\1\u0166\21\105\3\0\2\105\22\0"+
    "\3\105\6\0\30\105\2\0\23\105\1\u0167\7\105\3\0"+
    "\2\105\22\0\3\105\6\0\4\105\1\u0168\23\105\2\0"+
    "\33\105\3\0\2\105\22\0\3\105\6\0\30\105\2\0"+
    "\5\105\1\u0169\25\105\3\0\2\105\22\0\3\105\6\0"+
    "\30\105\2\0\11\105\1\u016a\21\105\3\0\2\105\22\0"+
    "\3\105\6\0\30\105\2\0\5\105\1\u016b\25\105\3\0"+
    "\2\105\17\u0115\1\u016c\17\u0115\2\0\10\u0115\1\0\53\u0115"+
    "\36\0\1\u016d\32\0\1\u016d\110\0\1\u016e\33\0\1\u016e"+
    "\72\0\1\u016f\33\0\1\u016f\54\0\1\u0170\32\0\1\u0170"+
    "\61\0\1\u0171\32\0\1\u0171\77\0\1\u0172\32\0\1\u0172"+
    "\102\0\1\u0173\32\0\1\u0173\67\0\1\u0174\32\0\1\u0174"+
    "\76\0\1\u0175\33\0\1\u0175\66\0\1\u0176\33\0\1\u0176"+
    "\63\0\1\u0177\32\0\1\u0177\56\0\1\u0178\32\0\1\u0178"+
    "\117\0\1\u0179\33\0\1\u0179\64\0\1\u017a\33\0\1\u017a"+
    "\107\0\1\u017b\140\0\1\u017c\123\0\1\u017d\34\0\1\u017e"+
    "\202\0\1\u017f\125\0\1\u0180\45\0\1\u0181\202\0\1\u0182"+
    "\51\0\3\u0183\6\0\6\u0183\25\0\6\u0183\53\0\3\52"+
    "\6\0\30\52\2\0\14\52\1\u0184\16\52\3\0\2\52"+
    "\22\0\3\52\6\0\30\52\2\0\11\52\1\u0185\21\52"+
    "\3\0\2\52\22\0\3\52\6\0\30\52\2\0\26\52"+
    "\1\u0186\4\52\3\0\2\52\22\0\3\52\6\0\30\52"+
    "\2\0\1\52\1\u0187\31\52\3\0\2\52\17\0\1\177"+
    "\1\176\1\0\3\61\6\0\30\52\2\0\1\52\12\61"+
    "\1\u0188\17\61\3\0\1\52\1\61\17\0\1\177\1\176"+
    "\1\0\3\61\6\0\30\52\2\0\1\52\4\61\1\u0189"+
    "\25\61\3\0\1\52\1\61\17\0\1\177\1\176\1\0"+
    "\3\61\6\0\30\52\2\0\1\52\12\61\1\u018a\17\61"+
    "\3\0\1\52\1\61\17\0\1\177\1\176\1\0\3\61"+
    "\6\0\30\52\2\0\1\52\14\61\1\u018b\15\61\3\0"+
    "\1\52\1\61\17\0\1\177\1\176\1\0\3\61\6\0"+
    "\30\52\2\0\1\52\22\61\1\u018c\7\61\3\0\1\52"+
    "\1\61\17\0\1\177\1\176\1\0\3\61\6\0\30\52"+
    "\2\0\1\52\15\61\1\u018d\14\61\3\0\1\52\1\61"+
    "\17\0\1\177\1\176\1\0\3\61\1\u018e\5\0\30\52"+
    "\2\0\1\52\22\61\1\u018f\7\61\3\0\1\52\1\61"+
    "\17\0\1\177\1\176\1\0\3\61\6\0\30\52\2\0"+
    "\1\52\10\61\1\u0190\21\61\3\0\1\52\1\61\17\0"+
    "\1\177\1\176\1\0\3\61\6\0\30\52\2\0\1\52"+
    "\16\61\1\u0191\13\61\3\0\1\52\1\61\17\0\1\177"+
    "\1\176\1\0\3\61\6\0\30\52\2\0\1\52\4\61"+
    "\1\u0192\25\61\3\0\1\52\1\61\17\0\1\177\1\176"+
    "\1\0\3\61\6\0\30\52\2\0\1\52\4\61\1\u0193"+
    "\25\61\3\0\1\52\1\61\17\0\1\177\1\176\1\0"+
    "\3\61\6\0\30\52\2\0\1\52\13\61\1\u0194\16\61"+
    "\3\0\1\52\1\61\17\0\1\177\1\176\1\0\3\61"+
    "\6\0\30\52\2\0\1\52\16\61\1\u0195\13\61\3\0"+
    "\1\52\1\61\17\0\1\177\1\176\1\0\3\61\6\0"+
    "\30\52\2\0\1\52\23\61\1\u0196\6\61\3\0\1\52"+
    "\1\61\17\0\1\u0197\1\176\1\0\3\61\6\0\30\52"+
    "\2\0\1\52\32\61\3\0\1\52\1\61\17\0\1\177"+
    "\1\176\1\0\3\61\6\0\30\52\2\0\1\52\4\61"+
    "\1\u0198\25\61\3\0\1\52\1\61\17\0\1\177\1\176"+
    "\1\0\3\61\6\0\30\52\2\0\1\52\16\61\1\u0199"+
    "\13\61\3\0\1\52\1\61\67\0\1\u019a\57\0\3\105"+
    "\6\0\22\105\1\u019b\5\105\2\0\33\105\3\0\2\105"+
    "\22\0\3\105\6\0\2\105\1\u019c\25\105\2\0\33\105"+
    "\3\0\2\105\22\0\3\105\6\0\20\105\1\u019d\7\105"+
    "\2\0\22\105\1\u019d\10\105\3\0\2\105\22\0\3\105"+
    "\6\0\10\105\1\u019e\17\105\2\0\33\105\3\0\2\105"+
    "\22\0\3\105\6\0\20\105\1\u019f\7\105\2\0\33\105"+
    "\3\0\2\105\22\0\3\105\6\0\14\105\1\u01a0\13\105"+
    "\2\0\33\105\3\0\2\105\22\0\3\105\6\0\1\u01a1"+
    "\27\105\2\0\33\105\3\0\2\105\22\0\3\105\6\0"+
    "\1\u01a2\27\105\2\0\33\105\3\0\2\105\22\0\3\105"+
    "\6\0\16\105\1\u01a3\11\105\2\0\33\105\3\0\2\105"+
    "\22\0\3\105\6\0\4\105\1\u01a4\23\105\2\0\33\105"+
    "\3\0\2\105\22\0\3\105\6\0\1\u01a5\27\105\2\0"+
    "\33\105\3\0\2\105\22\0\3\105\6\0\20\105\1\u01a6"+
    "\7\105\2\0\33\105\3\0\2\105\22\0\3\105\6\0"+
    "\25\105\1\u01a7\2\105\2\0\33\105\3\0\2\105\22\0"+
    "\3\105\6\0\4\105\1\u01a8\23\105\2\0\33\105\3\0"+
    "\2\105\22\0\3\105\6\0\30\105\2\0\5\105\1\u01a9"+
    "\25\105\3\0\2\105\22\0\3\105\6\0\30\105\2\0"+
    "\15\105\1\u01aa\15\105\3\0\2\105\22\0\3\105\6\0"+
    "\30\105\2\0\5\105\1\u01ab\25\105\3\0\2\105\22\0"+
    "\3\105\6\0\30\105\2\0\14\105\1\u01ac\16\105\3\0"+
    "\2\105\22\0\3\105\6\0\30\105\2\0\7\105\1\u01ad"+
    "\23\105\3\0\2\105\22\0\3\105\6\0\30\105\2\0"+
    "\16\105\1\u01ae\14\105\3\0\2\105\17\u0115\1\u01af\17\u0115"+
    "\2\0\10\u0115\1\0\53\u0115\62\0\1\u01b0\33\0\1\u01b0"+
    "\63\0\1\u01b1\33\0\1\u01b1\50\0\1\u01b2\32\0\1\u01b2"+
    "\72\0\1\u01b3\32\0\1\u01b3\111\0\1\u01b4\33\0\1\u01b4"+
    "\57\0\1\u01b5\32\0\1\u01b5\67\0\1\u01b6\32\0\1\u01b6"+
    "\71\0\1\u01b7\32\0\1\u01b7\65\0\1\u01b8\32\0\1\u01b8"+
    "\101\0\1\u01b9\32\0\1\u01b9\77\0\1\u01ba\33\0\1\u01ba"+
    "\61\0\1\u01bb\32\0\1\u01bb\132\0\1\u01bc\110\0\1\u01bd"+
    "\14\0\1\u01be\125\0\1\u01bf\103\0\1\u01c0\122\0\1\u01c1"+
    "\60\0\3\u01c2\6\0\6\u01c2\25\0\6\u01c2\53\0\3\52"+
    "\6\0\30\52\2\0\5\52\1\u01c3\25\52\3\0\2\52"+
    "\22\0\3\52\6\0\30\52\2\0\1\52\1\u01c4\31\52"+
    "\3\0\2\52\22\0\3\52\6\0\30\52\2\0\16\52"+
    "\1\u01c5\14\52\3\0\2\52\17\0\1\177\1\176\1\0"+
    "\3\61\6\0\30\52\2\0\1\52\21\61\1\u01c6\10\61"+
    "\3\0\1\52\1\61\17\0\1\177\1\176\1\0\3\61"+
    "\6\0\30\52\2\0\1\52\1\61\1\u01c7\30\61\3\0"+
    "\1\52\1\61\17\0\1\177\1\176\1\0\3\61\6\0"+
    "\30\52\2\0\1\52\15\61\1\u01c8\14\61\3\0\1\52"+
    "\1\61\17\0\1\177\1\176\1\0\3\61\6\0\30\52"+
    "\2\0\1\52\10\61\1\u01c9\21\61\3\0\1\52\1\61"+
    "\21\0\1\u01ca\122\0\1\177\1\176\1\0\3\61\1\u018e"+
    "\5\0\30\52\2\0\1\52\32\61\3\0\1\52\1\61"+
    "\17\0\1\177\1\176\1\0\3\61\6\0\30\52\2\0"+
    "\1\52\5\61\1\u01cb\24\61\3\0\1\52\1\61\17\0"+
    "\1\177\1\176\1\0\3\61\6\0\30\52\2\0\1\52"+
    "\15\61\1\u01cc\14\61\3\0\1\52\1\61\17\0\1\177"+
    "\1\176\1\0\3\61\6\0\30\52\2\0\1\52\21\61"+
    "\1\u01cd\10\61\3\0\1\52\1\61\17\0\1\177\1\176"+
    "\1\0\3\61\6\0\30\52\2\0\1\52\4\61\1\u01ce"+
    "\25\61\3\0\1\52\1\61\17\0\1\177\1\176\1\0"+
    "\3\177\41\0\22\177\1\u01cf\7\177\4\0\1\177\17\0"+
    "\1\177\1\176\1\0\3\61\6\0\30\52\2\0\1\52"+
    "\21\61\1\u01d0\10\61\3\0\1\52\1\61\17\0\1\177"+
    "\1\176\1\0\3\61\6\0\30\52\2\0\1\52\26\61"+
    "\1\u01d1\3\61\3\0\1\52\1\61\66\0\1\u01d2\60\0"+
    "\3\105\6\0\30\105\2\0\1\u01d3\32\105\3\0\2\105"+
    "\22\0\3\105\6\0\22\105\1\u01d4\5\105\2\0\33\105"+
    "\3\0\2\105\22\0\3\105\6\0\10\105\1\u01d5\17\105"+
    "\2\0\11\105\1\u01d5\21\105\3\0\2\105\22\0\3\105"+
    "\6\0\13\105\1\u01d6\14\105\2\0\33\105\3\0\2\105"+
    "\22\0\3\105\6\0\22\105\1\u01d7\5\105\2\0\33\105"+
    "\3\0\2\105\22\0\3\105\6\0\17\105\1\u01d8\10\105"+
    "\2\0\33\105\3\0\2\105\22\0\3\105\6\0\20\105"+
    "\1\u01d9\7\105\2\0\33\105\3\0\2\105\22\0\3\105"+
    "\6\0\13\105\1\u01da\14\105\2\0\33\105\3\0\2\105"+
    "\22\0\3\105\6\0\1\u01db\27\105\2\0\33\105\3\0"+
    "\2\105\22\0\3\105\6\0\21\105\1\u01dc\6\105\2\0"+
    "\33\105\3\0\2\105\22\0\3\105\6\0\22\105\1\u01dd"+
    "\5\105\2\0\33\105\3\0\2\105\22\0\3\105\6\0"+
    "\21\105\1\u01de\6\105\2\0\33\105\3\0\2\105\22\0"+
    "\3\105\6\0\7\105\1\u01df\20\105\2\0\33\105\3\0"+
    "\2\105\22\0\3\105\6\0\30\105\2\0\1\105\1\u01e0"+
    "\31\105\3\0\2\105\22\0\3\105\6\0\30\105\2\0"+
    "\1\105\1\u01e1\31\105\3\0\2\105\22\0\3\105\6\0"+
    "\30\105\2\0\5\105\1\u01e2\25\105\3\0\2\105\22\0"+
    "\3\105\6\0\30\105\2\0\5\105\1\u01e3\25\105\3\0"+
    "\2\105\22\0\3\105\6\0\30\105\2\0\7\105\1\u01e4"+
    "\23\105\3\0\2\105\17\u0115\1\u01af\11\u0115\1\u01e5\5\u0115"+
    "\2\0\10\u0115\1\0\53\u0115\51\0\1\u01e6\32\0\1\u01e6"+
    "\75\0\1\u01e7\33\0\1\u01e7\64\0\1\u01e8\32\0\1\u01e8"+
    "\72\0\1\u01e9\32\0\1\u01e9\54\0\1\u01ea\32\0\1\u01ea"+
    "\67\0\1\u01eb\32\0\1\u01eb\75\0\1\u01ec\32\0\1\u01ec"+
    "\136\0\1\u01ed\106\0\1\u01ee\134\0\1\u01ef\126\0\1\u01f0"+
    "\125\0\1\u01f1\45\0\3\u01f2\6\0\6\u01f2\25\0\6\u01f2"+
    "\53\0\3\52\6\0\30\52\2\0\22\52\1\u01f3\10\52"+
    "\3\0\2\52\22\0\3\52\6\0\30\52\2\0\1\52"+
    "\1\u01f4\31\52\3\0\2\52\17\0\1\177\1\176\1\0"+
    "\3\61\6\0\30\52\2\0\1\52\16\61\1\u01f5\13\61"+
    "\3\0\1\52\1\61\17\0\1\177\1\176\1\0\3\61"+
    "\6\0\30\52\2\0\1\52\1\u01f6\31\61\3\0\1\52"+
    "\1\61\21\0\1\u01f7\122\0\1\177\1\176\1\0\3\61"+
    "\6\0\30\52\2\0\1\52\30\61\1\u01f8\1\61\3\0"+
    "\1\52\1\61\17\0\1\177\1\176\1\0\3\177\41\0"+
    "\4\177\1\u01f9\25\177\4\0\1\177\101\0\1\u01fa\45\0"+
    "\3\105\6\0\10\105\1\u01fb\17\105\2\0\33\105\3\0"+
    "\2\105\22\0\3\105\6\0\4\105\1\u01fc\23\105\2\0"+
    "\33\105\3\0\2\105\22\0\3\105\6\0\17\105\1\u01fd"+
    "\10\105\2\0\20\105\1\u01fd\12\105\3\0\2\105\22\0"+
    "\3\105\6\0\1\u01fe\27\105\2\0\33\105\3\0\2\105"+
    "\22\0\3\105\6\0\30\105\2\0\1\u01ff\32\105\3\0"+
    "\2\105\22\0\3\105\6\0\4\105\1\u0200\23\105\2\0"+
    "\33\105\3\0\2\105\22\0\3\105\6\0\3\105\1\u0201"+
    "\24\105\2\0\33\105\3\0\2\105\22\0\3\105\6\0"+
    "\21\105\1\u0202\6\105\2\0\33\105\3\0\2\105\22\0"+
    "\3\105\6\0\4\105\1\u0203\23\105\2\0\33\105\3\0"+
    "\2\105\22\0\3\105\6\0\10\105\1\u0204\17\105\2\0"+
    "\33\105\3\0\2\105\22\0\3\105\6\0\30\105\2\0"+
    "\16\105\1\u0205\14\105\3\0\2\105\22\0\3\105\6\0"+
    "\30\105\2\0\14\105\1\u0206\16\105\3\0\2\105\22\0"+
    "\3\105\6\0\30\105\2\0\15\105\1\u0207\15\105\3\0"+
    "\2\105\22\0\3\105\6\0\30\105\2\0\22\105\1\u0208"+
    "\10\105\3\0\2\105\50\0\1\u0209\32\0\1\u0209\71\0"+
    "\1\u020a\32\0\1\u020a\76\0\1\u020b\33\0\1\u020b\70\0"+
    "\1\u020c\33\0\1\u020c\66\0\1\u020d\33\0\1\u020d\127\0"+
    "\1\u020e\114\0\1\u020f\141\0\1\u0210\103\0\1\u0211\45\0"+
    "\1\177\1\176\1\0\3\61\6\0\30\52\2\0\1\52"+
    "\27\61\1\u0212\2\61\3\0\1\52\1\61\17\0\2\177"+
    "\1\0\3\177\41\0\32\177\4\0\1\177\17\0\1\177"+
    "\1\176\1\0\3\177\41\0\21\177\1\u0213\10\177\4\0"+
    "\1\177\22\0\3\105\6\0\15\105\1\u0214\12\105\2\0"+
    "\33\105\3\0\2\105\22\0\3\105\6\0\20\105\1\u0215"+
    "\7\105\2\0\33\105\3\0\2\105\22\0\3\105\6\0"+
    "\22\105\1\u0216\5\105\2\0\24\105\1\u0216\6\105\3\0"+
    "\2\105\22\0\3\105\6\0\20\105\1\u0217\7\105\2\0"+
    "\33\105\3\0\2\105\22\0\3\105\6\0\15\105\1\u0218"+
    "\12\105\2\0\33\105\3\0\2\105\22\0\3\105\6\0"+
    "\1\u0219\27\105\2\0\33\105\3\0\2\105\22\0\3\105"+
    "\6\0\30\105\2\0\1\u021a\32\105\3\0\2\105\22\0"+
    "\3\105\6\0\13\105\1\u021b\14\105\2\0\33\105\3\0"+
    "\2\105\22\0\3\105\6\0\30\105\2\0\5\105\1\u021c"+
    "\25\105\3\0\2\105\43\0\1\u021d\32\0\1\u021d\65\0"+
    "\1\u021e\32\0\1\u021e\135\0\1\u021f\117\0\1\u0220\120\0"+
    "\1\u0221\126\0\1\u0222\47\0\1\177\1\176\1\0\3\177"+
    "\41\0\10\177\1\u0223\21\177\4\0\1\177\22\0\3\105"+
    "\6\0\5\105\1\u0224\22\105\2\0\33\105\3\0\2\105"+
    "\22\0\3\105\6\0\30\105\2\0\1\u0225\32\105\3\0"+
    "\2\105\22\0\3\105\6\0\10\105\1\u0226\17\105\2\0"+
    "\11\105\1\u0226\21\105\3\0\2\105\22\0\3\105\6\0"+
    "\30\105\2\0\1\u0227\32\105\3\0\2\105\22\0\3\105"+
    "\6\0\23\105\1\u0228\4\105\2\0\33\105\3\0\2\105"+
    "\22\0\3\105\6\0\22\105\1\u0229\5\105\2\0\33\105"+
    "\3\0\2\105\22\0\3\u021a\6\0\30\u021a\2\0\33\u021a"+
    "\3\0\2\u021a\22\0\3\105\6\0\4\105\1\u022a\23\105"+
    "\2\0\33\105\3\0\2\105\22\0\3\105\6\0\30\105"+
    "\2\0\16\105\1\u022b\14\105\3\0\2\105\50\0\1\u022c"+
    "\32\0\1\u022c\54\0\1\u022d\32\0\1\u022d\127\0\1\u022e"+
    "\134\0\1\u022f\126\0\1\u0230\40\0\1\177\1\176\1\0"+
    "\3\177\41\0\5\177\1\u0231\24\177\4\0\1\177\22\0"+
    "\3\105\6\0\16\105\1\u0232\11\105\2\0\33\105\3\0"+
    "\2\105\22\0\3\105\6\0\1\u0233\27\105\2\0\33\105"+
    "\3\0\2\105\22\0\3\105\6\0\15\105\1\u0234\12\105"+
    "\2\0\16\105\1\u0234\14\105\3\0\2\105\22\0\3\105"+
    "\6\0\15\105\1\u0235\12\105\2\0\33\105\3\0\2\105"+
    "\22\0\3\105\6\0\14\105\1\u0236\13\105\2\0\33\105"+
    "\3\0\2\105\22\0\3\105\6\0\16\105\1\u0237\11\105"+
    "\2\0\33\105\3\0\2\105\22\0\3\105\6\0\30\105"+
    "\2\0\24\105\1\u0238\6\105\3\0\2\105\41\0\1\u0239"+
    "\32\0\1\u0239\146\0\1\u023a\30\0\3\105\6\0\13\105"+
    "\1\u023b\14\105\2\0\33\105\3\0\2\105\22\0\3\105"+
    "\6\0\6\105\1\u023c\21\105\2\0\7\105\1\u023c\23\105"+
    "\3\0\2\105\22\0\3\105\6\0\23\105\1\u023d\4\105"+
    "\2\0\33\105\3\0\2\105\22\0\3\105\6\0\20\105"+
    "\1\u023e\7\105\2\0\33\105\3\0\2\105\22\0\3\105"+
    "\6\0\1\105\1\u023f\26\105\2\0\33\105\3\0\2\105"+
    "\22\0\3\105\6\0\4\105\1\u0240\23\105\2\0\33\105"+
    "\3\0\2\105\22\0\3\105\6\0\14\105\1\u0241\13\105"+
    "\2\0\33\105\3\0\2\105\22\0\3\105\6\0\10\105"+
    "\1\u0242\17\105\2\0\33\105\3\0\2\105\22\0\3\105"+
    "\6\0\30\105\2\0\31\105\1\u0243\1\105\3\0\2\105"+
    "\22\0\3\105\6\0\1\u0244\27\105\2\0\33\105\3\0"+
    "\2\105\22\0\3\105\6\0\16\105\1\u0245\11\105\2\0"+
    "\33\105\3\0\2\105\22\0\3\105\6\0\10\105\1\u0246"+
    "\17\105\2\0\33\105\3\0\2\105\22\0\3\105\6\0"+
    "\22\105\1\u0247\5\105\2\0\33\105\3\0\2\105\22\0"+
    "\3\105\6\0\30\105\2\0\4\105\1\u0248\26\105\3\0"+
    "\2\105\22\0\3\105\6\0\16\105\1\u0249\11\105\2\0"+
    "\33\105\3\0\2\105\22\0\3\105\6\0\20\105\1\u024a"+
    "\7\105\2\0\33\105\3\0\2\105\22\0\3\105\6\0"+
    "\10\105\1\u024b\17\105\2\0\33\105\3\0\2\105\22\0"+
    "\3\105\6\0\16\105\1\u024c\11\105\2\0\33\105\3\0"+
    "\2\105";

  private static int [] zzUnpackTrans() {
    int [] result = new int[39270];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\4\1\1\11\2\1\1\11\1\1\1\11\1\1"+
    "\4\11\14\1\1\11\34\1\2\11\1\1\1\11\17\1"+
    "\2\11\12\1\6\11\3\1\1\11\1\1\1\11\1\1"+
    "\1\0\1\1\10\0\1\11\10\0\1\1\1\0\1\11"+
    "\1\0\34\1\1\0\32\1\6\11\10\0\1\11\2\0"+
    "\1\11\11\0\1\11\4\0\40\1\1\0\33\1\2\0"+
    "\1\11\3\0\1\11\15\0\1\11\2\0\2\11\1\0"+
    "\1\11\1\0\1\11\1\0\36\1\1\0\32\1\3\0"+
    "\1\11\2\0\1\11\11\0\2\11\4\0\1\11\1\0"+
    "\12\1\1\0\10\1\1\0\2\1\1\0\24\1\1\0"+
    "\1\11\1\0\2\11\1\0\1\11\3\0\1\11\5\0"+
    "\1\11\3\0\7\1\1\0\4\1\1\0\2\1\1\0"+
    "\23\1\1\0\1\11\4\0\1\11\3\0\1\11\1\0"+
    "\1\11\4\1\1\0\1\1\1\0\1\11\16\1\2\11"+
    "\1\0\1\11\5\0\1\1\1\0\11\1\4\0\1\11"+
    "\2\0\10\1\1\0\2\11\1\0\1\11\10\1\2\11"+
    "\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[588];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private List<ErrorAnalisis> errores = new ArrayList();

    private Symbol symbol(int type){
        return new Symbol(type, new Token(yyline, yycolumn, yytext()));
    }

    private void addLexicError(){
        String descripcion = "El simbolo no pertenece al lenguaje";
        errores.add(new ErrorAnalisis(yytext(), yyline+1, yycolumn+1, TipoError.LEXICO, descripcion));
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol(EOF, new Token(yyline, yycolumn, "Fin de linea"));
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol(TEXT_TAG);
            }
            // fall through
          case 136: break;
          case 2:
            { /**Ignorar*/
            }
            // fall through
          case 137: break;
          case 3:
            { yybegin(TAG); return symbol(LESS_THAN);
            }
            // fall through
          case 138: break;
          case 4:
            { addLexicError();
            }
            // fall through
          case 139: break;
          case 5:
            { return symbol(SLASH);
            }
            // fall through
          case 140: break;
          case 6:
            { yybegin(YYINITIAL); return symbol(GREATER_THAN);
            }
            // fall through
          case 141: break;
          case 7:
            { yybegin(PARAMETER); return symbol(OPEN_BRACKET);
            }
            // fall through
          case 142: break;
          case 8:
            { yybegin(VALUE); return symbol(QOUTE_MARK);
            }
            // fall through
          case 143: break;
          case 9:
            { return symbol(ASSIGN);
            }
            // fall through
          case 144: break;
          case 10:
            { yybegin(TAG); return symbol(CLOSE_BRACKET);
            }
            // fall through
          case 145: break;
          case 11:
            { yybegin(PARAMETER); return symbol(QOUTE_MARK);
            }
            // fall through
          case 146: break;
          case 12:
            { return symbol(ID_PARAM);
            }
            // fall through
          case 147: break;
          case 13:
            { return symbol(ENTERO);
            }
            // fall through
          case 148: break;
          case 14:
            { return symbol(NAME_PARAM);
            }
            // fall through
          case 149: break;
          case 15:
            { return symbol(OPEN_ROUND_BRACKET);
            }
            // fall through
          case 150: break;
          case 16:
            { return symbol(CLOSE_ROUND_BRACKET);
            }
            // fall through
          case 151: break;
          case 17:
            { return symbol(LESS_THAN);
            }
            // fall through
          case 152: break;
          case 18:
            { return symbol(GREATER_THAN);
            }
            // fall through
          case 153: break;
          case 19:
            { return symbol(ID_VAR);
            }
            // fall through
          case 154: break;
          case 20:
            { return symbol(OPEN_BRACKET);
            }
            // fall through
          case 155: break;
          case 21:
            { return symbol(CLOSE_BRACKET);
            }
            // fall through
          case 156: break;
          case 22:
            { return symbol(NOT);
            }
            // fall through
          case 157: break;
          case 23:
            { return symbol(SINGLE_QUOTES);
            }
            // fall through
          case 158: break;
          case 24:
            { return symbol(TIMES);
            }
            // fall through
          case 159: break;
          case 25:
            { return symbol(PLUS);
            }
            // fall through
          case 160: break;
          case 26:
            { return symbol(MINUS);
            }
            // fall through
          case 161: break;
          case 27:
            { return symbol(COLON);
            }
            // fall through
          case 162: break;
          case 28:
            { return symbol(SEMI);
            }
            // fall through
          case 163: break;
          case 29:
            { return symbol(OPEN_BRACE);
            }
            // fall through
          case 164: break;
          case 30:
            { return symbol(CLOSE_BRACE);
            }
            // fall through
          case 165: break;
          case 31:
            { return symbol(ID);
            }
            // fall through
          case 166: break;
          case 32:
            { return symbol(URL);
            }
            // fall through
          case 167: break;
          case 33:
            { return symbol(WH_VAL);
            }
            // fall through
          case 168: break;
          case 34:
            { return symbol(IF);
            }
            // fall through
          case 169: break;
          case 35:
            { return symbol(NOT_EQTUAL_TO);
            }
            // fall through
          case 170: break;
          case 36:
            { return symbol(AND);
            }
            // fall through
          case 171: break;
          case 37:
            { return symbol(LESS_THAN_OR_EQUAL_TO);
            }
            // fall through
          case 172: break;
          case 38:
            { return symbol(EQUAL_TO);
            }
            // fall through
          case 173: break;
          case 39:
            { return symbol(GREATER_THAN_OR_EQUAL_TO);
            }
            // fall through
          case 174: break;
          case 40:
            { return symbol(OR);
            }
            // fall through
          case 175: break;
          case 41:
            { return symbol(C_P);
            }
            // fall through
          case 176: break;
          case 42:
            { return symbol(ALT);
            }
            // fall through
          case 177: break;
          case 43:
            { return symbol(SRC);
            }
            // fall through
          case 178: break;
          case 44:
            { return symbol(SIZE);
            }
            // fall through
          case 179: break;
          case 45:
            { return symbol(RED);
            }
            // fall through
          case 180: break;
          case 46:
            { return symbol(ROW);
            }
            // fall through
          case 181: break;
          case 47:
            { return symbol(ASC);
            }
            // fall through
          case 182: break;
          case 48:
            { return symbol(END);
            }
            // fall through
          case 183: break;
          case 49:
            { return symbol(C_BR);
            }
            // fall through
          case 184: break;
          case 50:
            { return symbol(C_H1);
            }
            // fall through
          case 185: break;
          case 51:
            { return symbol(COLS);
            }
            // fall through
          case 186: break;
          case 52:
            { return symbol(HREF);
            }
            // fall through
          case 187: break;
          case 53:
            { return symbol(NAME);
            }
            // fall through
          case 188: break;
          case 54:
            { return symbol(ROWS);
            }
            // fall through
          case 189: break;
          case 55:
            { return symbol(TYPE);
            }
            // fall through
          case 190: break;
          case 56:
            { return symbol(COLOR_VALUE);
            }
            // fall through
          case 191: break;
          case 57:
            { return symbol(AQUA);
            }
            // fall through
          case 192: break;
          case 58:
            { return symbol(BLUE);
            }
            // fall through
          case 193: break;
          case 59:
            { return symbol(GRAY);
            }
            // fall through
          case 194: break;
          case 60:
            { return symbol(LEFT);
            }
            // fall through
          case 195: break;
          case 61:
            { return symbol(LIME);
            }
            // fall through
          case 196: break;
          case 62:
            { return symbol(NAVY);
            }
            // fall through
          case 197: break;
          case 63:
            { return symbol(TEAL);
            }
            // fall through
          case 198: break;
          case 64:
            { return symbol(TEXT);
            }
            // fall through
          case 199: break;
          case 65:
            { return symbol(DESC);
            }
            // fall through
          case 200: break;
          case 66:
            { return symbol(ELSE);
            }
            // fall through
          case 201: break;
          case 67:
            { return symbol(EXIT);
            }
            // fall through
          case 202: break;
          case 68:
            { return symbol(INIT);
            }
            // fall through
          case 203: break;
          case 69:
            { return symbol(THEN);
            }
            // fall through
          case 204: break;
          case 70:
            { return symbol(CHAR);
            }
            // fall through
          case 205: break;
          case 71:
            { return symbol(TRUE);
            }
            // fall through
          case 206: break;
          case 72:
            { return symbol(C_DIV);
            }
            // fall through
          case 207: break;
          case 73:
            { return symbol(C_IMG);
            }
            // fall through
          case 208: break;
          case 74:
            { return symbol(CLASS);
            }
            // fall through
          case 209: break;
          case 75:
            { return symbol(COLOR);
            }
            // fall through
          case 210: break;
          case 76:
            { return symbol(WIDTH);
            }
            // fall through
          case 211: break;
          case 77:
            { return symbol(ARIAL);
            }
            // fall through
          case 212: break;
          case 78:
            { return symbol(BLACK);
            }
            // fall through
          case 213: break;
          case 79:
            { return symbol(GREEN);
            }
            // fall through
          case 214: break;
          case 80:
            { return symbol(OLIVE);
            }
            // fall through
          case 215: break;
          case 81:
            { return symbol(RADIO);
            }
            // fall through
          case 216: break;
          case 82:
            { return symbol(RIGHT);
            }
            // fall through
          case 217: break;
          case 83:
            { return symbol(WHILE);
            }
            // fall through
          case 218: break;
          case 84:
            { return symbol(FALSE);
            }
            // fall through
          case 219: break;
          case 85:
            { return symbol(C_BODY);
            }
            // fall through
          case 220: break;
          case 86:
            { return symbol(C_GCIC);
            }
            // fall through
          case 221: break;
          case 87:
            { return symbol(C_HEAD);
            }
            // fall through
          case 222: break;
          case 88:
            { return symbol(C_LINK);
            }
            // fall through
          case 223: break;
          case 89:
            { return symbol(C_SPAM);
            }
            // fall through
          case 224: break;
          case 90:
            { return symbol(HEIGHT);
            }
            // fall through
          case 225: break;
          case 91:
            { return symbol(GENEVA);
            }
            // fall through
          case 226: break;
          case 92:
            { return symbol(CENTER);
            }
            // fall through
          case 227: break;
          case 93:
            { return symbol(COLUMN);
            }
            // fall through
          case 228: break;
          case 94:
            { return symbol(MARRON);
            }
            // fall through
          case 229: break;
          case 95:
            { return symbol(NUMBER);
            }
            // fall through
          case 230: break;
          case 96:
            { return symbol(PURPLE);
            }
            // fall through
          case 231: break;
          case 97:
            { return symbol(SILVER);
            }
            // fall through
          case 232: break;
          case 98:
            { return symbol(YELLOW);
            }
            // fall through
          case 233: break;
          case 99:
            { return symbol(HUNTIL);
            }
            // fall through
          case 234: break;
          case 100:
            { return symbol(INSERT);
            }
            // fall through
          case 235: break;
          case 101:
            { return symbol(REPEAT);
            }
            // fall through
          case 236: break;
          case 102:
            { return symbol(STRING);
            }
            // fall through
          case 237: break;
          case 103:
            { return symbol(C_INPUT);
            }
            // fall through
          case 238: break;
          case 104:
            { return symbol(C_TITLE);
            }
            // fall through
          case 239: break;
          case 105:
            { return symbol(ONCLICK);
            }
            // fall through
          case 240: break;
          case 106:
            { return symbol(COURIER);
            }
            // fall through
          case 241: break;
          case 107:
            { return symbol(VERDANA);
            }
            // fall through
          case 242: break;
          case 108:
            { return symbol(FUCHSIA);
            }
            // fall through
          case 243: break;
          case 109:
            { return symbol(JUSTIFY);
            }
            // fall through
          case 244: break;
          case 110:
            { return symbol(GLOBAL_MODE);
            }
            // fall through
          case 245: break;
          case 111:
            { return symbol(ON_LOAD);
            }
            // fall through
          case 246: break;
          case 112:
            { return symbol(REVERSE);
            }
            // fall through
          case 247: break;
          case 113:
            { return symbol(BOOLEAN);
            }
            // fall through
          case 248: break;
          case 114:
            { return symbol(DECIMAL);
            }
            // fall through
          case 249: break;
          case 115:
            { return symbol(INTEGER);
            }
            // fall through
          case 250: break;
          case 116:
            { return symbol(C_BUTTON);
            }
            // fall through
          case 251: break;
          case 117:
            { return symbol(C_OPTION);
            }
            // fall through
          case 252: break;
          case 118:
            { return symbol(C_SELECT);
            }
            // fall through
          case 253: break;
          case 119:
            { return symbol(CHECKBOX);
            }
            // fall through
          case 254: break;
          case 120:
            { return symbol(PROCESS_NAME);
            }
            // fall through
          case 255: break;
          case 121:
            { return symbol(FONT_SIZE);
            }
            // fall through
          case 256: break;
          case 122:
            { return symbol(THENWHILE);
            }
            // fall through
          case 257: break;
          case 123:
            { return symbol(C_TEXTAREA);
            }
            // fall through
          case 258: break;
          case 124:
            { return symbol(BACKGROUND);
            }
            // fall through
          case 259: break;
          case 125:
            { return symbol(TEXT_ALIGN);
            }
            // fall through
          case 260: break;
          case 126:
            { return symbol(SANS_SERIF);
            }
            // fall through
          case 261: break;
          case 127:
            { return symbol(ALERT_INFO);
            }
            // fall through
          case 262: break;
          case 128:
            { return symbol(LETPAR_NUM);
            }
            // fall through
          case 263: break;
          case 129:
            { yybegin(SCRIPTING); return symbol(C_SCRIPTING);
            }
            // fall through
          case 264: break;
          case 130:
            { return symbol(FONT_FAMILY);
            }
            // fall through
          case 265: break;
          case 131:
            { yybegin(TAG); return symbol(C_SCRIPTING);
            }
            // fall through
          case 266: break;
          case 132:
            { return symbol(LETIMPAR_NUM);
            }
            // fall through
          case 267: break;
          case 133:
            { return symbol(NUM_ALEATORIO);
            }
            // fall through
          case 268: break;
          case 134:
            { return symbol(ELEMENT_BY_ID);
            }
            // fall through
          case 269: break;
          case 135:
            { return symbol(CARACTER_ALEATORIO);
            }
            // fall through
          case 270: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
