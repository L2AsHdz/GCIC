// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.flex

package analizadores.lexico;

import java.util.ArrayList;
import java.util.List;
import model.errores.ErrorAnalisis;
import model.errores.TipoError;
import model.scripting.TipoDato;
import model.Token;
import model.TypeToken;
import static analizadores.sintactico.Sym.*;

import java_cup.runtime.Symbol;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int TAG = 2;
  public static final int PARAMETER = 4;
  public static final int VALUE = 6;
  public static final int SCRIPTING = 8;
  public static final int LITERALS = 10;
  public static final int DATOSCRIPTING = 12;
  public static final int OTHER = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u7300\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\1\22\0\1\3\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\10\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\0\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\45"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\45\1\64\1\0\1\65\1\0\1\66\1\0\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117"+
    "\1\120\1\121\1\122\1\123\7\0\1\1\32\0\1\1"+
    "\11\0\1\45\12\0\1\45\4\0\1\45\5\0\27\45"+
    "\1\0\37\45\1\0\u01ca\45\4\0\14\45\16\0\5\45"+
    "\7\0\1\45\1\0\1\45\21\0\160\124\5\45\1\0"+
    "\2\45\2\0\4\45\1\0\1\45\6\0\1\45\1\0"+
    "\3\45\1\0\1\45\1\0\24\45\1\0\123\45\1\0"+
    "\213\45\1\0\7\124\246\45\1\0\46\45\2\0\1\45"+
    "\6\0\51\45\10\0\55\124\1\0\1\124\1\0\2\124"+
    "\1\0\2\124\1\0\1\124\10\0\33\45\4\0\4\45"+
    "\35\0\13\124\5\0\53\45\25\124\12\125\4\0\2\45"+
    "\1\124\143\45\1\0\1\45\7\124\2\0\6\124\2\45"+
    "\2\124\1\0\4\124\2\45\12\125\3\45\2\0\1\45"+
    "\20\0\1\45\1\124\36\45\33\124\2\0\131\45\13\124"+
    "\1\45\16\0\12\125\41\45\11\124\2\45\4\0\1\45"+
    "\2\0\1\124\2\0\26\45\4\124\1\45\11\124\1\45"+
    "\3\124\1\45\5\124\22\0\31\45\3\124\4\0\13\45"+
    "\65\0\25\45\1\0\10\45\25\0\17\124\1\0\41\124"+
    "\66\45\3\124\1\45\22\124\1\45\7\124\12\45\2\124"+
    "\2\0\12\125\1\0\20\45\3\124\1\0\10\45\2\0"+
    "\2\45\2\0\26\45\1\0\7\45\1\0\1\45\3\0"+
    "\4\45\2\0\1\124\1\45\7\124\2\0\2\124\2\0"+
    "\3\124\1\45\10\0\1\124\4\0\2\45\1\0\3\45"+
    "\2\124\2\0\12\125\2\45\12\0\1\45\1\0\1\124"+
    "\2\0\3\124\1\0\6\45\4\0\2\45\2\0\26\45"+
    "\1\0\7\45\1\0\2\45\1\0\2\45\1\0\2\45"+
    "\2\0\1\124\1\0\5\124\4\0\2\124\2\0\3\124"+
    "\3\0\1\124\7\0\4\45\1\0\1\45\7\0\12\125"+
    "\2\124\3\45\1\124\13\0\3\124\1\0\11\45\1\0"+
    "\3\45\1\0\26\45\1\0\7\45\1\0\2\45\1\0"+
    "\5\45\2\0\1\124\1\45\10\124\1\0\3\124\1\0"+
    "\3\124\2\0\1\45\17\0\2\45\2\124\2\0\12\125"+
    "\11\0\1\45\6\124\1\0\3\124\1\0\10\45\2\0"+
    "\2\45\2\0\26\45\1\0\7\45\1\0\2\45\1\0"+
    "\5\45\2\0\1\124\1\45\7\124\2\0\2\124\2\0"+
    "\3\124\10\0\2\124\4\0\2\45\1\0\3\45\2\124"+
    "\2\0\12\125\1\0\1\45\20\0\1\124\1\45\1\0"+
    "\6\45\3\0\3\45\1\0\4\45\3\0\2\45\1\0"+
    "\1\45\1\0\2\45\3\0\2\45\3\0\3\45\3\0"+
    "\14\45\4\0\5\124\3\0\3\124\1\0\4\124\2\0"+
    "\1\45\6\0\1\124\16\0\12\125\20\0\5\124\10\45"+
    "\1\0\3\45\1\0\27\45\1\0\20\45\3\0\1\45"+
    "\7\124\1\0\3\124\1\0\4\124\7\0\2\124\1\0"+
    "\3\45\5\0\2\45\2\124\2\0\12\125\20\0\1\45"+
    "\3\124\1\0\10\45\1\0\3\45\1\0\27\45\1\0"+
    "\12\45\1\0\5\45\2\0\1\124\1\45\7\124\1\0"+
    "\3\124\1\0\4\124\7\0\2\124\7\0\1\45\1\0"+
    "\2\45\2\124\2\0\12\125\1\0\2\45\15\0\4\124"+
    "\1\0\10\45\1\0\3\45\1\0\51\45\2\124\1\45"+
    "\7\124\1\0\3\124\1\0\4\124\1\45\5\0\3\45"+
    "\1\124\7\0\3\45\2\124\2\0\12\125\12\0\6\45"+
    "\2\0\2\124\1\0\22\45\3\0\30\45\1\0\11\45"+
    "\1\0\1\45\2\0\7\45\3\0\1\124\4\0\6\124"+
    "\1\0\1\124\1\0\10\124\6\0\12\125\2\0\2\124"+
    "\15\0\60\45\1\124\2\45\7\124\5\0\7\45\10\124"+
    "\1\0\12\125\47\0\2\45\1\0\1\45\1\0\5\45"+
    "\1\0\30\45\1\0\1\45\1\0\12\45\1\124\2\45"+
    "\11\124\1\45\2\0\5\45\1\0\1\45\1\0\6\124"+
    "\2\0\12\125\2\0\4\45\40\0\1\45\27\0\2\124"+
    "\6\0\12\125\13\0\1\124\1\0\1\124\1\0\1\124"+
    "\4\0\2\124\10\45\1\0\44\45\4\0\24\124\1\0"+
    "\2\124\5\45\13\124\1\0\44\124\11\0\1\124\71\0"+
    "\53\45\24\124\1\45\12\125\6\0\6\45\4\124\4\45"+
    "\3\124\1\45\3\124\2\45\7\124\3\45\4\124\15\45"+
    "\14\124\1\45\1\124\12\125\4\124\2\0\46\45\1\0"+
    "\1\45\5\0\1\45\2\0\53\45\1\0\115\45\1\0"+
    "\4\45\2\0\7\45\1\0\1\45\1\0\4\45\2\0"+
    "\51\45\1\0\4\45\2\0\41\45\1\0\4\45\2\0"+
    "\7\45\1\0\1\45\1\0\4\45\2\0\17\45\1\0"+
    "\71\45\1\0\4\45\2\0\103\45\2\0\3\124\40\0"+
    "\20\45\20\0\126\45\2\0\6\45\3\0\u016c\45\2\0"+
    "\21\45\1\1\32\45\5\0\113\45\3\0\3\124\10\45"+
    "\7\0\15\45\1\0\4\45\3\124\13\0\22\45\3\124"+
    "\13\0\22\45\2\124\14\0\15\45\1\0\3\45\1\0"+
    "\2\124\14\0\64\45\40\124\3\0\1\45\4\0\1\45"+
    "\1\124\2\0\12\125\41\0\3\124\2\0\12\125\6\0"+
    "\131\45\7\0\5\45\2\124\42\45\1\124\1\45\5\0"+
    "\106\45\12\0\37\45\1\0\14\124\4\0\14\124\12\0"+
    "\12\125\36\45\2\0\5\45\13\0\54\45\4\0\32\45"+
    "\6\0\12\125\46\0\27\45\5\124\4\0\65\45\12\124"+
    "\1\0\35\124\2\0\1\124\12\125\6\0\12\125\15\0"+
    "\1\45\10\0\17\124\101\0\5\124\57\45\21\124\7\45"+
    "\4\0\12\125\21\0\11\124\14\0\3\124\36\45\15\124"+
    "\2\45\12\125\54\45\16\124\14\0\44\45\24\124\10\0"+
    "\12\125\3\0\3\45\12\125\44\45\2\0\11\45\7\0"+
    "\53\45\2\0\3\45\20\0\3\124\1\0\25\124\4\45"+
    "\1\124\6\45\1\124\2\45\3\124\1\45\5\0\300\45"+
    "\72\124\1\0\5\124\26\45\2\0\6\45\2\0\46\45"+
    "\2\0\6\45\2\0\10\45\1\0\1\45\1\0\1\45"+
    "\1\0\1\45\1\0\37\45\2\0\65\45\1\0\7\45"+
    "\1\0\1\45\3\0\3\45\1\0\7\45\3\0\4\45"+
    "\2\0\6\45\4\0\15\45\5\0\3\45\1\0\7\45"+
    "\3\0\13\1\15\0\2\126\16\0\2\1\5\0\1\1"+
    "\17\0\2\124\23\0\1\124\12\0\1\1\21\0\1\45"+
    "\15\0\1\45\20\0\15\45\63\0\41\124\21\0\1\45"+
    "\4\0\1\45\2\0\12\45\1\0\1\45\3\0\5\45"+
    "\6\0\1\45\1\0\1\45\1\0\1\45\1\0\4\45"+
    "\1\0\13\45\2\0\4\45\5\0\5\45\4\0\1\45"+
    "\21\0\43\124\2\45\4\124\u022d\0\64\124\26\0\57\45"+
    "\1\0\57\45\1\0\205\45\6\0\4\45\3\124\2\45"+
    "\14\0\46\45\1\0\1\45\5\0\1\45\2\0\70\45"+
    "\7\0\1\45\17\0\1\124\27\45\11\0\7\45\1\0"+
    "\7\45\1\0\7\45\1\0\7\45\1\0\7\45\1\0"+
    "\7\45\1\0\7\45\1\0\7\45\1\0\40\124\57\0"+
    "\1\45\320\0\1\1\4\0\2\45\1\124\31\0\17\124"+
    "\1\0\5\45\2\0\3\124\2\45\4\0\126\45\2\0"+
    "\2\124\2\0\3\45\1\0\132\45\1\0\4\45\5\0"+
    "\53\45\1\0\136\45\21\0\33\45\65\0\306\45\112\0"+
    "\360\45\20\0\215\45\103\0\56\45\2\0\15\45\3\0"+
    "\20\45\12\125\2\45\24\0\57\45\4\124\1\0\12\124"+
    "\1\0\37\45\2\124\106\45\14\124\45\0\11\45\2\0"+
    "\147\45\2\0\65\45\2\0\5\45\60\0\13\45\1\124"+
    "\3\45\1\124\4\45\1\124\27\45\5\124\30\0\64\45"+
    "\14\0\2\124\62\45\22\124\12\0\12\125\6\0\22\124"+
    "\6\45\3\0\1\45\1\0\2\45\1\124\12\125\34\45"+
    "\10\124\2\0\27\45\15\124\14\0\35\45\3\0\4\124"+
    "\57\45\16\124\16\0\1\45\12\125\6\0\5\45\1\124"+
    "\12\45\12\125\5\45\1\0\51\45\16\124\11\0\3\45"+
    "\1\124\10\45\2\124\2\0\12\125\6\0\27\45\3\0"+
    "\1\45\3\124\62\45\1\124\1\45\3\124\2\45\2\124"+
    "\5\45\2\124\1\45\1\124\1\45\30\0\3\45\2\0"+
    "\13\45\5\124\2\0\3\45\2\124\12\0\6\45\2\0"+
    "\6\45\2\0\6\45\11\0\7\45\1\0\7\45\1\0"+
    "\53\45\1\0\14\45\10\0\163\45\10\124\1\0\2\124"+
    "\2\0\12\125\6\0\244\45\14\0\27\45\4\0\61\45"+
    "\4\0\156\45\2\0\152\45\46\0\7\45\14\0\5\45"+
    "\5\0\1\45\1\124\12\45\1\0\15\45\1\0\5\45"+
    "\1\0\1\45\1\0\2\45\1\0\2\45\1\0\154\45"+
    "\41\0\153\45\22\0\100\45\2\0\66\45\50\0\14\45"+
    "\4\0\20\124\20\0\20\124\3\0\2\124\30\0\3\124"+
    "\40\0\5\45\1\0\207\45\23\0\12\125\7\0\32\45"+
    "\4\0\1\124\1\0\32\45\13\0\131\45\3\0\6\45"+
    "\2\0\6\45\2\0\6\45\2\0\3\45\43\0\14\45"+
    "\1\0\32\45\1\0\23\45\1\0\2\45\1\0\17\45"+
    "\2\0\16\45\42\0\173\45\105\0\65\124\210\0\1\124"+
    "\202\0\35\45\3\0\61\45\17\0\1\124\37\0\40\45"+
    "\15\0\24\45\1\124\10\45\1\124\5\0\46\45\5\124"+
    "\5\0\36\45\2\0\44\45\4\0\10\45\1\0\5\124"+
    "\52\0\236\45\2\0\12\125\6\0\44\45\4\0\44\45"+
    "\4\0\50\45\10\0\64\45\234\0\67\45\11\0\26\45"+
    "\12\0\10\45\230\0\6\45\2\0\1\45\1\0\54\45"+
    "\1\0\2\45\3\0\1\45\2\0\27\45\12\0\27\45"+
    "\11\0\37\45\101\0\23\45\1\0\2\45\12\0\26\45"+
    "\12\0\32\45\106\0\70\45\6\0\2\45\100\0\1\45"+
    "\3\124\1\0\2\124\5\0\4\124\4\45\1\0\3\45"+
    "\1\0\35\45\2\0\3\124\4\0\1\124\40\0\35\45"+
    "\3\0\35\45\43\0\10\45\1\0\34\45\2\124\31\0"+
    "\66\45\12\0\26\45\12\0\23\45\15\0\22\45\156\0"+
    "\111\45\67\0\63\45\15\0\63\45\15\0\44\45\4\124"+
    "\10\0\12\125\306\0\35\45\12\0\1\45\10\0\26\45"+
    "\13\124\217\0\27\45\11\0\3\124\65\45\17\124\37\0"+
    "\12\125\17\0\4\124\55\45\13\124\25\0\31\45\7\0"+
    "\12\125\6\0\3\124\44\45\16\124\1\0\12\125\4\0"+
    "\1\45\2\124\11\0\43\45\1\124\2\0\1\45\11\0"+
    "\3\124\60\45\16\124\4\45\4\0\4\124\3\0\12\125"+
    "\1\45\1\0\1\45\43\0\22\45\1\0\31\45\14\124"+
    "\6\0\1\124\101\0\7\45\1\0\1\45\1\0\4\45"+
    "\1\0\17\45\1\0\12\45\7\0\57\45\14\124\5\0"+
    "\12\125\6\0\4\124\1\0\10\45\2\0\2\45\2\0"+
    "\26\45\1\0\7\45\1\0\2\45\1\0\5\45\1\0"+
    "\2\124\1\45\7\124\2\0\2\124\2\0\3\124\2\0"+
    "\1\45\6\0\1\124\5\0\5\45\2\124\2\0\7\124"+
    "\3\0\5\124\213\0\65\45\22\124\4\45\5\0\12\125"+
    "\4\0\1\124\1\45\40\0\60\45\24\124\2\45\1\0"+
    "\1\45\10\0\12\125\246\0\57\45\7\124\2\0\11\124"+
    "\27\0\4\45\2\124\42\0\60\45\21\124\3\0\1\45"+
    "\13\0\12\125\46\0\53\45\15\124\1\45\7\0\12\125"+
    "\66\0\33\45\2\0\17\124\4\0\12\125\306\0\54\45"+
    "\17\124\145\0\100\45\12\125\25\0\1\45\240\0\10\45"+
    "\2\0\47\45\7\124\2\0\7\124\1\45\1\0\1\45"+
    "\1\124\33\0\1\45\12\124\50\45\7\124\1\45\4\124"+
    "\10\0\1\124\10\0\1\45\13\124\56\45\20\124\3\0"+
    "\1\45\42\0\71\45\7\0\11\45\1\0\45\45\10\124"+
    "\1\0\10\124\1\45\17\0\12\125\30\0\36\45\2\0"+
    "\26\124\1\0\16\124\111\0\7\45\1\0\2\45\1\0"+
    "\46\45\6\124\3\0\1\124\1\0\2\124\1\0\7\124"+
    "\1\45\1\124\10\0\12\125\6\0\6\45\1\0\2\45"+
    "\1\0\40\45\5\124\1\0\2\124\1\0\5\124\1\45"+
    "\7\0\12\125\u0136\0\23\45\4\124\11\0\232\45\146\0"+
    "\157\124\21\0\304\45\274\0\57\45\321\0\107\45\271\0"+
    "\71\45\7\0\37\45\1\0\12\125\146\0\36\45\2\0"+
    "\5\124\13\0\60\45\7\124\11\0\4\45\14\0\12\125"+
    "\11\0\25\45\5\0\23\45\260\0\100\45\200\0\113\45"+
    "\4\0\1\124\1\45\67\124\7\0\4\124\15\45\100\0"+
    "\2\45\1\0\1\45\34\0\370\45\10\0\363\45\15\0"+
    "\37\45\61\0\3\45\21\0\4\45\10\0\u018c\45\4\0"+
    "\153\45\5\0\15\45\3\0\11\45\7\0\12\45\3\0"+
    "\2\124\306\0\5\124\3\0\6\124\10\0\10\124\2\0"+
    "\7\124\36\0\4\124\224\0\3\124\273\0\125\45\1\0"+
    "\107\45\1\0\2\45\2\0\1\45\2\0\2\45\2\0"+
    "\4\45\1\0\14\45\1\0\1\45\1\0\7\45\1\0"+
    "\101\45\1\0\4\45\2\0\10\45\1\0\7\45\1\0"+
    "\34\45\1\0\4\45\1\0\5\45\1\0\1\45\3\0"+
    "\7\45\1\0\u0154\45\2\0\31\45\1\0\31\45\1\0"+
    "\37\45\1\0\31\45\1\0\37\45\1\0\31\45\1\0"+
    "\37\45\1\0\31\45\1\0\37\45\1\0\31\45\1\0"+
    "\10\45\2\0\62\125\67\124\4\0\62\124\10\0\1\124"+
    "\16\0\1\124\26\0\5\124\1\0\17\124\120\0\7\124"+
    "\1\0\21\124\2\0\7\124\1\0\2\124\1\0\5\124"+
    "\325\0\55\45\3\0\7\124\7\45\2\0\12\125\4\0"+
    "\1\45\u0171\0\54\45\4\124\12\125\6\0\305\45\13\0"+
    "\7\124\51\0\104\45\7\124\1\45\4\0\12\125\246\0"+
    "\4\45\1\0\33\45\1\0\2\45\1\0\1\45\2\0"+
    "\1\45\1\0\12\45\1\0\4\45\1\0\1\45\1\0"+
    "\1\45\6\0\1\45\4\0\1\45\1\0\1\45\1\0"+
    "\1\45\1\0\3\45\1\0\2\45\1\0\1\45\2\0"+
    "\1\45\1\0\1\45\1\0\1\45\1\0\1\45\1\0"+
    "\1\45\1\0\2\45\1\0\1\45\2\0\4\45\1\0"+
    "\7\45\1\0\4\45\1\0\4\45\1\0\1\45\1\0"+
    "\12\45\1\0\21\45\5\0\3\45\1\0\5\45\1\0"+
    "\21\45\164\0\32\124\6\0\32\124\6\0\32\124\166\0"+
    "\327\45\51\0\65\45\13\0\336\45\2\0\u0182\45\16\0"+
    "\u0131\45\37\0\36\45\342\0\360\124\20\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\1\1\3\1\4\1\2\1\4"+
    "\1\5\1\4\1\6\1\4\1\7\1\10\1\11\1\12"+
    "\14\4\1\13\1\4\1\14\1\15\1\16\1\14\1\4"+
    "\2\17\27\20\1\21\1\22\1\4\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\2\31\1\32\1\33\1\34\1\11"+
    "\1\35\1\4\16\36\1\37\1\40\10\36\1\41\1\4"+
    "\1\42\1\43\2\44\1\45\1\46\1\2\1\0\1\2"+
    "\10\0\1\47\10\0\1\50\1\0\1\51\1\0\35\20"+
    "\1\52\1\53\1\0\1\54\1\55\1\56\1\0\11\36"+
    "\1\57\20\36\1\60\1\61\10\0\1\62\2\0\1\63"+
    "\11\0\1\64\4\0\1\65\30\20\1\66\1\20\1\67"+
    "\5\20\1\70\1\0\1\36\1\71\4\36\1\72\25\36"+
    "\2\0\1\73\3\0\1\74\15\0\1\75\2\0\1\76"+
    "\1\77\1\0\1\100\1\0\1\101\1\0\1\102\5\20"+
    "\1\103\1\20\1\104\4\20\1\105\3\20\1\106\1\107"+
    "\1\20\1\110\7\20\1\111\1\112\1\20\2\0\3\36"+
    "\1\113\1\114\1\115\1\36\1\116\11\36\1\117\2\36"+
    "\1\120\5\36\1\121\3\0\1\122\2\0\1\123\11\0"+
    "\1\124\1\125\4\0\1\126\1\0\1\127\4\20\1\130"+
    "\4\20\1\131\1\0\4\20\1\132\1\20\1\133\1\134"+
    "\3\20\1\0\16\36\1\135\2\36\1\136\3\36\1\0"+
    "\1\137\1\0\1\140\1\141\1\0\1\142\3\0\1\143"+
    "\5\0\1\144\3\0\1\20\1\145\2\20\1\146\1\20"+
    "\1\147\1\20\1\0\1\20\1\150\1\151\1\152\1\20"+
    "\1\153\1\154\1\0\3\36\1\155\1\156\6\36\1\157"+
    "\6\36\1\160\1\2\1\0\1\161\4\0\1\162\3\0"+
    "\1\163\1\0\1\102\1\164\1\20\1\165\1\20\1\166"+
    "\1\0\1\167\1\20\1\170\6\36\1\171\2\36\1\172"+
    "\1\36\1\173\1\174\1\36\1\175\1\176\1\177\1\0"+
    "\1\200\5\0\1\201\1\202\1\20\6\36\1\201\1\203"+
    "\2\36\4\0\1\204\1\0\1\20\6\36\1\205\1\36"+
    "\1\0\1\206\1\207\1\0\1\210\1\211\1\212\3\36"+
    "\1\213\2\36\1\214\1\215\1\36\1\216\4\36\1\217"+
    "\3\36\1\220\1\221\4\36\1\222";

  private static int [] zzUnpackAction() {
    int [] result = new int[615];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\127\0\256\0\u0105\0\u015c\0\u01b3\0\u020a\0\u0261"+
    "\0\u02b8\0\u030f\0\u0366\0\u03bd\0\u0414\0\u046b\0\u04c2\0\u0414"+
    "\0\u03bd\0\u0414\0\u0519\0\u0414\0\u0414\0\u0414\0\u0414\0\u0570"+
    "\0\u05c7\0\u061e\0\u0675\0\u06cc\0\u0723\0\u077a\0\u07d1\0\u0828"+
    "\0\u087f\0\u08d6\0\u092d\0\u0414\0\u0984\0\u09db\0\u0414\0\u0414"+
    "\0\u0a32\0\u0a89\0\u0ae0\0\u0b37\0\u0b8e\0\u0be5\0\u0c3c\0\u0c93"+
    "\0\u0cea\0\u0d41\0\u0d98\0\u0def\0\u0e46\0\u0e9d\0\u0ef4\0\u0f4b"+
    "\0\u0fa2\0\u0ff9\0\u1050\0\u10a7\0\u10fe\0\u1155\0\u11ac\0\u1203"+
    "\0\u125a\0\u12b1\0\u1308\0\u135f\0\u0414\0\u13b6\0\u0414\0\u0414"+
    "\0\u0414\0\u0414\0\u140d\0\u0414\0\u0414\0\u1464\0\u0414\0\u0414"+
    "\0\u14bb\0\u1512\0\u1569\0\u15c0\0\u1617\0\u166e\0\u16c5\0\u171c"+
    "\0\u1773\0\u17ca\0\u1821\0\u1878\0\u18cf\0\u1926\0\u197d\0\u19d4"+
    "\0\u1a2b\0\u1a82\0\u0414\0\u0414\0\u1ad9\0\u1b30\0\u1b87\0\u1bde"+
    "\0\u1c35\0\u1c8c\0\u1ce3\0\u1d3a\0\u0414\0\u1d91\0\u0414\0\u1de8"+
    "\0\u0414\0\u1de8\0\u1e3f\0\u0414\0\u1e96\0\u1eed\0\u1f44\0\u1f9b"+
    "\0\u1ff2\0\u2049\0\u20a0\0\u20f7\0\u214e\0\u21a5\0\u21fc\0\u0414"+
    "\0\u2253\0\u22aa\0\u2301\0\u2358\0\u23af\0\u2406\0\u245d\0\u24b4"+
    "\0\u250b\0\u0a89\0\u0414\0\u2562\0\u25b9\0\u2610\0\u2667\0\u26be"+
    "\0\u2715\0\u276c\0\u27c3\0\u281a\0\u2871\0\u28c8\0\u291f\0\u2976"+
    "\0\u29cd\0\u2a24\0\u2a7b\0\u2ad2\0\u2b29\0\u2b80\0\u2bd7\0\u2c2e"+
    "\0\u2c85\0\u2cdc\0\u2d33\0\u2d8a\0\u2de1\0\u2e38\0\u2e8f\0\u2ee6"+
    "\0\u2f3d\0\u0414\0\u0414\0\u2f94\0\u0414\0\u0414\0\u0414\0\u2feb"+
    "\0\u3042\0\u3099\0\u30f0\0\u3147\0\u319e\0\u31f5\0\u324c\0\u32a3"+
    "\0\u32fa\0\u166e\0\u3351\0\u33a8\0\u33ff\0\u3456\0\u34ad\0\u3504"+
    "\0\u355b\0\u35b2\0\u3609\0\u3660\0\u36b7\0\u370e\0\u3765\0\u37bc"+
    "\0\u3813\0\u386a\0\u0414\0\u1e3f\0\u38c1\0\u3918\0\u396f\0\u39c6"+
    "\0\u3a1d\0\u3a74\0\u3acb\0\u3b22\0\u0414\0\u3b79\0\u3bd0\0\u0414"+
    "\0\u3c27\0\u3c7e\0\u3cd5\0\u3d2c\0\u3d83\0\u3dda\0\u3e31\0\u3e88"+
    "\0\u3edf\0\u0414\0\u3f36\0\u3f8d\0\u3fe4\0\u403b\0\u0a89\0\u4092"+
    "\0\u40e9\0\u4140\0\u4197\0\u41ee\0\u4245\0\u429c\0\u42f3\0\u434a"+
    "\0\u43a1\0\u43f8\0\u444f\0\u44a6\0\u44fd\0\u4554\0\u45ab\0\u4602"+
    "\0\u4659\0\u46b0\0\u4707\0\u475e\0\u47b5\0\u480c\0\u4863\0\u0e9d"+
    "\0\u48ba\0\u0e9d\0\u4911\0\u4968\0\u49bf\0\u4a16\0\u4a6d\0\u4ac4"+
    "\0\u4b1b\0\u4b72\0\u166e\0\u4bc9\0\u4c20\0\u4c77\0\u4cce\0\u166e"+
    "\0\u4d25\0\u4d7c\0\u4dd3\0\u4e2a\0\u4e81\0\u4ed8\0\u4f2f\0\u4f86"+
    "\0\u4fdd\0\u5034\0\u508b\0\u50e2\0\u5139\0\u5190\0\u51e7\0\u523e"+
    "\0\u5295\0\u52ec\0\u5343\0\u539a\0\u53f1\0\u5448\0\u549f\0\u0414"+
    "\0\u54f6\0\u554d\0\u55a4\0\u0414\0\u55fb\0\u5652\0\u56a9\0\u5700"+
    "\0\u5757\0\u57ae\0\u5805\0\u585c\0\u58b3\0\u590a\0\u5961\0\u59b8"+
    "\0\u5a0f\0\u0414\0\u5a66\0\u5abd\0\u0414\0\u0414\0\u5b14\0\u0414"+
    "\0\u5b6b\0\u0414\0\u5bc2\0\u5c19\0\u5c70\0\u5cc7\0\u5d1e\0\u5d75"+
    "\0\u5dcc\0\u0e9d\0\u5e23\0\u0e9d\0\u5e7a\0\u5ed1\0\u5f28\0\u5f7f"+
    "\0\u0e9d\0\u5fd6\0\u602d\0\u6084\0\u0e9d\0\u0e9d\0\u60db\0\u0e9d"+
    "\0\u6132\0\u6189\0\u61e0\0\u6237\0\u628e\0\u62e5\0\u633c\0\u0e9d"+
    "\0\u0e9d\0\u6393\0\u4ac4\0\u63ea\0\u6441\0\u6498\0\u64ef\0\u166e"+
    "\0\u166e\0\u166e\0\u6546\0\u166e\0\u659d\0\u65f4\0\u664b\0\u66a2"+
    "\0\u66f9\0\u6750\0\u67a7\0\u67fe\0\u6855\0\u68ac\0\u6903\0\u695a"+
    "\0\u166e\0\u69b1\0\u6a08\0\u6a5f\0\u6ab6\0\u6b0d\0\u166e\0\u6b64"+
    "\0\u6bbb\0\u6c12\0\u0414\0\u6c69\0\u6cc0\0\u0414\0\u6d17\0\u6d6e"+
    "\0\u6dc5\0\u6e1c\0\u6e73\0\u6eca\0\u6f21\0\u6f78\0\u6fcf\0\u0414"+
    "\0\u0414\0\u7026\0\u707d\0\u70d4\0\u712b\0\u0414\0\u7182\0\u0be5"+
    "\0\u71d9\0\u7230\0\u7287\0\u72de\0\u0e9d\0\u7335\0\u738c\0\u73e3"+
    "\0\u743a\0\u0e9d\0\u7491\0\u74e8\0\u753f\0\u7596\0\u75ed\0\u0e9d"+
    "\0\u7644\0\u0e9d\0\u0e9d\0\u769b\0\u76f2\0\u7749\0\u77a0\0\u77f7"+
    "\0\u784e\0\u78a5\0\u78fc\0\u7953\0\u79aa\0\u7a01\0\u7a58\0\u7aaf"+
    "\0\u7b06\0\u7b5d\0\u7bb4\0\u7c0b\0\u7c62\0\u166e\0\u7cb9\0\u7d10"+
    "\0\u166e\0\u7d67\0\u7dbe\0\u7e15\0\u7e6c\0\u0414\0\u7ec3\0\u0414"+
    "\0\u0414\0\u7f1a\0\u0414\0\u7f71\0\u7fc8\0\u801f\0\u0414\0\u8076"+
    "\0\u80cd\0\u8124\0\u817b\0\u81d2\0\u0414\0\u8229\0\u8280\0\u82d7"+
    "\0\u832e\0\u0be5\0\u8385\0\u83dc\0\u0e9d\0\u8433\0\u0e9d\0\u848a"+
    "\0\u84e1\0\u8538\0\u0e9d\0\u0e9d\0\u0e9d\0\u858f\0\u0e9d\0\u0e9d"+
    "\0\u85e6\0\u863d\0\u8694\0\u86eb\0\u166e\0\u166e\0\u8742\0\u8799"+
    "\0\u87f0\0\u8847\0\u889e\0\u88f5\0\u166e\0\u894c\0\u89a3\0\u89fa"+
    "\0\u8a51\0\u8aa8\0\u8aff\0\u166e\0\u0414\0\u8b56\0\u0414\0\u8bad"+
    "\0\u8c04\0\u8c5b\0\u8cb2\0\u0414\0\u8d09\0\u8d60\0\u8db7\0\u0414"+
    "\0\u8e0e\0\u0414\0\u0be5\0\u8e65\0\u0be5\0\u8ebc\0\u0e9d\0\u8f13"+
    "\0\u0e9d\0\u8f6a\0\u0414\0\u8fc1\0\u9018\0\u906f\0\u90c6\0\u911d"+
    "\0\u9174\0\u166e\0\u91cb\0\u9222\0\u166e\0\u9279\0\u166e\0\u166e"+
    "\0\u92d0\0\u166e\0\u0414\0\u0414\0\u9327\0\u0414\0\u937e\0\u93d5"+
    "\0\u942c\0\u9483\0\u94da\0\u9531\0\u0e9d\0\u9588\0\u95df\0\u9636"+
    "\0\u968d\0\u96e4\0\u973b\0\u9792\0\u97e9\0\u166e\0\u9840\0\u9897"+
    "\0\u98ee\0\u9945\0\u999c\0\u99f3\0\u0414\0\u9a4a\0\u9aa1\0\u9af8"+
    "\0\u9b4f\0\u9ba6\0\u9bfd\0\u9c54\0\u9cab\0\u166e\0\u9d02\0\u9d59"+
    "\0\u0414\0\u0414\0\u9db0\0\u0414\0\u0e9d\0\u166e\0\u9e07\0\u9e5e"+
    "\0\u9eb5\0\u166e\0\u9f0c\0\u9f63\0\u0414\0\u0414\0\u9fba\0\u166e"+
    "\0\ua011\0\ua068\0\ua0bf\0\ua116\0\u166e\0\ua16d\0\ua1c4\0\ua21b"+
    "\0\u166e\0\u166e\0\ua272\0\ua2c9\0\ua320\0\ua377\0\u166e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[615];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\3\12\1\13\23\11\1\14\76\11\1\15\3\16"+
    "\1\17\15\15\1\20\5\15\1\21\1\15\1\22\3\15"+
    "\1\23\25\15\1\24\4\15\1\23\36\15\3\16\1\17"+
    "\1\25\22\15\1\21\1\26\33\15\1\27\1\15\1\30"+
    "\1\31\1\32\2\15\1\33\1\15\1\34\1\35\4\15"+
    "\1\36\1\37\2\15\1\40\1\41\1\42\2\15\1\43"+
    "\10\15\1\25\1\15\3\16\1\17\1\44\1\45\1\46"+
    "\3\15\1\47\1\50\3\15\1\51\1\52\1\15\1\53"+
    "\2\54\2\15\1\21\3\15\1\55\1\56\1\57\3\56"+
    "\1\60\10\56\1\61\4\56\1\62\3\56\2\15\1\46"+
    "\1\63\1\64\1\65\2\66\1\67\1\70\1\71\1\66"+
    "\1\72\1\66\1\73\1\74\1\75\1\76\1\77\1\66"+
    "\1\100\1\101\1\102\4\66\1\103\1\66\4\15\1\52"+
    "\1\44\1\15\3\16\1\104\1\105\3\15\1\106\1\107"+
    "\1\47\1\50\1\110\1\111\1\112\1\113\1\15\1\114"+
    "\1\115\2\116\1\117\1\120\1\121\1\122\1\123\1\124"+
    "\1\125\1\126\1\127\1\130\1\131\2\126\1\132\1\133"+
    "\2\126\1\134\1\126\1\135\1\136\1\137\1\140\1\126"+
    "\1\141\2\126\1\142\2\126\1\143\1\144\1\15\1\126"+
    "\1\145\1\146\1\147\1\126\1\150\1\151\1\126\1\152"+
    "\11\126\1\153\1\154\6\126\1\155\1\156\1\157\2\15"+
    "\1\105\5\160\1\161\4\160\1\15\113\160\1\162\12\163"+
    "\1\164\113\163\1\164\127\15\30\11\1\0\77\11\3\12"+
    "\24\11\1\0\102\11\1\165\23\11\1\0\76\11\4\0"+
    "\1\166\252\0\3\16\127\0\1\167\210\0\1\170\142\0"+
    "\1\171\113\0\1\172\141\0\1\173\2\0\1\174\126\0"+
    "\1\175\114\0\1\176\14\0\1\177\110\0\1\200\123\0"+
    "\1\201\143\0\1\202\127\0\1\203\131\0\1\204\111\0"+
    "\1\205\23\0\1\206\106\0\1\207\52\0\3\210\6\0"+
    "\6\210\25\0\6\210\41\0\1\46\10\0\1\46\2\0"+
    "\3\46\6\0\30\46\2\0\33\46\3\0\2\46\10\0"+
    "\1\46\10\0\1\51\1\211\1\0\3\51\6\0\30\46"+
    "\2\0\1\46\32\51\3\0\1\46\1\51\21\0\1\212"+
    "\1\211\1\0\3\212\41\0\32\212\4\0\1\212\11\0"+
    "\1\213\7\0\1\212\1\211\1\0\3\212\41\0\17\212"+
    "\1\214\12\212\4\0\1\212\11\0\1\213\7\0\1\212"+
    "\1\211\1\0\3\54\41\0\17\212\1\214\12\212\4\0"+
    "\1\212\4\0\1\56\3\0\1\56\10\0\1\56\2\0"+
    "\3\56\6\0\30\56\2\0\22\56\1\215\10\56\3\0"+
    "\2\56\4\0\1\56\3\0\1\56\10\0\1\56\2\0"+
    "\3\56\6\0\30\56\2\0\33\56\3\0\2\56\4\0"+
    "\1\56\3\0\1\56\10\0\1\56\2\0\3\56\6\0"+
    "\30\56\2\0\17\56\1\216\13\56\3\0\2\56\4\0"+
    "\1\56\3\0\1\56\10\0\1\56\2\0\3\56\6\0"+
    "\30\56\2\0\5\56\1\217\25\56\3\0\2\56\4\0"+
    "\1\56\3\0\1\56\10\0\1\56\2\0\3\56\6\0"+
    "\20\56\1\220\7\56\2\0\33\56\3\0\2\56\4\0"+
    "\1\56\3\0\1\56\10\0\1\56\2\0\3\56\6\0"+
    "\30\56\2\0\5\56\1\221\25\56\3\0\2\56\4\0"+
    "\1\56\3\0\1\56\10\0\1\66\1\211\1\0\3\66"+
    "\6\0\30\56\2\0\1\56\20\66\1\222\11\66\3\0"+
    "\1\56\1\66\4\0\1\56\3\0\1\56\10\0\1\66"+
    "\1\211\1\0\3\66\6\0\30\56\2\0\1\56\13\66"+
    "\1\223\16\66\3\0\1\56\1\66\4\0\1\56\3\0"+
    "\1\56\10\0\1\66\1\211\1\0\3\66\6\0\30\56"+
    "\2\0\1\56\4\66\1\224\2\66\1\225\6\66\1\226"+
    "\13\66\3\0\1\56\1\66\4\0\1\56\3\0\1\56"+
    "\10\0\1\66\1\211\1\0\3\66\6\0\30\56\2\0"+
    "\1\56\32\66\3\0\1\56\1\66\4\0\1\56\3\0"+
    "\1\56\10\0\1\66\1\211\1\0\3\66\6\0\30\56"+
    "\2\0\1\56\24\66\1\227\5\66\3\0\1\56\1\66"+
    "\4\0\1\56\3\0\1\56\10\0\1\66\1\211\1\0"+
    "\3\66\6\0\30\56\2\0\1\56\21\66\1\230\10\66"+
    "\3\0\1\56\1\66\4\0\1\56\3\0\1\56\10\0"+
    "\1\66\1\211\1\0\3\66\6\0\30\56\2\0\1\56"+
    "\23\66\1\231\6\66\3\0\1\56\1\66\4\0\1\56"+
    "\3\0\1\56\10\0\1\66\1\211\1\0\3\66\6\0"+
    "\30\56\2\0\1\56\24\66\1\232\5\66\3\0\1\56"+
    "\1\66\4\0\1\56\3\0\1\56\10\0\1\66\1\211"+
    "\1\0\3\66\6\0\30\56\2\0\1\56\4\66\1\233"+
    "\3\66\1\234\21\66\3\0\1\56\1\66\4\0\1\56"+
    "\3\0\1\56\10\0\1\66\1\211\1\0\3\66\6\0"+
    "\30\56\2\0\1\56\1\235\31\66\3\0\1\56\1\66"+
    "\4\0\1\56\3\0\1\56\10\0\1\66\1\211\1\0"+
    "\3\66\6\0\30\56\2\0\1\56\1\236\23\66\1\237"+
    "\5\66\3\0\1\56\1\66\4\0\1\56\3\0\1\56"+
    "\10\0\1\66\1\211\1\0\3\66\6\0\30\56\2\0"+
    "\1\56\13\66\1\240\16\66\3\0\1\56\1\66\4\0"+
    "\1\56\3\0\1\56\10\0\1\66\1\211\1\0\3\66"+
    "\6\0\30\56\2\0\1\56\24\66\1\241\5\66\3\0"+
    "\1\56\1\66\4\0\1\56\3\0\1\56\10\0\1\66"+
    "\1\211\1\0\3\66\6\0\30\56\2\0\1\56\1\242"+
    "\3\66\1\243\3\66\1\244\5\66\1\245\13\66\3\0"+
    "\1\56\1\66\4\0\1\56\3\0\1\56\10\0\1\66"+
    "\1\211\1\0\3\66\6\0\30\56\2\0\1\56\1\246"+
    "\7\66\1\247\21\66\3\0\1\56\1\66\4\0\1\56"+
    "\3\0\1\56\10\0\1\66\1\211\1\0\3\66\6\0"+
    "\30\56\2\0\1\56\4\66\1\250\25\66\3\0\1\56"+
    "\1\66\4\0\1\56\3\0\1\56\10\0\1\66\1\211"+
    "\1\0\3\66\6\0\30\56\2\0\1\56\4\66\1\251"+
    "\25\66\3\0\1\56\1\66\5\0\1\167\24\0\1\252"+
    "\106\0\1\253\141\0\2\116\122\0\1\254\1\0\3\116"+
    "\105\0\1\166\24\0\1\255\126\0\1\256\126\0\1\257"+
    "\172\0\1\260\54\0\3\126\6\0\13\126\1\261\5\126"+
    "\1\262\6\126\2\0\33\126\3\0\2\126\24\0\3\126"+
    "\6\0\30\126\2\0\33\126\3\0\2\126\24\0\3\126"+
    "\6\0\1\263\27\126\2\0\1\264\32\126\3\0\2\126"+
    "\24\0\3\126\6\0\4\126\1\265\23\126\2\0\33\126"+
    "\3\0\2\126\24\0\3\126\6\0\13\126\1\266\1\126"+
    "\1\267\10\126\1\270\1\126\2\0\33\126\3\0\2\126"+
    "\24\0\3\126\6\0\23\126\1\271\4\126\2\0\33\126"+
    "\3\0\2\126\24\0\3\126\6\0\5\126\1\272\7\126"+
    "\1\273\12\126\2\0\33\126\3\0\2\126\24\0\3\126"+
    "\6\0\4\126\1\274\23\126\2\0\33\126\3\0\2\126"+
    "\24\0\3\126\6\0\23\126\1\275\4\126\2\0\33\126"+
    "\3\0\2\126\24\0\3\126\6\0\15\126\1\276\12\126"+
    "\2\0\33\126\3\0\2\126\24\0\3\126\6\0\20\126"+
    "\1\277\7\126\2\0\33\126\3\0\2\126\24\0\3\126"+
    "\6\0\4\126\1\300\23\126\2\0\33\126\3\0\2\126"+
    "\24\0\3\126\6\0\7\126\1\301\20\126\2\0\33\126"+
    "\3\0\2\126\24\0\3\126\6\0\7\126\1\302\20\126"+
    "\2\0\33\126\3\0\2\126\24\0\3\126\6\0\30\126"+
    "\2\0\17\126\1\303\13\126\3\0\2\126\24\0\3\126"+
    "\6\0\30\126\2\0\1\264\7\126\1\304\22\126\3\0"+
    "\2\126\24\0\3\126\6\0\30\126\2\0\5\126\1\305"+
    "\25\126\3\0\2\126\24\0\3\126\6\0\30\126\2\0"+
    "\1\126\1\306\31\126\3\0\2\126\24\0\3\126\6\0"+
    "\30\126\2\0\5\126\1\307\25\126\3\0\2\126\24\0"+
    "\3\126\6\0\30\126\2\0\16\126\1\310\14\126\3\0"+
    "\2\126\24\0\3\126\6\0\30\126\2\0\24\126\1\311"+
    "\6\126\3\0\2\126\24\0\3\126\6\0\30\126\2\0"+
    "\22\126\1\312\10\126\3\0\2\126\123\0\1\313\4\0"+
    "\5\160\1\0\4\160\1\0\114\160\12\314\1\0\113\314"+
    "\1\0\2\165\1\11\25\165\1\167\76\165\20\0\1\315"+
    "\106\0\2\167\1\0\124\167\35\0\1\316\1\0\1\317"+
    "\2\0\1\320\1\321\1\322\2\0\1\323\2\0\1\324"+
    "\1\325\1\0\1\326\1\327\11\0\1\316\1\0\1\317"+
    "\2\0\1\320\1\321\1\322\2\0\1\323\2\0\1\324"+
    "\1\325\2\0\1\326\1\327\126\0\1\330\105\0\1\331"+
    "\124\0\1\332\141\0\1\333\130\0\1\334\121\0\1\335"+
    "\122\0\1\336\136\0\1\337\114\0\1\340\152\0\1\341"+
    "\102\0\1\342\153\0\1\343\116\0\1\344\112\0\1\345"+
    "\57\0\3\346\6\0\6\346\25\0\6\346\35\0\1\211"+
    "\14\0\6\211\6\0\30\211\2\0\33\211\3\0\2\211"+
    "\21\0\1\212\1\211\1\0\3\212\41\0\27\212\1\347"+
    "\2\212\4\0\1\212\4\0\1\56\3\0\1\56\10\0"+
    "\1\56\2\0\3\56\6\0\30\56\2\0\11\56\1\350"+
    "\21\56\3\0\2\56\4\0\1\56\3\0\1\56\10\0"+
    "\1\56\2\0\3\56\6\0\30\56\2\0\25\56\1\351"+
    "\5\56\3\0\2\56\4\0\1\56\3\0\1\56\10\0"+
    "\1\56\2\0\3\56\6\0\30\56\2\0\16\56\1\352"+
    "\14\56\3\0\2\56\4\0\1\56\3\0\1\56\10\0"+
    "\1\56\2\0\3\56\6\0\16\56\1\353\11\56\2\0"+
    "\33\56\3\0\2\56\4\0\1\56\3\0\1\56\10\0"+
    "\1\56\2\0\3\56\6\0\30\56\2\0\22\56\1\354"+
    "\10\56\3\0\2\56\4\0\1\56\3\0\1\56\10\0"+
    "\1\66\1\211\1\0\3\66\6\0\30\56\2\0\1\56"+
    "\24\66\1\355\5\66\3\0\1\56\1\66\4\0\1\56"+
    "\3\0\1\56\10\0\1\66\1\211\1\0\3\66\6\0"+
    "\30\56\2\0\1\56\1\356\23\66\1\357\5\66\3\0"+
    "\1\56\1\66\4\0\1\56\3\0\1\56\10\0\1\66"+
    "\1\211\1\0\3\66\6\0\30\56\2\0\1\56\15\66"+
    "\1\360\14\66\3\0\1\56\1\66\4\0\1\56\3\0"+
    "\1\56\10\0\1\66\1\211\1\0\3\66\6\0\30\56"+
    "\2\0\1\56\4\66\1\361\25\66\3\0\1\56\1\66"+
    "\4\0\1\56\3\0\1\56\10\0\1\66\1\211\1\0"+
    "\3\66\6\0\30\56\2\0\1\56\13\66\1\362\16\66"+
    "\3\0\1\56\1\66\4\0\1\56\3\0\1\56\10\0"+
    "\1\66\1\211\1\0\3\66\6\0\30\56\2\0\1\56"+
    "\2\66\1\363\27\66\3\0\1\56\1\66\4\0\1\56"+
    "\3\0\1\56\10\0\1\66\1\211\1\0\3\66\6\0"+
    "\30\56\2\0\1\56\1\364\3\66\1\365\25\66\3\0"+
    "\1\56\1\66\4\0\1\56\3\0\1\56\10\0\1\66"+
    "\1\211\1\0\3\66\6\0\30\56\2\0\1\56\23\66"+
    "\1\366\6\66\3\0\1\56\1\66\4\0\1\56\3\0"+
    "\1\56\10\0\1\66\1\211\1\0\3\66\6\0\30\56"+
    "\2\0\1\56\22\66\1\367\7\66\3\0\1\56\1\66"+
    "\4\0\1\56\3\0\1\56\10\0\1\66\1\211\1\0"+
    "\3\66\6\0\30\56\2\0\1\56\5\66\1\370\24\66"+
    "\3\0\1\56\1\66\4\0\1\56\3\0\1\56\10\0"+
    "\1\66\1\211\1\0\3\66\6\0\30\56\2\0\1\56"+
    "\14\66\1\371\15\66\3\0\1\56\1\66\4\0\1\56"+
    "\3\0\1\56\10\0\1\66\1\211\1\0\3\66\6\0"+
    "\30\56\2\0\1\56\21\66\1\372\10\66\3\0\1\56"+
    "\1\66\4\0\1\56\3\0\1\56\10\0\1\66\1\211"+
    "\1\0\3\66\6\0\30\56\2\0\1\56\25\66\1\373"+
    "\4\66\3\0\1\56\1\66\4\0\1\56\3\0\1\56"+
    "\10\0\1\66\1\211\1\0\3\66\6\0\30\56\2\0"+
    "\1\56\14\66\1\374\15\66\3\0\1\56\1\66\4\0"+
    "\1\56\3\0\1\56\10\0\1\66\1\211\1\0\3\66"+
    "\6\0\30\56\2\0\1\56\10\66\1\375\21\66\3\0"+
    "\1\56\1\66\4\0\1\56\3\0\1\56\10\0\1\66"+
    "\1\211\1\0\3\66\6\0\30\56\2\0\1\56\21\66"+
    "\1\376\10\66\3\0\1\56\1\66\4\0\1\56\3\0"+
    "\1\56\10\0\1\66\1\211\1\0\3\66\6\0\30\56"+
    "\2\0\1\56\3\66\1\377\26\66\3\0\1\56\1\66"+
    "\4\0\1\56\3\0\1\56\10\0\1\66\1\211\1\0"+
    "\3\66\6\0\30\56\2\0\1\56\3\66\1\u0100\26\66"+
    "\3\0\1\56\1\66\4\0\1\56\3\0\1\56\10\0"+
    "\1\66\1\211\1\0\3\66\6\0\30\56\2\0\1\56"+
    "\6\66\1\u0101\23\66\3\0\1\56\1\66\4\0\1\56"+
    "\3\0\1\56\10\0\1\66\1\211\1\0\3\66\6\0"+
    "\30\56\2\0\1\56\26\66\1\u0102\3\66\3\0\1\56"+
    "\1\66\4\0\1\56\3\0\1\56\10\0\1\66\1\211"+
    "\1\0\3\66\6\0\30\56\2\0\1\56\15\66\1\u0103"+
    "\14\66\3\0\1\56\1\66\4\0\1\56\3\0\1\56"+
    "\10\0\1\66\1\211\1\0\3\66\6\0\30\56\2\0"+
    "\1\56\13\66\1\u0104\16\66\3\0\1\56\1\66\4\0"+
    "\1\56\3\0\1\56\10\0\1\66\1\211\1\0\3\66"+
    "\6\0\30\56\2\0\1\56\1\u0105\26\66\1\u0106\2\66"+
    "\3\0\1\56\1\66\4\0\1\56\3\0\1\56\10\0"+
    "\1\66\1\211\1\0\3\66\6\0\30\56\2\0\1\56"+
    "\13\66\1\u0107\16\66\3\0\1\56\1\66\24\0\3\u0108"+
    "\203\0\1\u0109\47\0\3\126\6\0\4\126\1\u010a\23\126"+
    "\2\0\33\126\3\0\2\126\24\0\3\126\6\0\2\126"+
    "\1\u010b\25\126\2\0\33\126\3\0\2\126\24\0\3\126"+
    "\6\0\20\126\1\u010c\7\126\2\0\33\126\3\0\2\126"+
    "\24\0\3\126\6\0\21\126\1\u010d\6\126\2\0\23\126"+
    "\1\u010d\7\126\3\0\2\126\24\0\3\126\6\0\21\126"+
    "\1\u010e\6\126\2\0\33\126\3\0\2\126\24\0\3\126"+
    "\6\0\21\126\1\u010f\6\126\2\0\33\126\3\0\2\126"+
    "\24\0\3\126\6\0\3\126\1\u0110\24\126\2\0\33\126"+
    "\3\0\2\126\24\0\3\126\6\0\10\126\1\u0111\17\126"+
    "\2\0\33\126\3\0\2\126\24\0\3\126\6\0\15\126"+
    "\1\u0112\12\126\2\0\33\126\3\0\2\126\24\0\3\126"+
    "\6\0\10\126\1\u0113\10\126\1\u0114\6\126\2\0\33\126"+
    "\3\0\2\126\24\0\3\126\6\0\22\126\1\u0115\5\126"+
    "\2\0\33\126\3\0\2\126\24\0\3\126\6\0\14\126"+
    "\1\u0116\13\126\2\0\33\126\3\0\2\126\24\0\3\126"+
    "\6\0\30\126\2\0\1\u0117\32\126\3\0\2\126\24\0"+
    "\3\126\6\0\16\126\1\u0118\11\126\2\0\33\126\3\0"+
    "\2\126\24\0\3\126\6\0\3\126\1\u0119\13\126\1\u011a"+
    "\4\126\1\u011b\3\126\2\0\33\126\3\0\2\126\24\0"+
    "\3\126\6\0\4\126\1\u011c\23\126\2\0\33\126\3\0"+
    "\2\126\24\0\3\126\6\0\10\126\1\u011d\17\126\2\0"+
    "\33\126\3\0\2\126\24\0\3\126\6\0\30\126\2\0"+
    "\17\126\1\u011e\13\126\3\0\2\126\24\0\3\126\6\0"+
    "\30\126\2\0\1\126\1\u011f\31\126\3\0\2\126\24\0"+
    "\3\126\6\0\30\126\2\0\3\126\1\u0120\27\126\3\0"+
    "\2\126\24\0\3\126\6\0\30\126\2\0\14\126\1\u0121"+
    "\16\126\3\0\2\126\24\0\3\126\6\0\30\126\2\0"+
    "\24\126\1\u0122\6\126\3\0\2\126\24\0\3\126\6\0"+
    "\30\126\2\0\24\126\1\u0123\6\126\3\0\2\126\24\0"+
    "\3\126\6\0\30\126\2\0\22\126\1\u0124\10\126\3\0"+
    "\2\126\24\0\3\126\6\0\30\126\2\0\25\126\1\u0125"+
    "\5\126\3\0\2\126\21\0\1\u0126\160\0\1\u0127\1\0"+
    "\1\u0128\2\0\1\u0129\25\0\1\u0127\2\0\1\u0128\2\0"+
    "\1\u0129\57\0\1\u012a\32\0\1\u012a\65\0\1\u012b\32\0"+
    "\1\u012b\61\0\1\u012c\13\0\1\u012d\32\0\1\u012d\103\0"+
    "\1\u012e\1\u012f\31\0\1\u012e\1\u012f\66\0\1\u0130\32\0"+
    "\1\u0130\102\0\1\u0131\32\0\1\u0131\56\0\1\u0132\1\0"+
    "\1\u0133\12\0\1\u0134\15\0\1\u0132\1\0\1\u0133\12\0"+
    "\1\u0134\60\0\1\u0135\3\0\1\u0136\26\0\1\u0135\3\0"+
    "\1\u0136\130\0\1\u0137\136\0\1\u0138\122\0\1\u0139\3\0"+
    "\1\u013a\127\0\1\u013b\111\0\1\u013c\125\0\1\u013d\125\0"+
    "\1\u013e\135\0\1\u013f\135\0\1\u0140\127\0\1\u0141\107\0"+
    "\1\u0142\145\0\1\u0143\37\0\3\u0144\6\0\6\u0144\25\0"+
    "\6\u0144\35\0\1\56\3\0\1\56\10\0\1\56\2\0"+
    "\3\56\6\0\30\56\2\0\1\56\1\u0145\31\56\3\0"+
    "\2\56\4\0\1\56\3\0\1\56\10\0\1\56\2\0"+
    "\3\56\6\0\30\56\2\0\22\56\1\u0146\10\56\3\0"+
    "\2\56\4\0\1\56\3\0\1\56\10\0\1\56\2\0"+
    "\3\56\6\0\30\56\2\0\5\56\1\u0147\25\56\3\0"+
    "\2\56\4\0\1\56\3\0\1\56\10\0\1\56\2\0"+
    "\3\56\6\0\2\56\1\u0148\25\56\2\0\33\56\3\0"+
    "\2\56\4\0\1\56\3\0\1\56\10\0\1\56\2\0"+
    "\3\56\6\0\30\56\2\0\4\56\1\u0149\26\56\3\0"+
    "\2\56\4\0\1\56\3\0\1\56\10\0\1\66\1\211"+
    "\1\0\3\66\6\0\30\56\2\0\1\56\1\u014a\31\66"+
    "\3\0\1\56\1\66\4\0\1\56\3\0\1\56\10\0"+
    "\1\66\1\211\1\0\3\66\6\0\30\56\2\0\1\56"+
    "\2\66\1\u014b\27\66\3\0\1\56\1\66\4\0\1\56"+
    "\3\0\1\56\10\0\1\66\1\211\1\0\3\66\6\0"+
    "\30\56\2\0\1\56\4\66\1\u014c\25\66\3\0\1\56"+
    "\1\66\4\0\1\56\3\0\1\56\10\0\1\66\1\211"+
    "\1\0\3\66\6\0\30\56\2\0\1\56\23\66\1\u014d"+
    "\6\66\3\0\1\56\1\66\4\0\1\56\3\0\1\56"+
    "\10\0\1\66\1\211\1\0\3\66\6\0\30\56\2\0"+
    "\1\56\2\66\1\u014e\27\66\3\0\1\56\1\66\4\0"+
    "\1\56\3\0\1\56\10\0\1\66\1\211\1\0\3\66"+
    "\6\0\30\56\2\0\1\56\24\66\1\u014f\5\66\3\0"+
    "\1\56\1\66\4\0\1\56\3\0\1\56\10\0\1\66"+
    "\1\211\1\0\3\66\6\0\30\56\2\0\1\56\7\66"+
    "\1\u0150\22\66\3\0\1\56\1\66\4\0\1\56\3\0"+
    "\1\56\10\0\1\66\1\211\1\0\3\66\6\0\30\56"+
    "\2\0\1\56\30\66\1\u0151\1\66\3\0\1\56\1\66"+
    "\4\0\1\56\3\0\1\56\10\0\1\66\1\211\1\0"+
    "\3\66\6\0\30\56\2\0\1\56\4\66\1\u0152\25\66"+
    "\3\0\1\56\1\66\4\0\1\56\3\0\1\56\10\0"+
    "\1\66\1\211\1\0\3\66\6\0\30\56\2\0\1\56"+
    "\17\66\1\u0153\12\66\3\0\1\56\1\66\4\0\1\56"+
    "\3\0\1\56\10\0\1\66\1\211\1\0\3\66\6\0"+
    "\30\56\2\0\1\56\23\66\1\u0154\6\66\3\0\1\56"+
    "\1\66\4\0\1\56\3\0\1\56\10\0\1\66\1\211"+
    "\1\0\3\66\6\0\30\56\2\0\1\56\23\66\1\u0155"+
    "\6\66\3\0\1\56\1\66\4\0\1\56\3\0\1\56"+
    "\10\0\1\66\1\211\1\0\3\66\6\0\30\56\2\0"+
    "\1\56\4\66\1\u0156\25\66\3\0\1\56\1\66\4\0"+
    "\1\56\3\0\1\56\10\0\1\66\1\211\1\0\3\66"+
    "\6\0\30\56\2\0\1\56\21\66\1\u0157\10\66\3\0"+
    "\1\56\1\66\4\0\1\56\3\0\1\56\10\0\1\66"+
    "\1\211\1\0\3\66\6\0\30\56\2\0\1\56\30\66"+
    "\1\u0158\1\66\3\0\1\56\1\66\4\0\1\56\3\0"+
    "\1\56\10\0\1\66\1\211\1\0\3\66\6\0\30\56"+
    "\2\0\1\56\1\66\1\u0159\30\66\3\0\1\56\1\66"+
    "\4\0\1\56\3\0\1\56\10\0\1\66\1\211\1\0"+
    "\3\66\6\0\30\56\2\0\1\56\25\66\1\u015a\4\66"+
    "\3\0\1\56\1\66\4\0\1\56\3\0\1\56\10\0"+
    "\1\66\1\211\1\0\3\66\6\0\30\56\2\0\1\56"+
    "\17\66\1\u015b\12\66\3\0\1\56\1\66\4\0\1\56"+
    "\3\0\1\56\10\0\1\66\1\211\1\0\3\66\6\0"+
    "\30\56\2\0\1\56\10\66\1\u015c\21\66\3\0\1\56"+
    "\1\66\4\0\1\56\3\0\1\56\10\0\1\66\1\211"+
    "\1\0\3\66\6\0\30\56\2\0\1\56\7\66\1\u015d"+
    "\22\66\3\0\1\56\1\66\4\0\1\56\3\0\1\56"+
    "\10\0\1\66\1\211\1\0\3\66\6\0\30\56\2\0"+
    "\1\56\22\66\1\u015e\7\66\3\0\1\56\1\66\4\0"+
    "\1\56\3\0\1\56\10\0\1\66\1\211\1\0\3\66"+
    "\6\0\30\56\2\0\1\56\25\66\1\u015f\4\66\3\0"+
    "\1\56\1\66\4\0\1\56\3\0\1\56\10\0\1\66"+
    "\1\211\1\0\3\66\6\0\30\56\2\0\1\56\13\66"+
    "\1\u0160\16\66\3\0\1\56\1\66\4\0\1\56\3\0"+
    "\1\56\10\0\1\66\1\211\1\0\3\66\6\0\30\56"+
    "\2\0\1\56\23\66\1\u0161\6\66\3\0\1\56\1\66"+
    "\4\0\1\56\3\0\1\56\10\0\1\66\1\211\1\0"+
    "\3\66\6\0\30\56\2\0\1\56\13\66\1\u0162\16\66"+
    "\3\0\1\56\1\66\24\0\1\u0163\2\u0108\206\0\1\u0164"+
    "\44\0\3\126\6\0\20\126\1\u0165\7\126\2\0\33\126"+
    "\3\0\2\126\24\0\3\126\6\0\1\u0166\27\126\2\0"+
    "\33\126\3\0\2\126\24\0\3\126\6\0\2\126\1\u0167"+
    "\25\126\2\0\3\126\1\u0167\27\126\3\0\2\126\24\0"+
    "\3\126\6\0\2\126\1\u0168\25\126\2\0\33\126\3\0"+
    "\2\126\24\0\3\126\6\0\4\126\1\u0169\23\126\2\0"+
    "\33\126\3\0\2\126\24\0\3\126\6\0\22\126\1\u016a"+
    "\5\126\2\0\33\126\3\0\2\126\24\0\3\126\6\0"+
    "\22\126\1\u016b\5\126\2\0\33\126\3\0\2\126\24\0"+
    "\3\126\6\0\22\126\1\u016c\5\126\2\0\33\126\3\0"+
    "\2\126\24\0\3\126\6\0\4\126\1\u016d\23\126\2\0"+
    "\33\126\3\0\2\126\24\0\3\126\6\0\10\126\1\u016e"+
    "\6\126\1\u016f\10\126\2\0\33\126\3\0\2\126\24\0"+
    "\3\126\6\0\30\126\2\0\1\u0170\32\126\3\0\2\126"+
    "\24\0\3\126\6\0\13\126\1\u0171\14\126\2\0\33\126"+
    "\3\0\2\126\24\0\3\126\6\0\2\126\1\u0172\25\126"+
    "\2\0\33\126\3\0\2\126\24\0\3\126\6\0\10\126"+
    "\1\u0173\17\126\2\0\33\126\3\0\2\126\24\0\3\126"+
    "\6\0\4\126\1\u0174\23\126\2\0\33\126\3\0\2\126"+
    "\24\0\3\126\6\0\4\126\1\u0175\23\126\2\0\33\126"+
    "\3\0\2\126\24\0\3\126\6\0\15\126\1\u0176\12\126"+
    "\2\0\33\126\3\0\2\126\24\0\3\126\6\0\13\126"+
    "\1\u0177\14\126\2\0\33\126\3\0\2\126\24\0\3\126"+
    "\6\0\30\126\2\0\14\126\1\u0178\16\126\3\0\2\126"+
    "\24\0\3\126\6\0\30\126\2\0\22\126\1\u0179\10\126"+
    "\3\0\2\126\24\0\3\126\6\0\30\126\2\0\11\126"+
    "\1\u017a\21\126\3\0\2\126\24\0\3\126\6\0\30\126"+
    "\2\0\23\126\1\u017b\7\126\3\0\2\126\24\0\3\126"+
    "\6\0\4\126\1\u017c\23\126\2\0\33\126\3\0\2\126"+
    "\24\0\3\126\6\0\30\126\2\0\5\126\1\u017d\25\126"+
    "\3\0\2\126\24\0\3\126\6\0\30\126\2\0\11\126"+
    "\1\u017e\21\126\3\0\2\126\24\0\3\126\6\0\30\126"+
    "\2\0\5\126\1\u017f\25\126\3\0\2\126\1\0\20\u0126"+
    "\1\u0180\106\u0126\37\0\1\u0181\32\0\1\u0181\112\0\1\u0182"+
    "\33\0\1\u0182\74\0\1\u0183\33\0\1\u0183\56\0\1\u0184"+
    "\32\0\1\u0184\63\0\1\u0185\32\0\1\u0185\101\0\1\u0186"+
    "\32\0\1\u0186\104\0\1\u0187\32\0\1\u0187\71\0\1\u0188"+
    "\32\0\1\u0188\100\0\1\u0189\33\0\1\u0189\70\0\1\u018a"+
    "\33\0\1\u018a\65\0\1\u018b\32\0\1\u018b\60\0\1\u018c"+
    "\32\0\1\u018c\121\0\1\u018d\33\0\1\u018d\66\0\1\u018e"+
    "\33\0\1\u018e\111\0\1\u018f\142\0\1\u0190\125\0\1\u0191"+
    "\36\0\1\u0192\204\0\1\u0193\127\0\1\u0194\47\0\1\u0195"+
    "\204\0\1\u0196\53\0\3\u0197\6\0\6\u0197\25\0\6\u0197"+
    "\35\0\1\56\3\0\1\56\10\0\1\56\2\0\3\56"+
    "\6\0\30\56\2\0\14\56\1\u0198\16\56\3\0\2\56"+
    "\4\0\1\56\3\0\1\56\10\0\1\56\2\0\3\56"+
    "\6\0\30\56\2\0\11\56\1\u0199\21\56\3\0\2\56"+
    "\4\0\1\56\3\0\1\56\10\0\1\56\2\0\3\56"+
    "\6\0\30\56\2\0\26\56\1\u019a\4\56\3\0\2\56"+
    "\4\0\1\56\3\0\1\56\10\0\1\56\2\0\3\56"+
    "\6\0\4\56\1\u019b\23\56\2\0\33\56\3\0\2\56"+
    "\4\0\1\56\3\0\1\56\10\0\1\56\2\0\3\56"+
    "\6\0\30\56\2\0\1\56\1\u019c\31\56\3\0\2\56"+
    "\4\0\1\56\3\0\1\56\10\0\1\66\1\211\1\0"+
    "\3\66\6\0\30\56\2\0\1\56\12\66\1\u019d\17\66"+
    "\3\0\1\56\1\66\4\0\1\56\3\0\1\56\10\0"+
    "\1\66\1\211\1\0\3\66\6\0\30\56\2\0\1\56"+
    "\4\66\1\u019e\25\66\3\0\1\56\1\66\4\0\1\56"+
    "\3\0\1\56\10\0\1\66\1\211\1\0\3\66\6\0"+
    "\30\56\2\0\1\56\12\66\1\u019f\17\66\3\0\1\56"+
    "\1\66\4\0\1\56\3\0\1\56\10\0\1\66\1\211"+
    "\1\0\3\66\6\0\30\56\2\0\1\56\14\66\1\u01a0"+
    "\15\66\3\0\1\56\1\66\4\0\1\56\3\0\1\56"+
    "\10\0\1\66\1\211\1\0\3\66\6\0\30\56\2\0"+
    "\1\56\22\66\1\u01a1\7\66\3\0\1\56\1\66\4\0"+
    "\1\56\3\0\1\56\10\0\1\66\1\211\1\0\3\66"+
    "\6\0\30\56\2\0\1\56\15\66\1\u01a2\14\66\3\0"+
    "\1\56\1\66\4\0\1\56\3\0\1\56\10\0\1\66"+
    "\1\211\1\0\3\66\1\u01a3\5\0\30\56\2\0\1\56"+
    "\22\66\1\u01a4\7\66\3\0\1\56\1\66\4\0\1\56"+
    "\3\0\1\56\10\0\1\66\1\211\1\0\3\66\6\0"+
    "\30\56\2\0\1\56\10\66\1\u01a5\21\66\3\0\1\56"+
    "\1\66\4\0\1\56\3\0\1\56\10\0\1\66\1\211"+
    "\1\0\3\66\6\0\30\56\2\0\1\56\16\66\1\u01a6"+
    "\13\66\3\0\1\56\1\66\4\0\1\56\3\0\1\56"+
    "\10\0\1\66\1\211\1\0\3\66\6\0\30\56\2\0"+
    "\1\56\4\66\1\u01a7\25\66\3\0\1\56\1\66\4\0"+
    "\1\56\3\0\1\56\10\0\1\66\1\211\1\0\3\66"+
    "\6\0\30\56\2\0\1\56\4\66\1\u01a8\25\66\3\0"+
    "\1\56\1\66\4\0\1\56\3\0\1\56\10\0\1\66"+
    "\1\211\1\0\3\66\6\0\30\56\2\0\1\56\13\66"+
    "\1\u01a9\16\66\3\0\1\56\1\66\4\0\1\56\3\0"+
    "\1\56\10\0\1\66\1\211\1\0\3\66\6\0\30\56"+
    "\2\0\1\56\16\66\1\u01aa\13\66\3\0\1\56\1\66"+
    "\4\0\1\56\3\0\1\56\10\0\1\66\1\211\1\0"+
    "\3\66\6\0\30\56\2\0\1\56\23\66\1\u01ab\6\66"+
    "\3\0\1\56\1\66\4\0\1\56\3\0\1\56\10\0"+
    "\1\u01ac\1\211\1\0\3\66\6\0\30\56\2\0\1\56"+
    "\32\66\3\0\1\56\1\66\4\0\1\56\3\0\1\56"+
    "\10\0\1\66\1\211\1\0\3\66\6\0\30\56\2\0"+
    "\1\56\4\66\1\u01ad\25\66\3\0\1\56\1\66\4\0"+
    "\1\56\3\0\1\56\10\0\1\66\1\211\1\0\3\66"+
    "\6\0\30\56\2\0\1\56\16\66\1\u01ae\13\66\3\0"+
    "\1\56\1\66\71\0\1\u01af\61\0\3\126\6\0\22\126"+
    "\1\u01b0\5\126\2\0\33\126\3\0\2\126\24\0\3\126"+
    "\6\0\2\126\1\u01b1\25\126\2\0\33\126\3\0\2\126"+
    "\24\0\3\126\6\0\20\126\1\u01b2\7\126\2\0\22\126"+
    "\1\u01b2\10\126\3\0\2\126\24\0\3\126\6\0\10\126"+
    "\1\u01b3\17\126\2\0\33\126\3\0\2\126\24\0\3\126"+
    "\6\0\20\126\1\u01b4\7\126\2\0\33\126\3\0\2\126"+
    "\24\0\3\126\6\0\14\126\1\u01b5\13\126\2\0\33\126"+
    "\3\0\2\126\24\0\3\126\6\0\1\u01b6\27\126\2\0"+
    "\33\126\3\0\2\126\24\0\3\126\6\0\1\u01b7\27\126"+
    "\2\0\33\126\3\0\2\126\24\0\3\126\6\0\16\126"+
    "\1\u01b8\11\126\2\0\33\126\3\0\2\126\24\0\3\126"+
    "\6\0\4\126\1\u01b9\23\126\2\0\33\126\3\0\2\126"+
    "\24\0\3\126\6\0\20\126\1\u01ba\7\126\2\0\33\126"+
    "\3\0\2\126\24\0\3\126\6\0\1\u01bb\27\126\2\0"+
    "\33\126\3\0\2\126\24\0\3\126\6\0\20\126\1\u01bc"+
    "\7\126\2\0\33\126\3\0\2\126\24\0\3\126\6\0"+
    "\25\126\1\u01bd\2\126\2\0\33\126\3\0\2\126\24\0"+
    "\3\126\6\0\4\126\1\u01be\23\126\2\0\33\126\3\0"+
    "\2\126\24\0\3\126\6\0\30\126\2\0\5\126\1\u01bf"+
    "\25\126\3\0\2\126\24\0\3\126\6\0\30\126\2\0"+
    "\15\126\1\u01c0\15\126\3\0\2\126\24\0\3\126\6\0"+
    "\30\126\2\0\5\126\1\u01c1\25\126\3\0\2\126\24\0"+
    "\3\126\6\0\30\126\2\0\14\126\1\u01c2\16\126\3\0"+
    "\2\126\24\0\3\126\6\0\30\126\2\0\7\126\1\u01c3"+
    "\23\126\3\0\2\126\24\0\3\126\6\0\30\126\2\0"+
    "\16\126\1\u01c4\14\126\3\0\2\126\1\0\20\u0126\1\u01c5"+
    "\106\u0126\63\0\1\u01c6\33\0\1\u01c6\65\0\1\u01c7\33\0"+
    "\1\u01c7\52\0\1\u01c8\32\0\1\u01c8\74\0\1\u01c9\32\0"+
    "\1\u01c9\113\0\1\u01ca\33\0\1\u01ca\61\0\1\u01cb\32\0"+
    "\1\u01cb\71\0\1\u01cc\32\0\1\u01cc\73\0\1\u01cd\32\0"+
    "\1\u01cd\67\0\1\u01ce\32\0\1\u01ce\103\0\1\u01cf\32\0"+
    "\1\u01cf\101\0\1\u01d0\33\0\1\u01d0\63\0\1\u01d1\32\0"+
    "\1\u01d1\134\0\1\u01d2\112\0\1\u01d3\14\0\1\u01d4\127\0"+
    "\1\u01d5\105\0\1\u01d6\124\0\1\u01d7\62\0\3\u01d8\6\0"+
    "\6\u01d8\25\0\6\u01d8\35\0\1\56\3\0\1\56\10\0"+
    "\1\56\2\0\3\56\6\0\30\56\2\0\5\56\1\u01d9"+
    "\25\56\3\0\2\56\4\0\1\56\3\0\1\56\10\0"+
    "\1\56\2\0\3\56\6\0\30\56\2\0\1\56\1\u01da"+
    "\31\56\3\0\2\56\4\0\1\56\3\0\1\56\10\0"+
    "\1\56\2\0\3\56\6\0\21\56\1\u01db\6\56\2\0"+
    "\33\56\3\0\2\56\4\0\1\56\3\0\1\56\10\0"+
    "\1\56\2\0\3\56\6\0\30\56\2\0\16\56\1\u01dc"+
    "\14\56\3\0\2\56\4\0\1\56\3\0\1\56\10\0"+
    "\1\66\1\211\1\0\3\66\6\0\30\56\2\0\1\56"+
    "\21\66\1\u01dd\10\66\3\0\1\56\1\66\4\0\1\56"+
    "\3\0\1\56\10\0\1\66\1\211\1\0\3\66\6\0"+
    "\30\56\2\0\1\56\1\66\1\u01de\30\66\3\0\1\56"+
    "\1\66\4\0\1\56\3\0\1\56\10\0\1\66\1\211"+
    "\1\0\3\66\6\0\30\56\2\0\1\56\15\66\1\u01df"+
    "\14\66\3\0\1\56\1\66\4\0\1\56\3\0\1\56"+
    "\10\0\1\66\1\211\1\0\3\66\6\0\30\56\2\0"+
    "\1\56\10\66\1\u01e0\21\66\3\0\1\56\1\66\23\0"+
    "\1\u01e1\107\0\1\56\3\0\1\56\10\0\1\66\1\211"+
    "\1\0\3\66\1\u01a3\5\0\30\56\2\0\1\56\32\66"+
    "\3\0\1\56\1\66\4\0\1\56\3\0\1\56\10\0"+
    "\1\66\1\211\1\0\3\66\6\0\30\56\2\0\1\56"+
    "\5\66\1\u01e2\24\66\3\0\1\56\1\66\4\0\1\56"+
    "\3\0\1\56\10\0\1\66\1\211\1\0\3\66\6\0"+
    "\30\56\2\0\1\56\15\66\1\u01e3\14\66\3\0\1\56"+
    "\1\66\4\0\1\56\3\0\1\56\10\0\1\66\1\211"+
    "\1\0\3\66\6\0\30\56\2\0\1\56\21\66\1\u01e4"+
    "\10\66\3\0\1\56\1\66\4\0\1\56\3\0\1\56"+
    "\10\0\1\66\1\211\1\0\3\66\6\0\30\56\2\0"+
    "\1\56\4\66\1\u01e5\25\66\3\0\1\56\1\66\4\0"+
    "\1\56\3\0\1\56\10\0\1\66\1\211\1\0\3\66"+
    "\6\0\30\56\2\0\1\56\22\66\1\u01e6\7\66\3\0"+
    "\1\56\1\66\4\0\1\56\3\0\1\56\10\0\1\66"+
    "\1\211\1\0\3\66\6\0\30\56\2\0\1\56\21\66"+
    "\1\u01e7\10\66\3\0\1\56\1\66\4\0\1\56\3\0"+
    "\1\56\10\0\1\66\1\211\1\0\3\66\6\0\30\56"+
    "\2\0\1\56\26\66\1\u01e8\3\66\3\0\1\56\1\66"+
    "\70\0\1\u01e9\62\0\3\126\6\0\30\126\2\0\1\u01ea"+
    "\32\126\3\0\2\126\24\0\3\126\6\0\22\126\1\u01eb"+
    "\5\126\2\0\33\126\3\0\2\126\24\0\3\126\6\0"+
    "\10\126\1\u01ec\17\126\2\0\11\126\1\u01ec\21\126\3\0"+
    "\2\126\24\0\3\126\6\0\13\126\1\u01ed\14\126\2\0"+
    "\33\126\3\0\2\126\24\0\3\126\6\0\22\126\1\u01ee"+
    "\5\126\2\0\33\126\3\0\2\126\24\0\3\126\6\0"+
    "\17\126\1\u01ef\10\126\2\0\33\126\3\0\2\126\24\0"+
    "\3\126\6\0\20\126\1\u01f0\7\126\2\0\33\126\3\0"+
    "\2\126\24\0\3\126\6\0\13\126\1\u01f1\14\126\2\0"+
    "\33\126\3\0\2\126\24\0\3\126\6\0\1\u01f2\27\126"+
    "\2\0\33\126\3\0\2\126\24\0\3\126\6\0\21\126"+
    "\1\u01f3\6\126\2\0\33\126\3\0\2\126\24\0\3\126"+
    "\6\0\4\126\1\u01f4\23\126\2\0\33\126\3\0\2\126"+
    "\24\0\3\126\6\0\22\126\1\u01f5\5\126\2\0\33\126"+
    "\3\0\2\126\24\0\3\126\6\0\21\126\1\u01f6\6\126"+
    "\2\0\33\126\3\0\2\126\24\0\3\126\6\0\7\126"+
    "\1\u01f7\20\126\2\0\33\126\3\0\2\126\24\0\3\126"+
    "\6\0\30\126\2\0\1\126\1\u01f8\31\126\3\0\2\126"+
    "\24\0\3\126\6\0\30\126\2\0\1\126\1\u01f9\31\126"+
    "\3\0\2\126\24\0\3\126\6\0\30\126\2\0\5\126"+
    "\1\u01fa\25\126\3\0\2\126\24\0\3\126\6\0\30\126"+
    "\2\0\5\126\1\u01fb\25\126\3\0\2\126\24\0\3\126"+
    "\6\0\30\126\2\0\7\126\1\u01fc\23\126\3\0\2\126"+
    "\1\0\20\u0126\1\u01c5\11\u0126\1\u01fd\74\u0126\52\0\1\u01fe"+
    "\32\0\1\u01fe\77\0\1\u01ff\33\0\1\u01ff\66\0\1\u0200"+
    "\32\0\1\u0200\74\0\1\u0201\32\0\1\u0201\56\0\1\u0202"+
    "\32\0\1\u0202\71\0\1\u0203\32\0\1\u0203\77\0\1\u0204"+
    "\32\0\1\u0204\140\0\1\u0205\110\0\1\u0206\136\0\1\u0207"+
    "\130\0\1\u0208\127\0\1\u0209\47\0\3\u020a\6\0\6\u020a"+
    "\25\0\6\u020a\35\0\1\56\3\0\1\56\10\0\1\56"+
    "\2\0\3\56\6\0\30\56\2\0\22\56\1\u020b\10\56"+
    "\3\0\2\56\4\0\1\56\3\0\1\56\10\0\1\56"+
    "\2\0\3\56\6\0\21\56\1\u020c\6\56\2\0\33\56"+
    "\3\0\2\56\4\0\1\56\3\0\1\56\10\0\1\56"+
    "\2\0\3\56\6\0\30\56\2\0\1\56\1\u020d\31\56"+
    "\3\0\2\56\4\0\1\56\3\0\1\56\10\0\1\66"+
    "\1\211\1\0\3\66\6\0\30\56\2\0\1\56\16\66"+
    "\1\u020e\13\66\3\0\1\56\1\66\4\0\1\56\3\0"+
    "\1\56\10\0\1\66\1\211\1\0\3\66\6\0\30\56"+
    "\2\0\1\56\1\u020f\31\66\3\0\1\56\1\66\23\0"+
    "\1\u0210\107\0\1\56\3\0\1\56\10\0\1\66\1\211"+
    "\1\0\3\66\6\0\30\56\2\0\1\56\30\66\1\u0211"+
    "\1\66\3\0\1\56\1\66\4\0\1\56\3\0\1\56"+
    "\10\0\1\66\1\211\1\0\3\66\6\0\30\56\2\0"+
    "\1\56\4\66\1\u0212\25\66\3\0\1\56\1\66\103\0"+
    "\1\u0213\47\0\3\126\6\0\10\126\1\u0214\17\126\2\0"+
    "\33\126\3\0\2\126\24\0\3\126\6\0\4\126\1\u0215"+
    "\23\126\2\0\33\126\3\0\2\126\24\0\3\126\6\0"+
    "\17\126\1\u0216\10\126\2\0\20\126\1\u0216\12\126\3\0"+
    "\2\126\24\0\3\126\6\0\1\u0217\27\126\2\0\33\126"+
    "\3\0\2\126\24\0\3\126\6\0\30\126\2\0\1\u0218"+
    "\32\126\3\0\2\126\24\0\3\126\6\0\4\126\1\u0219"+
    "\23\126\2\0\33\126\3\0\2\126\24\0\3\126\6\0"+
    "\3\126\1\u021a\24\126\2\0\33\126\3\0\2\126\24\0"+
    "\3\126\6\0\21\126\1\u021b\6\126\2\0\33\126\3\0"+
    "\2\126\24\0\3\126\6\0\2\126\1\u021c\25\126\2\0"+
    "\33\126\3\0\2\126\24\0\3\126\6\0\4\126\1\u021d"+
    "\23\126\2\0\33\126\3\0\2\126\24\0\3\126\6\0"+
    "\10\126\1\u021e\17\126\2\0\33\126\3\0\2\126\24\0"+
    "\3\126\6\0\30\126\2\0\16\126\1\u021f\14\126\3\0"+
    "\2\126\24\0\3\126\6\0\30\126\2\0\14\126\1\u0220"+
    "\16\126\3\0\2\126\24\0\3\126\6\0\30\126\2\0"+
    "\15\126\1\u0221\15\126\3\0\2\126\24\0\3\126\6\0"+
    "\30\126\2\0\22\126\1\u0222\10\126\3\0\2\126\52\0"+
    "\1\u0223\32\0\1\u0223\73\0\1\u0224\32\0\1\u0224\100\0"+
    "\1\u0225\33\0\1\u0225\72\0\1\u0226\33\0\1\u0226\70\0"+
    "\1\u0227\33\0\1\u0227\131\0\1\u0228\116\0\1\u0229\143\0"+
    "\1\u022a\105\0\1\u022b\32\0\1\56\3\0\1\56\10\0"+
    "\1\56\2\0\3\56\6\0\30\56\2\0\1\u022c\32\56"+
    "\3\0\2\56\4\0\1\56\3\0\1\56\10\0\1\66"+
    "\1\211\1\0\3\66\6\0\30\56\2\0\1\56\27\66"+
    "\1\u022d\2\66\3\0\1\56\1\66\21\0\2\212\1\0"+
    "\3\212\41\0\32\212\4\0\1\212\4\0\1\56\3\0"+
    "\1\56\10\0\1\66\1\211\1\0\3\66\6\0\30\56"+
    "\2\0\1\56\21\66\1\u022e\10\66\3\0\1\56\1\66"+
    "\24\0\3\126\6\0\15\126\1\u022f\12\126\2\0\33\126"+
    "\3\0\2\126\24\0\3\126\6\0\20\126\1\u0230\7\126"+
    "\2\0\33\126\3\0\2\126\24\0\3\126\6\0\22\126"+
    "\1\u0231\5\126\2\0\24\126\1\u0231\6\126\3\0\2\126"+
    "\24\0\3\126\6\0\20\126\1\u0232\7\126\2\0\33\126"+
    "\3\0\2\126\24\0\3\126\6\0\15\126\1\u0233\12\126"+
    "\2\0\33\126\3\0\2\126\24\0\3\126\6\0\1\u0234"+
    "\27\126\2\0\33\126\3\0\2\126\24\0\3\126\6\0"+
    "\30\126\2\0\1\u0235\32\126\3\0\2\126\24\0\3\126"+
    "\6\0\22\126\1\u0236\5\126\2\0\33\126\3\0\2\126"+
    "\24\0\3\126\6\0\13\126\1\u0237\14\126\2\0\33\126"+
    "\3\0\2\126\24\0\3\126\6\0\30\126\2\0\5\126"+
    "\1\u0238\25\126\3\0\2\126\45\0\1\u0239\32\0\1\u0239"+
    "\67\0\1\u023a\32\0\1\u023a\137\0\1\u023b\121\0\1\u023c"+
    "\122\0\1\u023d\130\0\1\u023e\34\0\1\56\3\0\1\56"+
    "\10\0\1\56\2\0\3\u022c\6\0\30\u022c\2\0\33\u022c"+
    "\3\0\2\u022c\4\0\1\56\3\0\1\56\10\0\1\66"+
    "\1\211\1\0\3\66\6\0\30\56\2\0\1\56\10\66"+
    "\1\u023f\21\66\3\0\1\56\1\66\24\0\3\126\6\0"+
    "\5\126\1\u0240\22\126\2\0\33\126\3\0\2\126\24\0"+
    "\3\126\6\0\30\126\2\0\1\u0241\32\126\3\0\2\126"+
    "\24\0\3\126\6\0\10\126\1\u0242\17\126\2\0\11\126"+
    "\1\u0242\21\126\3\0\2\126\24\0\3\126\6\0\30\126"+
    "\2\0\1\u0243\32\126\3\0\2\126\24\0\3\126\6\0"+
    "\23\126\1\u0244\4\126\2\0\33\126\3\0\2\126\24\0"+
    "\3\126\6\0\22\126\1\u0245\5\126\2\0\33\126\3\0"+
    "\2\126\24\0\3\u0235\6\0\30\u0235\2\0\33\u0235\3\0"+
    "\2\u0235\24\0\3\126\6\0\4\126\1\u0246\23\126\2\0"+
    "\33\126\3\0\2\126\24\0\3\126\6\0\30\126\2\0"+
    "\16\126\1\u0247\14\126\3\0\2\126\52\0\1\u0248\32\0"+
    "\1\u0248\56\0\1\u0249\32\0\1\u0249\131\0\1\u024a\136\0"+
    "\1\u024b\130\0\1\u024c\25\0\1\56\3\0\1\56\10\0"+
    "\1\66\1\211\1\0\3\66\6\0\30\56\2\0\1\56"+
    "\5\66\1\u024d\24\66\3\0\1\56\1\66\24\0\3\126"+
    "\6\0\16\126\1\u024e\11\126\2\0\33\126\3\0\2\126"+
    "\24\0\3\126\6\0\1\u024f\27\126\2\0\33\126\3\0"+
    "\2\126\24\0\3\126\6\0\15\126\1\u0250\12\126\2\0"+
    "\16\126\1\u0250\14\126\3\0\2\126\24\0\3\126\6\0"+
    "\15\126\1\u0251\12\126\2\0\33\126\3\0\2\126\24\0"+
    "\3\126\6\0\14\126\1\u0252\13\126\2\0\33\126\3\0"+
    "\2\126\24\0\3\126\6\0\16\126\1\u0253\11\126\2\0"+
    "\33\126\3\0\2\126\24\0\3\126\6\0\1\126\1\u0254"+
    "\26\126\2\0\33\126\3\0\2\126\43\0\1\u0255\32\0"+
    "\1\u0255\150\0\1\u0256\32\0\3\126\6\0\13\126\1\u0257"+
    "\14\126\2\0\33\126\3\0\2\126\24\0\3\126\6\0"+
    "\6\126\1\u0258\21\126\2\0\7\126\1\u0258\23\126\3\0"+
    "\2\126\24\0\3\126\6\0\23\126\1\u0259\4\126\2\0"+
    "\33\126\3\0\2\126\24\0\3\126\6\0\20\126\1\u025a"+
    "\7\126\2\0\33\126\3\0\2\126\24\0\3\126\6\0"+
    "\30\126\2\0\31\126\1\u025b\1\126\3\0\2\126\24\0"+
    "\3\126\6\0\4\126\1\u025c\23\126\2\0\33\126\3\0"+
    "\2\126\24\0\3\126\6\0\14\126\1\u025d\13\126\2\0"+
    "\33\126\3\0\2\126\24\0\3\126\6\0\10\126\1\u025e"+
    "\17\126\2\0\33\126\3\0\2\126\24\0\3\126\6\0"+
    "\10\126\1\u025f\17\126\2\0\33\126\3\0\2\126\24\0"+
    "\3\126\6\0\1\u0260\27\126\2\0\33\126\3\0\2\126"+
    "\24\0\3\126\6\0\16\126\1\u0261\11\126\2\0\33\126"+
    "\3\0\2\126\24\0\3\126\6\0\30\126\2\0\4\126"+
    "\1\u0262\26\126\3\0\2\126\24\0\3\126\6\0\22\126"+
    "\1\u0263\5\126\2\0\33\126\3\0\2\126\24\0\3\126"+
    "\6\0\16\126\1\u0264\11\126\2\0\33\126\3\0\2\126"+
    "\24\0\3\126\6\0\20\126\1\u0265\7\126\2\0\33\126"+
    "\3\0\2\126\24\0\3\126\6\0\10\126\1\u0266\17\126"+
    "\2\0\33\126\3\0\2\126\24\0\3\126\6\0\16\126"+
    "\1\u0267\11\126\2\0\33\126\3\0\2\126\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[41934];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\4\1\1\11\2\1\1\11\1\1\1\11\1\1"+
    "\4\11\14\1\1\11\2\1\2\11\34\1\1\11\1\1"+
    "\4\11\1\1\2\11\1\1\2\11\22\1\2\11\10\1"+
    "\1\11\1\1\1\11\1\1\1\11\2\1\1\11\1\1"+
    "\1\0\1\1\10\0\1\11\10\0\1\1\1\0\1\11"+
    "\1\0\35\1\2\11\1\0\3\11\1\0\32\1\1\11"+
    "\1\1\10\0\1\11\2\0\1\11\11\0\1\11\4\0"+
    "\42\1\1\0\34\1\2\0\1\11\3\0\1\11\15\0"+
    "\1\11\2\0\2\11\1\0\1\11\1\0\1\11\1\0"+
    "\37\1\2\0\33\1\3\0\1\11\2\0\1\11\11\0"+
    "\2\11\4\0\1\11\1\0\13\1\1\0\13\1\1\0"+
    "\25\1\1\0\1\11\1\0\2\11\1\0\1\11\3\0"+
    "\1\11\5\0\1\11\3\0\10\1\1\0\7\1\1\0"+
    "\23\1\1\11\1\0\1\11\4\0\1\11\3\0\1\11"+
    "\1\0\1\11\5\1\1\0\2\1\1\11\17\1\2\11"+
    "\1\0\1\11\5\0\15\1\4\0\1\11\1\0\11\1"+
    "\1\0\2\11\1\0\1\11\10\1\2\11\21\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[615];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private List<ErrorAnalisis> errores = new ArrayList();
    private StringBuilder literal = new StringBuilder();

    private Symbol symbol(int type){
        return new Symbol(type, new Token(yyline, yycolumn, yytext()));
    }

    private Symbol symbol(int type, TipoDato tipoDato) {
        return new Symbol(type, new TypeToken(tipoDato, yyline, yycolumn, yytext()));
    }

    private Symbol symbol(int type, TipoDato tipoDato, String text) {
        String textLiteral = text + "\"";
        literal = new StringBuilder();
        return new Symbol(type, new TypeToken(tipoDato, yyline, yycolumn, textLiteral));
    }

    private void addLexicError(){
        String descripcion = "El simbolo no pertenece al lenguaje";
        errores.add(new ErrorAnalisis(yytext(), yyline+1, yycolumn+1, TipoError.LEXICO, descripcion));
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol(EOF, new Token(yyline, yycolumn, "Fin de linea"));
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol(TEXT_TAG);
            }
            // fall through
          case 147: break;
          case 2:
            { /**Ignorar*/
            }
            // fall through
          case 148: break;
          case 3:
            { yybegin(TAG); return symbol(LESS_THAN);
            }
            // fall through
          case 149: break;
          case 4:
            { addLexicError();
            }
            // fall through
          case 150: break;
          case 5:
            { return symbol(SLASH);
            }
            // fall through
          case 151: break;
          case 6:
            { yybegin(YYINITIAL); return symbol(GREATER_THAN);
            }
            // fall through
          case 152: break;
          case 7:
            { yybegin(PARAMETER); return symbol(OPEN_BRACKET);
            }
            // fall through
          case 153: break;
          case 8:
            { yybegin(VALUE); return symbol(QOUTE_MARK);
            }
            // fall through
          case 154: break;
          case 9:
            { return symbol(ASSIGN);
            }
            // fall through
          case 155: break;
          case 10:
            { yybegin(TAG); return symbol(CLOSE_BRACKET);
            }
            // fall through
          case 156: break;
          case 11:
            { yybegin(PARAMETER); return symbol(QOUTE_MARK);
            }
            // fall through
          case 157: break;
          case 12:
            { return symbol(ID_PARAM);
            }
            // fall through
          case 158: break;
          case 13:
            { return symbol(OPEN_ROUND_BRACKET);
            }
            // fall through
          case 159: break;
          case 14:
            { return symbol(CLOSE_ROUND_BRACKET);
            }
            // fall through
          case 160: break;
          case 15:
            { return symbol(ENTERO);
            }
            // fall through
          case 161: break;
          case 16:
            { return symbol(NAME_PARAM);
            }
            // fall through
          case 162: break;
          case 17:
            { return symbol(NOT);
            }
            // fall through
          case 163: break;
          case 18:
            { literal.append("\""); yybegin(LITERALS);
            }
            // fall through
          case 164: break;
          case 19:
            { yybegin(DATOSCRIPTING);
            }
            // fall through
          case 165: break;
          case 20:
            { return symbol(TIMES);
            }
            // fall through
          case 166: break;
          case 21:
            { return symbol(PLUS);
            }
            // fall through
          case 167: break;
          case 22:
            { return symbol(COMMA);
            }
            // fall through
          case 168: break;
          case 23:
            { return symbol(MINUS);
            }
            // fall through
          case 169: break;
          case 24:
            { return symbol(DIVIDE);
            }
            // fall through
          case 170: break;
          case 25:
            { return symbol(ENTERO2, TipoDato.INTEGER);
            }
            // fall through
          case 171: break;
          case 26:
            { return symbol(COLON);
            }
            // fall through
          case 172: break;
          case 27:
            { return symbol(SEMI);
            }
            // fall through
          case 173: break;
          case 28:
            { return symbol(LESS_THAN);
            }
            // fall through
          case 174: break;
          case 29:
            { return symbol(GREATER_THAN);
            }
            // fall through
          case 175: break;
          case 30:
            { return symbol(ID_VAR);
            }
            // fall through
          case 176: break;
          case 31:
            { return symbol(OPEN_BRACKET);
            }
            // fall through
          case 177: break;
          case 32:
            { return symbol(CLOSE_BRACKET);
            }
            // fall through
          case 178: break;
          case 33:
            { return symbol(OPEN_BRACE);
            }
            // fall through
          case 179: break;
          case 34:
            { return symbol(CLOSE_BRACE);
            }
            // fall through
          case 180: break;
          case 35:
            { literal.append(yytext());
            }
            // fall through
          case 181: break;
          case 36:
            { yybegin(SCRIPTING); return symbol(LITERAL, TipoDato.STRING, literal.toString());
            }
            // fall through
          case 182: break;
          case 37:
            { return symbol(CHAR_VAL, TipoDato.CHAR);
            }
            // fall through
          case 183: break;
          case 38:
            { yybegin(SCRIPTING);
            }
            // fall through
          case 184: break;
          case 39:
            { return symbol(ID);
            }
            // fall through
          case 185: break;
          case 40:
            { return symbol(URL);
            }
            // fall through
          case 186: break;
          case 41:
            { return symbol(WH_VAL);
            }
            // fall through
          case 187: break;
          case 42:
            { return symbol(NOT_EQTUAL_TO);
            }
            // fall through
          case 188: break;
          case 43:
            { return symbol(AND);
            }
            // fall through
          case 189: break;
          case 44:
            { return symbol(LESS_THAN_OR_EQUAL_TO);
            }
            // fall through
          case 190: break;
          case 45:
            { return symbol(EQUAL_TO);
            }
            // fall through
          case 191: break;
          case 46:
            { return symbol(GREATER_THAN_OR_EQUAL_TO);
            }
            // fall through
          case 192: break;
          case 47:
            { return symbol(IF);
            }
            // fall through
          case 193: break;
          case 48:
            { return symbol(OR);
            }
            // fall through
          case 194: break;
          case 49:
            { return symbol(DATOSCRIPT);
            }
            // fall through
          case 195: break;
          case 50:
            { return symbol(C_P);
            }
            // fall through
          case 196: break;
          case 51:
            { return symbol(ALT);
            }
            // fall through
          case 197: break;
          case 52:
            { return symbol(SRC);
            }
            // fall through
          case 198: break;
          case 53:
            { return symbol(SIZE);
            }
            // fall through
          case 199: break;
          case 54:
            { return symbol(RED);
            }
            // fall through
          case 200: break;
          case 55:
            { return symbol(ROW);
            }
            // fall through
          case 201: break;
          case 56:
            { return symbol(DECIMAL_VAL, TipoDato.DECIMAL);
            }
            // fall through
          case 202: break;
          case 57:
            { return symbol(ASC, TipoDato.STRING);
            }
            // fall through
          case 203: break;
          case 58:
            { return symbol(END);
            }
            // fall through
          case 204: break;
          case 59:
            { return symbol(C_BR);
            }
            // fall through
          case 205: break;
          case 60:
            { return symbol(C_H1);
            }
            // fall through
          case 206: break;
          case 61:
            { return symbol(COLS);
            }
            // fall through
          case 207: break;
          case 62:
            { return symbol(HREF);
            }
            // fall through
          case 208: break;
          case 63:
            { return symbol(NAME);
            }
            // fall through
          case 209: break;
          case 64:
            { return symbol(ROWS);
            }
            // fall through
          case 210: break;
          case 65:
            { return symbol(TYPE);
            }
            // fall through
          case 211: break;
          case 66:
            { return symbol(COLOR_VALUE);
            }
            // fall through
          case 212: break;
          case 67:
            { return symbol(AQUA);
            }
            // fall through
          case 213: break;
          case 68:
            { return symbol(BLUE);
            }
            // fall through
          case 214: break;
          case 69:
            { return symbol(GRAY);
            }
            // fall through
          case 215: break;
          case 70:
            { return symbol(LEFT);
            }
            // fall through
          case 216: break;
          case 71:
            { return symbol(LIME);
            }
            // fall through
          case 217: break;
          case 72:
            { return symbol(NAVY);
            }
            // fall through
          case 218: break;
          case 73:
            { return symbol(TEAL);
            }
            // fall through
          case 219: break;
          case 74:
            { return symbol(TEXT);
            }
            // fall through
          case 220: break;
          case 75:
            { return symbol(DESC, TipoDato.STRING);
            }
            // fall through
          case 221: break;
          case 76:
            { return symbol(ELSE);
            }
            // fall through
          case 222: break;
          case 77:
            { return symbol(EXIT);
            }
            // fall through
          case 223: break;
          case 78:
            { return symbol(INIT);
            }
            // fall through
          case 224: break;
          case 79:
            { return symbol(THEN);
            }
            // fall through
          case 225: break;
          case 80:
            { return symbol(CHAR, TipoDato.CHAR);
            }
            // fall through
          case 226: break;
          case 81:
            { return symbol(TRUE, TipoDato.BOOLEAN);
            }
            // fall through
          case 227: break;
          case 82:
            { return symbol(C_DIV);
            }
            // fall through
          case 228: break;
          case 83:
            { return symbol(C_IMG);
            }
            // fall through
          case 229: break;
          case 84:
            { return symbol(CLASS);
            }
            // fall through
          case 230: break;
          case 85:
            { return symbol(COLOR);
            }
            // fall through
          case 231: break;
          case 86:
            { return symbol(WIDTH);
            }
            // fall through
          case 232: break;
          case 87:
            { return symbol(ARIAL);
            }
            // fall through
          case 233: break;
          case 88:
            { return symbol(BLACK);
            }
            // fall through
          case 234: break;
          case 89:
            { return symbol(GREEN);
            }
            // fall through
          case 235: break;
          case 90:
            { return symbol(OLIVE);
            }
            // fall through
          case 236: break;
          case 91:
            { return symbol(RADIO);
            }
            // fall through
          case 237: break;
          case 92:
            { return symbol(RIGHT);
            }
            // fall through
          case 238: break;
          case 93:
            { return symbol(WHILE);
            }
            // fall through
          case 239: break;
          case 94:
            { return symbol(FALSE, TipoDato.BOOLEAN);
            }
            // fall through
          case 240: break;
          case 95:
            { return symbol(C_BODY);
            }
            // fall through
          case 241: break;
          case 96:
            { return symbol(C_GCIC);
            }
            // fall through
          case 242: break;
          case 97:
            { return symbol(C_HEAD);
            }
            // fall through
          case 243: break;
          case 98:
            { return symbol(C_LINK);
            }
            // fall through
          case 244: break;
          case 99:
            { return symbol(C_SPAM);
            }
            // fall through
          case 245: break;
          case 100:
            { return symbol(HEIGHT);
            }
            // fall through
          case 246: break;
          case 101:
            { return symbol(GENEVA);
            }
            // fall through
          case 247: break;
          case 102:
            { return symbol(CENTER);
            }
            // fall through
          case 248: break;
          case 103:
            { return symbol(COLUMN);
            }
            // fall through
          case 249: break;
          case 104:
            { return symbol(MARRON);
            }
            // fall through
          case 250: break;
          case 105:
            { return symbol(NUMBER);
            }
            // fall through
          case 251: break;
          case 106:
            { return symbol(PURPLE);
            }
            // fall through
          case 252: break;
          case 107:
            { return symbol(SILVER);
            }
            // fall through
          case 253: break;
          case 108:
            { return symbol(YELLOW);
            }
            // fall through
          case 254: break;
          case 109:
            { return symbol(HUNTIL);
            }
            // fall through
          case 255: break;
          case 110:
            { return symbol(INSERT);
            }
            // fall through
          case 256: break;
          case 111:
            { return symbol(REPEAT);
            }
            // fall through
          case 257: break;
          case 112:
            { return symbol(STRING, TipoDato.STRING);
            }
            // fall through
          case 258: break;
          case 113:
            { return symbol(C_INPUT);
            }
            // fall through
          case 259: break;
          case 114:
            { return symbol(C_TITLE);
            }
            // fall through
          case 260: break;
          case 115:
            { return symbol(ONCLICK);
            }
            // fall through
          case 261: break;
          case 116:
            { return symbol(COURIER);
            }
            // fall through
          case 262: break;
          case 117:
            { return symbol(VERDANA);
            }
            // fall through
          case 263: break;
          case 118:
            { return symbol(FUCHSIA);
            }
            // fall through
          case 264: break;
          case 119:
            { return symbol(JUSTIFY);
            }
            // fall through
          case 265: break;
          case 120:
            { return symbol(GLOBAL_MODE);
            }
            // fall through
          case 266: break;
          case 121:
            { return symbol(ON_LOAD);
            }
            // fall through
          case 267: break;
          case 122:
            { return symbol(REVERSE, TipoDato.STRING);
            }
            // fall through
          case 268: break;
          case 123:
            { return symbol(BOOLEAN, TipoDato.BOOLEAN);
            }
            // fall through
          case 269: break;
          case 124:
            { return symbol(DECIMAL, TipoDato.DECIMAL);
            }
            // fall through
          case 270: break;
          case 125:
            { return symbol(INTEGER, TipoDato.INTEGER);
            }
            // fall through
          case 271: break;
          case 126:
            { return symbol(C_BUTTON);
            }
            // fall through
          case 272: break;
          case 127:
            { return symbol(C_OPTION);
            }
            // fall through
          case 273: break;
          case 128:
            { return symbol(C_SELECT);
            }
            // fall through
          case 274: break;
          case 129:
            { return symbol(PROCESS_NAME);
            }
            // fall through
          case 275: break;
          case 130:
            { return symbol(CHECKBOX);
            }
            // fall through
          case 276: break;
          case 131:
            { return symbol(REDIRECT);
            }
            // fall through
          case 277: break;
          case 132:
            { return symbol(FONT_SIZE);
            }
            // fall through
          case 278: break;
          case 133:
            { return symbol(THENWHILE);
            }
            // fall through
          case 279: break;
          case 134:
            { return symbol(C_TEXTAREA);
            }
            // fall through
          case 280: break;
          case 135:
            { return symbol(BACKGROUND);
            }
            // fall through
          case 281: break;
          case 136:
            { return symbol(TEXT_ALIGN);
            }
            // fall through
          case 282: break;
          case 137:
            { return symbol(SANS_SERIF);
            }
            // fall through
          case 283: break;
          case 138:
            { return symbol(ALERT_INFO);
            }
            // fall through
          case 284: break;
          case 139:
            { return symbol(LETPAR_NUM, TipoDato.STRING);
            }
            // fall through
          case 285: break;
          case 140:
            { yybegin(SCRIPTING); return symbol(C_SCRIPTING);
            }
            // fall through
          case 286: break;
          case 141:
            { return symbol(FONT_FAMILY);
            }
            // fall through
          case 287: break;
          case 142:
            { yybegin(TAG); return symbol(C_SCRIPTING);
            }
            // fall through
          case 288: break;
          case 143:
            { return symbol(LETIMPAR_NUM, TipoDato.STRING);
            }
            // fall through
          case 289: break;
          case 144:
            { return symbol(NUM_ALEATORIO, TipoDato.INTEGER);
            }
            // fall through
          case 290: break;
          case 145:
            { return symbol(ELEMENT_BY_ID, TipoDato.STRING);
            }
            // fall through
          case 291: break;
          case 146:
            { return symbol(CARACTER_ALEATORIO, TipoDato.CHAR);
            }
            // fall through
          case 292: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
